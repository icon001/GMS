unit uFingerVariable;

interface

const SF_TEMPLATE_SIZE = 384;
const SF_EpochDiff = 25569; // days between 30/12/1899 and 01/01/1970
const SF_SecsInDay = 86400; // number of seconds in a day
type
  UF_RET_CODE = (
    UF_RET_SUCCESS					= 0,

    // serial communication error
    UF_ERR_CANNOT_OPEN_SERIAL		= -1,
    UF_ERR_CANNOT_SETUP_SERIAL		= -2,
    UF_ERR_CANNOT_WRITE_SERIAL		= -3,
    UF_ERR_WRITE_SERIAL_TIMEOUT	= -4,
    UF_ERR_CANNOT_READ_SERIAL		= -5,
    UF_ERR_READ_SERIAL_TIMEOUT		= -6,
    UF_ERR_CHECKSUM_ERROR			= -7,
    UF_ERR_CANNOT_SET_TIMEOUT		= -8,

    // generic command error code
    UF_ERR_SCAN_FAIL				= -101,
    UF_ERR_NOT_FOUND				= -102,
    UF_ERR_NOT_MATCH				= -103,
    UF_ERR_TRY_AGAIN				= -104,
    UF_ERR_TIME_OUT					= -105,
    UF_ERR_MEM_FULL					= -106,
    UF_ERR_EXIST_ID					= -107,
    UF_ERR_FINGER_LIMIT				= -108,
    UF_ERR_UNSUPPORTED				= -109,
    UF_ERR_INVALID_ID				= -110,
    UF_ERR_TIMEOUT_MATCH			= -111,
    UF_ERR_BUSY						= -112,
    UF_ERR_CANCELED					= -113,
    UF_ERR_DATA_ERROR				= -114,
    UF_ERR_EXIST_FINGER 			= -115,
    UF_ERR_DURESS_FINGER 			= -116,
    UF_ERR_CARD_ERROR				= -117,
    UF_ERR_LOCKED					= -118,
    UF_ERR_ACCESS_NOT_GRANTED		= -119,

    UF_ERR_OUT_OF_MEMORY			= -200,
    UF_ERR_INVALID_PARAMETER		= -201,
    UF_ERR_FILE_IO					= -202,
    UF_ERR_INVALID_FILE				= -203,

    // socket error
    UF_ERR_CANNOT_START_SOCKET		= -301,
    UF_ERR_CANNOT_OPEN_SOCKET		= -302,
    UF_ERR_CANNOT_CONNECT_SOCKET	= -303,
    UF_ERR_CANNOT_READ_SOCKET		= -304,
    UF_ERR_READ_SOCKET_TIMEOUT		= -305,
    UF_ERR_CANNOT_WRITE_SOCKET		= -306,
    UF_ERR_WRITE_SOCKET_TIMEOUT		= -307,
    UF_ERR_SOCKET_UNKNOWN		= -311,   //알수 없는 코드 이상 발


    UF_ERR_UNKNOWN					= -9999
  );

  PARRINT64 = record
     Datas : array[0..128] of int64;
  end;

  PTemplate = record
     Datas : array[0..SF_TEMPLATE_SIZE - 1] of Longword;
  end;

  PFingerTemplate = ^FingerTemplate;
  FingerTemplate = record
     Template1 : array[0..SF_TEMPLATE_SIZE - 1] of Longword;
     Template2 : array[0..SF_TEMPLATE_SIZE - 1] of Longword;
     Template3 : array[0..SF_TEMPLATE_SIZE - 1] of Longword;
     Template4 : array[0..SF_TEMPLATE_SIZE - 1] of Longword;
  end;

  T_BS_InitSDK = function ():UF_RET_CODE; stdcall;
  T_BS_OpenSocket = function ( ipAddr :pAnsichar; port:integer; var handle :integer ):UF_RET_CODE; stdcall;
  T_BS_CloseSocket = function ( handle :integer ):UF_RET_CODE; stdcall;
  T_BS_OpenInternalUDP  = function ( var handle :integer ):UF_RET_CODE; stdcall;
  T_BS_CloseInternalUDP  = function ( handle :integer ):UF_RET_CODE; stdcall;
  T_BS_OpenSerial  = function ( port:pAnsiChar;baudrate:integer;var handle:integer ):UF_RET_CODE; stdcall;
  T_BS_CloseSerial  = function ( handle:integer ):UF_RET_CODE; stdcall;
  T_BS_OpenUSB  = function (var handle:integer ):UF_RET_CODE; stdcall;
  T_BS_GetDeviceID = function (handle:integer;var deviceID:int64;var deviceType:integer ):UF_RET_CODE; stdcall;
  T_BS_SetDeviceID = function (handle:integer;deviceID:int64;deviceType:integer ):UF_RET_CODE; stdcall;
  T_BS_SearchDevice  = function (handle:integer;var deviceIDs:PARRINT64;var deviceType:PARRINT64; var numOfDevice:integer):UF_RET_CODE; stdcall;
  T_BS_SearchDeviceInLAN  = function (handle:integer;var numOfDevice : integer;var deviceIDs:PARRINT64; var deviceTypes:PARRINT64; var deviceAddrs:PARRINT64):UF_RET_CODE; stdcall;
  T_BS_ReadCardNo = function (handle:integer;var  acardID:Longword; var acustomID:integer):UF_RET_CODE; stdcall;
  T_BS_ScanTemplate = function (handle:integer;nIndex:integer;pfnTemplate : PFingerTemplate):UF_RET_CODE; stdcall;
  T_BS_ScanTemplateADD = function (handle:integer;aFingerCount:integer;aUserID:integer;aCustomerCardID:integer;fnTemplate:FingerTemplate;aCardNo:Longword;aExpireTime:int64):UF_RET_CODE; stdcall;
  T_BS_ReadImage = function (handle:integer;imageType:integer;bitmapImage:pAnsichar;var imageLen : integer):UF_RET_CODE; stdcall;
  T_BS_DeleteAllUser = function (handle:integer):UF_RET_CODE; stdcall;
  T_BS_DeleteUser = function (handle:integer;aUserID: integer):UF_RET_CODE; stdcall;
  T_BS_SetTime = function (handle:integer):UF_RET_CODE; stdcall;



  TCardSendingChange = procedure(Sender: TObject;  aFNDEVICESEQ,POSITIONNUM : integer;aData:string) of object;
  TReaderConnected = procedure(Sender: TObject;  aFNDEVICESEQ : integer;aConnected:Boolean) of object;
  TFingerCardEvent = procedure(Sender: TObject;  aIP,aCmd,aData1,aData2,aData3:string) of object;
  TServerEvent = procedure(Sender: TObject;  aClientIP,aCmd,aHexData:string) of object;

implementation

end.

unit FINGERAPI22;
{**************************************************************************}
{                                                                          }
{    This C DLL header file first (automatic) conversion generated by:     }
{    HeadConv 4.0 (c) 2000 by Bob Swart (aka Dr.Bob - www.drbob42.com)     }
{      Final Delphi-Jedi (Darth) command-line units edition                }
{                                                                          }
{    Generated Date: 2005-07-28                                            }
{    Generated Time: ¿ÀÈÄ 12:06:58                                              }
{                                                                          }
{**************************************************************************}

interface
uses
{$IFDEF WIN32}
  Windows,Graphics;
{$ELSE}
  Wintypes, WinProcs;
{$ENDIF}


const
  MAX_FEATUREVECT_LEN = 480;
const
  HIGH_LEVEL = 2;
const
  MEDIUM_LEVEL = 1;
const
  LOW_LEVEL = 0;

{/// Error code of FingerAPI }
const
  FPAPIERR_NO = 0;
const
  FPAPIERR_OK = 1;
const
  FPAPIERR_GENERAL_ERROR = -1;
const
  FPAPIERR_CAN_NOT_OPEN_DEVICE = -2;

const
  FPAPIERR_MATCH_FAILED = -101;
const
  FPAPIERR_CAN_NOT_ALLOC_MEMORY = -201;
const
  FPAPIERR_VECT_FAILED = -301;
const
  FPAPIERR_INVALID_IMAGESIZE = -401;
const
  FPAPIERR_FAKER_FINGERPRINT = -501;

const
  FPAPIERR_LEFT_FINGERPRINT = -601;
const
  FPAPIERR_RIGHT_FINGERPRINT = -602;
const
  FPAPIERR_UP_FINGERPRINT = -603;
const
  FPAPIERR_DOWN_FINGERPRINT = -604;
const
  FPAPIERR_TOO_WET = -701;
const
  FPAPIERR_TOO_DRY = -702;

Type TRawImage=array[0..89599] of char;//89600 byte Array of FingerPrint Raw Image
Type TFeature=array[0..MAX_FEATUREVECT_LEN-1] of char;//480byte Array for FingerPrint Templete


function GetFinger(DeviceNumber: Integer; 
                   pRawImage: TRawImage;
                   pFeature: TFeature): Integer {$IFDEF WIN32} stdcall {$ENDIF};


function MatchFingerOneToOne(pFeatureVect1: TFeature;
                             pFeatureVect2: TFeature;
                             securitylevel: Integer): Integer {$IFDEF WIN32} stdcall {$ENDIF}; 


function MatchFingerOneToN(pFeatureVect: TFeature;
                           pDataBaseVects: TFeature;
                           nDataBaseSize: Integer; 
                           securitylevel: Integer; 
                           var pDataBaseIDs: Integer; 
                           var pAlwaysNULL: Integer): Integer {$IFDEF WIN32} stdcall {$ENDIF}; 


function CollectFeature(pFeatureVect1: TFeature;
                        pFeatureVect2: TFeature;
                        pFeatureVect3: TFeature;
                        pCollectVect: TFeature): Integer {$IFDEF WIN32} stdcall {$ENDIF};



function DisplayImage(hWnd: HWND; 
                      x1: Integer; 
                      y1: Integer; 
                      x2: Integer; 
                      y2: Integer; 
                      pImage: TRawImage;
                      nWidth: Integer; 
                      nHeight: Integer): Integer {$IFDEF WIN32} stdcall {$ENDIF}; 


function IsAvailableDevice(DeviceNumber: Integer): Integer {$IFDEF WIN32} stdcall {$ENDIF};


function GetSerial(DeviceNumber: Integer;
                   Serial:array of char): Integer {$IFDEF WIN32} stdcall {$ENDIF};


function GetFingerAPIVersion(var Version: uChar): Integer {$IFDEF WIN32} stdcall {$ENDIF};


function GetSortedIndex(pFeatureVect: TFeature;
                        pDataBaseVects: TFeature;
                        nDataBaseSize: Integer; 
                        var pIndex: Integer): Integer {$IFDEF WIN32} stdcall {$ENDIF};

procedure DisplayRawImage(cnvs:Tcanvas;RawImage:TRawImage;SizeX,SizeY:integer);


implementation

function GetFinger; external 'FINGERAPI22.DLL';
function MatchFingerOneToOne; external 'FINGERAPI22.DLL';
function MatchFingerOneToN; external 'FINGERAPI22.DLL';
function CollectFeature; external 'FINGERAPI22.DLL';
function DisplayImage; external 'FINGERAPI22.DLL';
function IsAvailableDevice; external 'FINGERAPI22.DLL';
function GetSerial; external 'FINGERAPI22.DLL';
function GetFingerAPIVersion; external 'FINGERAPI22.DLL';
function GetSortedIndex; external 'FINGERAPI22.DLL';

// DIB(Device Independant Bitmap) Logic
// I recommend this function to draw fingerprint image at Image component
procedure DisplayRawImage(cnvs:Tcanvas;RawImage:TRawImage;SizeX,SizeY:integer);
type
  TBitMapInfo = record
     bmiHeader : TBitmapInfoHeader;
     bmiColors : array[0..256] of TRGBQuad;
  end;


var
  BitmapInfo   : TBitMapInfo;
  i            : integer;
  DC           : hDC;

begin
ZeroMemory(@BitmapInfo,sizeof(BitmapInfo));

    with BitmapInfo.bmiHeader do begin
     biSize        := sizeof(BitmapInfo.bmiHeader);
     biWidth       := SizeX;
     biHeight      := -SizeY;
     biPlanes      := 1;
     biBitCount    := 8;
     biCompression := BI_RGB;
     biSizeImage   := SizeX*SizeY;
  end;

  with BitmapInfo do
  for i := 0 to 255 do begin
     // 256 Palette
     bmiColors[i].rgbRed   := i;
     bmiColors[i].rgbGreen := i;
     bmiColors[i].rgbBlue  := i;
  end;

  // Get DC ( Device Context )
  DC := cnvs.Handle;
  //Draw FingerPrint Image~~~
  StretchDIBits(DC,
                0,0,cnvs.ClipRect.Right ,cnvs.ClipRect.Bottom,
                0,0,SizeX,SizeY,
                @Rawimage,
                 Windows.TBitmapInfo((@BitmapInfo)^),
                DIB_RGB_COLORS,
                SRCCOPY);
end;

end.









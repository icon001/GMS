unit uFormBuildingState;

interface

uses
  System.SysUtils, System.Classes;

type
  TBuildingState = Class(TComponent)
  private
    DeviceList : TStringList;
    DoorList : TStringList;
    ArmAreaList : TStringList;
    FBuildingCode: string;
    FBuildingBuildingName: string;
    { Private declarations }
  public
    { Public declarations }
    constructor Create(AOwner: TComponent); override;
    destructor Destroy; override;
  public
    procedure SetDevice_Add(aNodeNo,aEcuID,aEcuName:string);
  published
    property BuildingCode : string read FBuildingCode write FBuildingCode;
    property BuildingName : string read FBuildingBuildingName write FBuildingBuildingName;

  End;

  TBuildingDeviceState = Class(TComponent)
  private
    FEcuID: string;
    FNodeNo: string;
    FEcuName: string;
    { Private declarations }
  public
    { Public declarations }
    constructor Create(AOwner: TComponent); override;
    destructor Destroy; override;
  public
  published
    property NodeNo : string read FNodeNo write FNodeNo;
    property EcuID : string read FEcuID write FEcuID;
    property EcuName : string read FEcuName write FEcuName;
  End;

  TBuildingDoorState = Class(TComponent)
  private
    { Private declarations }
  public
    { Public declarations }
    constructor Create(AOwner: TComponent); override;
    destructor Destroy; override;
  public

  End;

  TBuildingArmAreaState = Class(TComponent)
  private
    { Private declarations }
  public
    { Public declarations }
    constructor Create(AOwner: TComponent); override;
    destructor Destroy; override;
  public

  End;

  TDataModule1 = class(TDataModule)
  private
    { Private declarations }
  public
    { Public declarations }
  end;

var
  DataModule1: TDataModule1;

implementation

{%CLASSGROUP 'System.Classes.TPersistent'}

{$R *.dfm}

{ TBuildingState }

constructor TBuildingState.Create(AOwner: TComponent);
begin
  inherited;

  DeviceList := TStringList.Create;
  DoorList := TStringList.Create;
  ArmAreaList := TStringList.Create;
end;

destructor TBuildingState.Destroy;
var
  i : integer;
begin
  for i := DeviceList.Count - 1 downto 0 do
  begin
    TBuildingDeviceState(DeviceList.Objects[i]).Free;
  end;
  DeviceList.Free;
  for i := DoorList.Count - 1 downto 0 do
  begin
    TBuildingDoorState(DoorList.Objects[i]).Free;
  end;
  DoorList.Free;
  for i := ArmAreaList.Count - 1 downto 0 do
  begin
    TBuildingArmAreaState(ArmAreaList.Objects[i]).Free;
  end;
  ArmAreaList.Free;
  inherited;
end;

procedure TBuildingState.SetDevice_Add(aNodeNo, aEcuID, aEcuName: string);
var
  nIndex : integer;
  oDevice : TBuildingDeviceState;
begin
  nIndex := DeviceList.IndexOf(aNodeNo + aEcuID);
  if nIndex > -1 then Exit;
  oDevice := TBuildingDeviceState.Create(nil);
  oDevice.NodeNo := aNodeNo;
  oDevice.EcuID := aEcuID;
  oDevice.ECUNAME := aEcuName;
  DeviceList.AddObject(aNodeNo + aEcuID,oDevice);
end;

{ TBuildingDeviceState }

constructor TBuildingDeviceState.Create(AOwner: TComponent);
begin
  inherited;

end;

destructor TBuildingDeviceState.Destroy;
begin

  inherited;
end;

end.


//---------------------------------------------------------------------------

// This software is Copyright (c) 2011 Embarcadero Technologies, Inc. 
// You may only use this software if you are an authorized licensee
// of Delphi, C++Builder or RAD Studio (Embarcadero Products).
// This software is considered a Redistributable as defined under
// the software license agreement that comes with the Embarcadero Products
// and is subject to that software license agreement.

//---------------------------------------------------------------------------
unit uMergeEvent;

interface

uses
  Windows, Messages, SysUtils, Classes, Graphics, Controls, Forms, Dialogs, Menus,
  ExtCtrls, StdCtrls, AppEvnts, Vcl.ComCtrls,uSubForm, W7Classes, W7Panels,
  CommandArray, AdvPageControl,
  uAccessMonitoringEvent,uSecurityMonitoringEvent;

type
  TfmMergeEvent = class(TfmASubForm)
    BottomDockPanel: TPanel;
    BottomSplitter: TSplitter;
    TopDockPanel: TPanel;
    procedure FormDockOver(Sender: TObject; Source: TDragDockObject; X, Y: Integer; State: TDragState; var Accept: Boolean);
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure FormShow(Sender: TObject);
    procedure PageBuildingDockDrop(Sender: TObject; Source: TDragDockObject; X,
      Y: Integer);
    procedure PageBuildingGetSiteInfo(Sender: TObject; DockClient: TControl;
      var InfluenceRect: TRect; MousePos: TPoint; var CanDock: Boolean);
    procedure FormCreate(Sender: TObject);
  private
    L_bAccessEventDocking : Boolean;
    procedure CreateDockableWindows;
    procedure ShowDockableWindows;
    procedure AccessEventFormCreate;
    procedure AccessEventFormShow;
    procedure SecurityEventFormCreate;
    procedure SecurityEventFormShow;
  private
    DockAccessEvent : TfmAccessMonitorEvent;
    DockSecurityEvent : TfmSecurityMonitoringEvent;
    FUndockedLeft: Integer;
    FUndockedTop: Integer;
    FFloatOnCloseDock: boolean;
    FfmParent: TfmASubForm;
    FDoorType: string;
    function  ComputeDockingRect(var DockRect: TRect; MousePos: TPoint): TAlign;   //도킹되어 있는 상태에서 다른 폼이 도킹을 시도하는 경우 발생
    procedure CMDockClient(var Message: TCMDockClient); message CM_DOCKCLIENT;
    procedure WMNCLButtonDown(var Msg: TMessage); message WM_NCLBUTTONDOWN;
  public
    property fmParent : TfmASubForm read FfmParent write FfmParent;
    property UndockedLeft: Integer read FUndockedLeft;
    property UndockedTop: Integer read FUndockedTop;
    property FloatOnCloseDock: boolean read FFloatOnCloseDock write FFloatOnCloseDock;
  public
    procedure SecurityEventClear;
    procedure ShowDockPanel(APanel: TPanel; MakeVisible: Boolean; Client: TControl);override;
    procedure DeviceCardAccessEvent(aTime,aNodeNo, aEcuID, aDoorNo,aReaderNo, aInOut,aInOutName, aCardMode, aDoorMode, aChangeState, aAccessResult,
                    aAccessPermitName,aDoorState, aATButton, aType, aArmAreaNo, aCardno, aCompanyCode,aCompanyName, aEmSeq,aEmCode, aEmName,aPosiCode,aPosiName:string);
    procedure DeviceAlarmEvent(aNodeNo, aECUID,aExtendID, aCmd,aMsgNo, aTime, aSubCLass, aSubAddr, aArmArea, aMode, aAlarmStateCode, aLoop,
                          aZoneState, aOper, aAlarmStateCodeName, aAlarmStatePCCode,aAlarmStatePCCodeName,aArmModeChange, aAlarmView, aAlarmSound, aAlarmColor:string);
  end;

implementation
uses
  uFormDeviceState,
  uFormVariable,
  uCommonVariable;
{$R *.dfm}

procedure TfmMergeEvent.FormDockOver(Sender: TObject; Source: TDragDockObject;
  X, Y: Integer; State: TDragState; var Accept: Boolean);
var
  ARect: TRect;
begin
  Accept := (Source.Control is Tform);
  //Draw dock preview depending on where the cursor is relative to our client area
  if Accept and (ComputeDockingRect(ARect, Point(X, Y)) <> alNone) then
  begin
    ComputeDockingRect(ARect, Point(X, Y));
    Source.DockRect := ARect;
  end;
end;

procedure TfmMergeEvent.FormShow(Sender: TObject);
begin
  ShowDockableWindows;
//  ShowDockableWindows;
end;

procedure TfmMergeEvent.PageBuildingDockDrop(Sender: TObject;
  Source: TDragDockObject; X, Y: Integer);
begin
  inherited;
  //OnDockDrop gets called AFTER the client has actually docked,
  //so we check for DockClientCount = 1 before making the dock panel visible.
  {if (Sender as TPageControl).DockClientCount = 1 then
    ShowDockPanel(Sender as TPageControl, True, nil);
  (Sender as TPageControl).DockManager.ResetBounds(True);    }
  //Make DockManager repaints it's clients.

end;

procedure TfmMergeEvent.PageBuildingGetSiteInfo(Sender: TObject;
  DockClient: TControl; var InfluenceRect: TRect; MousePos: TPoint;
  var CanDock: Boolean);
begin
  inherited;
  CanDock := DockClient is TForm;
end;

procedure TfmMergeEvent.SecurityEventClear;
begin
  if DockSecurityEvent = nil then Exit;
  DockSecurityEvent.SecurityEventClear;
end;

procedure TfmMergeEvent.SecurityEventFormCreate;
begin
  DockSecurityEvent := TfmSecurityMonitoringEvent.Create(Application);
  DockSecurityEvent.fmParent := self;
end;

procedure TfmMergeEvent.SecurityEventFormShow;
begin
  //If form is docked to one of the "hidden" docking panels, resize the
  //panel and re-show the docked form.
  if (DockSecurityEvent.HostDockSite is TPanel) then
  begin
    if ((DockSecurityEvent.HostDockSite.Height = 0) or (DockSecurityEvent.HostDockSite.Width = 0)) then
      ShowDockPanel(DockSecurityEvent.HostDockSite as TPanel, True, DockSecurityEvent)
    else
    begin
      DockSecurityEvent.Show;
    end;
  end
  else   //if the window isn't docked at all, simply show it.
  begin
    DockSecurityEvent.Show;
  end;
  DockSecurityEvent.ManualDock(BottomDockPanel,DockSecurityEvent,alLeft);
end;

procedure TfmMergeEvent.ShowDockableWindows;
begin
  AccessEventFormShow;
  SecurityEventFormShow;
end;

procedure TfmMergeEvent.ShowDockPanel(APanel: TPanel;
  MakeVisible: Boolean; Client: TControl);
begin
  inherited;

end;

function TfmMergeEvent.ComputeDockingRect(var DockRect: TRect; MousePos: TPoint): TAlign;
var
  DockTopRect,
  DockLeftRect,
  DockBottomRect,
  DockRightRect,
  DockCenterRect: TRect;
begin
  Result := alNone;
  //divide form up into docking "Zones"
  DockLeftRect.TopLeft := Point(0, 0);
  DockLeftRect.BottomRight := Point(ClientWidth div 5, ClientHeight);

  DockTopRect.TopLeft := Point(ClientWidth div 5, 0);
  DockTopRect.BottomRight := Point(ClientWidth div 5 * 4, ClientHeight div 5);

  DockRightRect.TopLeft := Point(ClientWidth div 5 * 4, 0);
  DockRightRect.BottomRight := Point(ClientWidth, ClientHeight);

  DockBottomRect.TopLeft := Point(ClientWidth div 5, ClientHeight div 5 * 4);
  DockBottomRect.BottomRight := Point(ClientWidth div 5 * 4, ClientHeight);

  DockCenterRect.TopLeft := Point(ClientWidth div 5, ClientHeight div 5);
  DockCenterRect.BottomRight := Point(ClientWidth div 5 * 4, ClientHeight div 5 * 4);

  //Find out where the mouse cursor is, to decide where to draw dock preview.
  if PtInRect(DockLeftRect, MousePos) then
  begin
    Result := alLeft;
    DockRect := DockLeftRect;
    DockRect.Right := ClientWidth div 2;
  end
  else
  if PtInRect(DockTopRect, MousePos) then
  begin
    Result := alTop;
    DockRect := DockTopRect;
    DockRect.Left := 0;
    DockRect.Right := ClientWidth;
    DockRect.Bottom := ClientHeight div 2;
  end
  else
  if PtInRect(DockRightRect, MousePos) then
  begin
    Result := alRight;
    DockRect := DockRightRect;
    DockRect.Left := ClientWidth div 2;
  end
  else
  if PtInRect(DockBottomRect, MousePos) then
  begin
    Result := alBottom;
    DockRect := DockBottomRect;
    DockRect.Left := 0;
    DockRect.Right := ClientWidth;
    DockRect.Top := ClientHeight div 2;
 end
  else
  if PtInRect(DockCenterRect, MousePos) then
  begin
    Result := alClient;
    DockRect := DockCenterRect;
  end;
  if Result = alNone then Exit;

  //DockRect is in screen coordinates.
  DockRect.TopLeft := ClientToScreen(DockRect.TopLeft);
  DockRect.BottomRight := ClientToScreen(DockRect.BottomRight);
end;

procedure TfmMergeEvent.CreateDockableWindows;
begin
  AccessEventFormCreate;
  SecurityEventFormCreate;
end;

procedure TfmMergeEvent.DeviceAlarmEvent(aNodeNo, aECUID, aExtendID, aCmd,
  aMsgNo, aTime, aSubCLass, aSubAddr, aArmArea, aMode, aAlarmStateCode, aLoop,
  aZoneState, aOper, aAlarmStateCodeName, aAlarmStatePCCode,
  aAlarmStatePCCodeName, aArmModeChange, aAlarmView, aAlarmSound,
  aAlarmColor: string);
begin
  if DockSecurityEvent <> nil then
  begin
    DockSecurityEvent.DeviceAlarmEvent(aNodeNo, aECUID,aExtendID, aCmd, aMsgNo, aTime, aSubCLass, aSubAddr, aArmArea, aMode, aAlarmStateCode, aLoop,
                      aZoneState, aOper, aAlarmStateCodeName, aAlarmStatePCCode,aAlarmStatePCCodeName,aArmModeChange, aAlarmView, aAlarmSound, aAlarmColor);
  end;
end;

procedure TfmMergeEvent.DeviceCardAccessEvent(aTime, aNodeNo, aEcuID, aDoorNo,
  aReaderNo, aInOut, aInOutName, aCardMode, aDoorMode, aChangeState,
  aAccessResult, aAccessPermitName, aDoorState, aATButton, aType, aArmAreaNo,
  aCardno, aCompanyCode, aCompanyName, aEmSeq, aEmCode, aEmName, aPosiCode,
  aPosiName: string);
begin
  if DockAccessEvent <> nil then
  begin
    DockAccessEvent.DeviceCardAccessEvent(aTime,aNodeNo, aEcuID, aDoorNo,aReaderNo, aInOut,aInOutName, aCardMode, aDoorMode, aChangeState, aAccessResult,
                    aAccessPermitName,aDoorState, aATButton, aType, aArmAreaNo, aCardno, aCompanyCode,aCompanyName, aEmSeq,aEmCode, aEmName,aPosiCode,aPosiName);
  end;
end;

procedure TfmMergeEvent.FormClose(Sender: TObject;
  var Action: TCloseAction);
begin
  //the action taken depends on how the form is docked.
  if DockAccessEvent <> nil then DockAccessEvent.Close;
  DockAccessEvent.Free;
  if DockSecurityEvent <> nil then DockSecurityEvent.Close;
  DockSecurityEvent.Free;

  //if docked to a panel, tell the panel to hide itself. If there are other
  //visible dock clients on the panel, it ShowDockPanel won't allow it to
  //be hidden
  if (HostDockSite is TPanel) then
    fmParent.ShowDockPanel(HostDockSite as TPanel, False, nil);

  Action := caHide;

  if not Floating and FloatOnCloseDock then
  begin
    // Float when close docked window
    Hide;
    ManualFloat(Rect(FUndockedLeft, FUndockedTop, FUndockedLeft + UndockWidth,
      FUndockedTop + UndockHeight));
  end;
end;

procedure TfmMergeEvent.FormCreate(Sender: TObject);
begin
  inherited;
  CreateDockableWindows;

end;

procedure TfmMergeEvent.AccessEventFormCreate;
begin
  DockAccessEvent := TfmAccessMonitorEvent.Create(Application);
  DockAccessEvent.fmParent := self;
end;

procedure TfmMergeEvent.AccessEventFormShow;
begin
  //If form is docked to one of the "hidden" docking panels, resize the
  //panel and re-show the docked form.
  if (DockAccessEvent.HostDockSite is TPanel) then
  begin
    if ((DockAccessEvent.HostDockSite.Height = 0) or (DockAccessEvent.HostDockSite.Width = 0)) then
      ShowDockPanel(DockAccessEvent.HostDockSite as TPanel, True, DockAccessEvent)
    else
    begin
      DockAccessEvent.Show;
    end;
  end
  else   //if the window isn't docked at all, simply show it.
  begin
    DockAccessEvent.Show;
  end;
  DockAccessEvent.ManualDock(TopDockPanel,DockAccessEvent,alLeft);
  TopDockPanel.DockSite := False;
  L_bAccessEventDocking := True;
end;

procedure TfmMergeEvent.CMDockClient(var Message: TCMDockClient);
var
  ARect: TRect;
  DockType: TAlign;
  Host: TForm;
  Pt: TPoint;
begin
  //Overriding this message allows the dock form to create host forms
  //depending on the mouse position when docking occurs. If we don't override
  //this message, the form will use VCL's default DockManager.

  //NOTE: the only time ManualDock can be safely called during a drag
  //operation is we override processing of CM_DOCKCLIENT.
  if Message.DockSource.Control is Tform then
  begin
    //Find out how to dock (Using a TAlign as the result of ComputeDockingRect)
    Pt.X := Message.MousePos.X;
    Pt.Y := Message.MousePos.Y;
    DockType := ComputeDockingRect(ARect, Pt);

    //if we are over a dockable form docked to a panel in the
    //main window, manually dock the dragged form to the panel with
    //the correct orientation.
    if (HostDockSite is TPanel) then
    begin
      Message.DockSource.Control.ManualDock(HostDockSite, nil, DockType);
      Exit;
    end;
  end;
end;

procedure TfmMergeEvent.WMNCLButtonDown(var Msg: TMessage);
begin
  inherited;
  // This event happen when mouse click in caption
  // save initial window position
  FUndockedLeft:= Left;
  FUndockedTop:= Top;
end;

end.

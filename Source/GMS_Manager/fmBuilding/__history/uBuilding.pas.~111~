unit uBuilding;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, uSubForm, CommandArray, AdvGlassButton,
  Vcl.Grids, AdvObj, BaseGrid, AdvGrid, Vcl.StdCtrls, AdvEdit, AdvSmoothLabel,
  AdvSmoothPanel, AdvOfficeTabSet, W7Classes, W7Panels,ActiveX,ADODB,
  Vcl.ComCtrls, Vcl.Menus, Vcl.ImgList, AdvOfficeTabSetStylers, AdvToolBar,
  AdvToolBarStylers, AdvAppStyler, AdvPanel, Vcl.ExtCtrls, AdvGlowButton,
  AdvOfficePager, AdvOfficePagerStylers, Vcl.Imaging.pngimage;

type
  TfmBuilding = class(TfmASubForm)
    pm_Work: TPopupMenu;
    pm_ChiledCodeAdd: TMenuItem;
    pm_DeleteCode: TMenuItem;
    pm_UpdateCode: TMenuItem;
    AdvFormStyler1: TAdvFormStyler;
    AdvOfficeTabSetOfficeStyler1: TAdvOfficeTabSetOfficeStyler;
    BodyPanel: TW7Panel;
    List: TAdvSmoothPanel;
    tv_List: TTreeView;
    tv_Code: TTreeView;
    btn_Add: TAdvGlowButton;
    btn_Update: TAdvGlowButton;
    btn_Delete: TAdvGlowButton;
    lb_List: TLabel;
    btn_minimize: TAdvGlowButton;
    btn_Close: TAdvGlowButton;
    AdvOfficePager1: TAdvOfficePager;
    AdvOfficePage1: TAdvOfficePage;
    AdvOfficePagerOfficeStyler1: TAdvOfficePagerOfficeStyler;
    MenuImageList16: TImageList;
    Pan_Workcode: TAdvSmoothPanel;
    lb_Name: TAdvSmoothLabel;
    lb_WorkType: TLabel;
    ed_Name: TAdvEdit;
    ed_SelectCode: TAdvEdit;
    btn_Save: TAdvGlowButton;
    btn_Cancel: TAdvGlowButton;
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure FormResize(Sender: TObject);
    procedure FormShow(Sender: TObject);
    procedure tv_ListClick(Sender: TObject);
    procedure pm_ChiledCodeAddClick(Sender: TObject);
    procedure btn_CancelClick(Sender: TObject);
    procedure pm_UpdateCodeClick(Sender: TObject);
    procedure btn_SaveClick(Sender: TObject);
    procedure ed_NameKeyPress(Sender: TObject; var Key: Char);
    procedure pm_DeleteCodeClick(Sender: TObject);
    procedure tv_ListDragDrop(Sender, Source: TObject; X, Y: Integer);
    procedure tv_ListDragOver(Sender, Source: TObject; X, Y: Integer;
      State: TDragState; var Accept: Boolean);
    procedure tv_ListDblClick(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure FormActivate(Sender: TObject);
    procedure btn_AddClick(Sender: TObject);
    procedure btn_UpdateClick(Sender: TObject);
    procedure btn_DeleteClick(Sender: TObject);
    procedure btn_minimizeClick(Sender: TObject);
    procedure btn_CloseClick(Sender: TObject);
  private
    L_stMenuID : string;
    L_stButtonCloseCaption : string;
    L_stWork : string;
    procedure FormNameSetting;
    procedure FontSetting;
    function GetCurrentBuildingDeepSeq(aOrgCode:string):string;
    function GetNextChildBuildingCode(aParentCode:string;var aCode,aDeepSeq,aViewSeq:string):Boolean;
    function ChangeBuildingCode(aOrgCode,aCode,aDeepSeq,aViewSeq:string):Boolean;
  private
    { Private declarations }
  public
    { Public declarations }
    procedure Form_Close;
    procedure FormChangeEvent(aNumber:integer);
    procedure FormGradeRefresh;
    procedure FormIDSetting(aID:string);
  end;

var
  fmBuilding: TfmBuilding;

implementation
uses
  uComboBoxCodeLoad,
  uCommonFunction,
  uCommonVariable,
  uFormFunction,
  uFormVariable,
  uDataBase,
  uDBFormMessage,
  uDBFunction,
  uDBInsert,
  uDBUpdate,
  uFormUtil,
  uMain;
{$R *.dfm}

procedure TfmBuilding.btn_AddClick(Sender: TObject);
begin
  inherited;
  pm_ChiledCodeAddClick(pm_ChiledCodeAdd);
end;

procedure TfmBuilding.btn_CancelClick(Sender: TObject);
begin
  inherited;
  Pan_Workcode.Visible := False;
end;

procedure TfmBuilding.btn_CloseClick(Sender: TObject);
begin
  inherited;
  Close;
end;

procedure TfmBuilding.btn_DeleteClick(Sender: TObject);
begin
  inherited;
  pm_DeleteCodeClick(pm_DeleteCode);
end;

procedure TfmBuilding.btn_minimizeClick(Sender: TObject);
begin
  inherited;
  windowState := wsNormal;
end;

procedure TfmBuilding.btn_SaveClick(Sender: TObject);
var
  stMessage : string;
  stParentCode : string;
  stCode,stDeepSeq,stViewSeq : string;
begin
  inherited;
  if Trim(ed_Name.Text) = '' then
  begin
    stMessage := dmFormMessage.GetMessage('BLANKFIELD');
    stMessage := StringReplace(stMessage,'$WORK',lb_Name.Caption.Text,[rfReplaceAll]);
    showmessage(stMessage);
    Exit;
  end;

  if L_stWork = 'CHILDCODEADD' then
  begin
    stParentCode := ed_SelectCode.Text;
    GetNextChildBuildingCode(stParentCode,stCode,stDeepSeq,stViewSeq);
    dmDBInsert.InsertIntoTB_BUILDINGCODE_All(stCode,ed_Name.Text,stDeepSeq,'1',stViewSeq);
    LoadBuildingTreeView(stParentCode,tv_List,tv_Code,0,stParentCode);
    tv_List.SetFocus;
    fmMain.FORMCHANGE(con_FormBMOSBUILDINGCODE,'');
  end else if L_stWork = 'EXTCODEADD' then
  begin
    stParentCode := copy(ed_SelectCode.Text,1,Length(ed_SelectCode.Text) - G_nBuildingCodeLength);
    GetNextChildBuildingCode(stParentCode,stCode,stDeepSeq,stViewSeq);
    dmDBInsert.InsertIntoTB_BUILDINGCODE_All(stCode,ed_Name.Text,stDeepSeq,'1',stViewSeq);
    LoadBuildingTreeView(stParentCode,tv_List,tv_Code,0,stParentCode);
    tv_List.SetFocus;
    fmMain.FORMCHANGE(con_FormBMOSBUILDINGCODE,'');
  end else if L_stWork = 'SELECTCODEUPDATE' then
  begin
    stCode := ed_SelectCode.Text;
    dmDBUpdate.UpdateTB_BUILDINGCODE_Field_StringValue(stCode,'BC_BUILDINGNAME',ed_Name.Text);
    tv_List.Items.Item[tv_List.Selected.AbsoluteIndex].Text := ed_Name.Text;
    tv_List.SetFocus;
    fmMain.FORMCHANGE(con_FormBMOSBUILDINGCODE,'');
    //SearchList(stCode);
  end;

  Pan_Workcode.Visible := False;
end;

procedure TfmBuilding.btn_UpdateClick(Sender: TObject);
begin
  inherited;
  pm_UpdateCodeClick(pm_UpdateCode);
end;

function TfmBuilding.ChangeBuildingCode(aOrgCode, aCode, aDeepSeq,
  aViewSeq: string): Boolean;
var
  stSql : string;
  TempAdoQuery : TADOQuery;
  stChildCode,stDeepSeq,stViewSeq : string;
  stOrgDeepSeq : string;
begin
  stOrgDeepSeq := GetCurrentBuildingDeepSeq(aOrgCode);
  stSql := ' Update TB_BUILDINGCODE Set ';
  stSql := stSql + ' BC_BUILDINGCODE = ''' + aCode + ''',';
  stSql := stSql + ' BC_DEEPSEQ = ' + aDeepSeq + ',';
  stSql := stSql + ' BC_VIEWSEQ = ' + aViewSeq + ' ';
  stSql := stSql + ' Where GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND BC_BUILDINGCODE = ''' + aOrgCode + ''' ';

  result := dmDataBase.ProcessExecSQL(stSql);

  //여기서 해당 출입문,방범구역의 위치 정보를 변경 하자
  stSql := ' Update TB_DOOR set BC_BUILDINGCODE = ''' + aCode + ''' ';
  stSql := stSql + ' Where GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND BC_BUILDINGCODE = ''' + aOrgCode + ''' ';
  result := dmDataBase.ProcessExecSQL(stSql);

  //여기서 해당 방범구역의 위치 정보를 변경 하자
  stSql := ' Update TB_ARMAREA set BC_BUILDINGCODE = ''' + aCode + ''' ';
  stSql := stSql + ' Where GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND BC_BUILDINGCODE = ''' + aOrgCode + ''' ';
  result := dmDataBase.ProcessExecSQL(stSql);

  //여기서 해당 컨트롤러의 위치 정보를 변경 하자
  stSql := ' Update TB_DEVICE set BC_BUILDINGCODE = ''' + aCode + ''' ';
  stSql := stSql + ' Where GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND BC_BUILDINGCODE = ''' + aOrgCode + ''' ';
  result := dmDataBase.ProcessExecSQL(stSql);

  //여기서 해당 노드의 위치 정보를 변경 하자
  stSql := ' Update TB_NODE set BC_BUILDINGCODE = ''' + aCode + ''' ';
  stSql := stSql + ' Where GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND BC_BUILDINGCODE = ''' + aOrgCode + ''' ';
  result := dmDataBase.ProcessExecSQL(stSql);

  Try
    CoInitialize(nil);
    TempAdoQuery := TADOQuery.Create(nil);
    TempAdoQuery.Connection := dmDataBase.ADOConnection;
    TempAdoQuery.DisableControls;

    stSql := 'Select * from TB_BUILDINGCODE ';
    stSql := stSql + ' Where GROUP_CODE = ''' + G_stGroupCode + ''' ';
    stSql := stSql + ' AND BC_BUILDINGCODE Like ''' + aOrgCode + '%'' ';
    stSql := stSql + ' AND BC_DEEPSEQ = ' + inttostr(strtoint(stOrgDeepSeq) + 1) + '';
    with TempAdoQuery do
    begin
      Close;
      sql.Text := stSql;
      Try
        Open;
      Except
        Exit;
      End;
      if recordcount < 1 then Exit;
      while Not Eof do
      begin
        GetNextChildBuildingCode(aCode,stChildCode,stDeepSeq,stViewSeq); //신규 코드가 부모가 됨
        ChangeBuildingCode(FindField('BC_BUILDINGCODE').AsString,stChildCode,stDeepSeq,stViewSeq);
        Next;
      end;
    end;
  Finally
    TempAdoQuery.EnableControls;
    TempAdoQuery.Free;
    CoUninitialize;
  End;
end;

procedure TfmBuilding.ed_NameKeyPress(Sender: TObject; var Key: Char);
begin
  inherited;
  if Key = #13 then
  begin
    Key := #0;
    btn_SaveClick(self);
  end;
end;

procedure TfmBuilding.FontSetting;
begin

end;

procedure TfmBuilding.FormActivate(Sender: TObject);
begin
  inherited;
  WindowState := wsNormal;
end;

procedure TfmBuilding.FormChangeEvent(aNumber: integer);
begin

end;

procedure TfmBuilding.FormClose(Sender: TObject; var Action: TCloseAction);
begin
  inherited;
  fmMain.FORMENABLE(con_FormBMOSBUILDINGCODE,'FALSE');

  Action := caFree;
end;

procedure TfmBuilding.FormCreate(Sender: TObject);
begin
  inherited;
  if G_nFormLanguageType = 1 then
  begin
    ed_name.ImeMode := imSHanguel;// imHanguel;
    ed_name.ImeName := '';
  end else if G_nFormLanguageType = 2 then
  begin
    ed_name.ImeMode := imAlpha;
    ed_name.ImeName := '';
  end;
  FontSetting;
end;

procedure TfmBuilding.FormGradeRefresh;
begin
  Try
    if IsInsertGrade or IsUpdateGrade or IsDeleteGrade then PopupMenu := pm_Work;
    pm_ChiledCodeAdd.Enabled := IsInsertGrade;
    btn_Add.Enabled := IsInsertGrade;
    pm_DeleteCode.Enabled := IsDeleteGrade;
    btn_Delete.Enabled := False;
    pm_UpdateCode.Enabled := IsUpdateGrade;
    btn_Update.Enabled := IsUpdateGrade;
  Except
    Exit;
  End;
end;

procedure TfmBuilding.FormIDSetting(aID: string);
begin
  L_stMenuID := aID;
end;

procedure TfmBuilding.FormNameSetting;
begin
  AdvOfficePage1.Caption := dmFormFunction.GetFormName('0','2','BUTTONMENU002');
  lb_List.Caption := dmFormFunction.GetFormName('2','1','BM2_012');//dmFormFunction.GetFormName('0','2','COMMONLIST01');
  pm_ChiledCodeAdd.Caption := dmFormFunction.GetFormName('2','2','BM2_012pm001');
  btn_Add.Caption := dmFormFunction.GetFormName('2','2','BM2_012pm001');
  pm_DeleteCode.Caption := dmFormFunction.GetFormName('0','2','BUTTONDEL001');
  btn_Delete.Caption := dmFormFunction.GetFormName('0','2','BUTTONDEL001');
  pm_UpdateCode.Caption := dmFormFunction.GetFormName('0','2','BUTTONUPDATE001');
  btn_Update.Caption := dmFormFunction.GetFormName('0','2','BUTTONUPDATE001');
  btn_Save.Caption := dmFormFunction.GetFormName('0','2','BUTTONSAVE001');
  btn_Cancel.Caption := dmFormFunction.GetFormName('0','2','BUTTONCANCEL001');
  lb_Name.Caption.Text := dmFormFunction.GetFormName('0','2','COMMONBUILDINGNAME');

end;

procedure TfmBuilding.FormResize(Sender: TObject);
begin
  inherited;
  btn_Close.Left := AdvOfficePager1.Width - btn_Close.Width - 10;
  btn_minimize.Left := btn_Close.Left - btn_minimize.Width - 2;

  tv_List.Height := List.Height - tv_List.Top - 30;
  tv_List.Width := List.Width - (tv_List.Left * 2);

  Pan_Workcode.Left := (Width div 2) - (Pan_Workcode.Width div 2);
  Pan_Workcode.top := (Height div 2) - (Pan_Workcode.Height div 2);

  if Windowstate = wsMaximized then
  begin
    btn_minimize.Visible := True;
    btn_Close.Visible := True;
  end else
  begin
    btn_minimize.Visible := False;
    btn_Close.Visible := False;
  end;

end;

procedure TfmBuilding.FormShow(Sender: TObject);
begin
  inherited;
  WindowState := wsMaximized;

  FormNameSetting;
  fmMain.FORMENABLE(con_FormBMOSBUILDINGCODE,'TRUE');

  LoadBuildingTreeView('',tv_List,tv_Code,0);
  Left := 0;
  Top := 0;
end;

procedure TfmBuilding.Form_Close;
begin
  Close;
end;

function TfmBuilding.GetCurrentBuildingDeepSeq(aOrgCode: string): string;
var
  stSql : string;
  TempAdoQuery : TADOQuery;
begin
  stSql := 'Select * from TB_BUILDINGCODE ';
  stSql := stSql + ' Where GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND BC_BUILDINGCODE = ''' + aOrgCode + ''' ';
  Try
    CoInitialize(nil);
    TempAdoQuery := TADOQuery.Create(nil);
    TempAdoQuery.Connection := dmDataBase.ADOConnection;
    TempAdoQuery.DisableControls;

    with TempAdoQuery do
    begin
      Close;
      sql.Text := stSql;
      Try
        Open;
      Except
        Exit;
      End;

      while Not Eof do
      begin
        result := FindField('BC_DEEPSEQ').AsString;
        Next;
      end;
    end;
  Finally
    TempAdoQuery.EnableControls;
    TempAdoQuery.Free;
    CoUninitialize;
  End;
end;

function TfmBuilding.GetNextChildBuildingCode(aParentCode: string; var aCode, aDeepSeq,
  aViewSeq: string): Boolean;
var
  stSql : string;
  TempAdoQuery : TADOQuery;
  nDeepSeq : integer;
  nViewSeq : integer;
  stTemp : string;
  nChildCode : integer;
begin
  aCode := '';
  aDeepSeq := '0';
  aViewSeq := '0';
  nViewSeq := 0;
  nChildCode := 0;

  stSql := 'Select * from TB_BUILDINGCODE ';
  stSql := stSql + ' Where GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND BC_BUILDINGCODE Like ''' + aParentCode + '%'' ';
  stSql := stSql + ' Order by BC_DEEPSEQ,BC_VIEWSEQ ';
  Try
    CoInitialize(nil);
    TempAdoQuery := TADOQuery.Create(nil);
    TempAdoQuery.Connection := dmDataBase.ADOConnection;
    TempAdoQuery.DisableControls;

    with TempAdoQuery do
    begin
      Close;
      sql.Text := stSql;
      Try
        Open;
      Except
        Exit;
      End;

      while Not Eof do
      begin
        if FindField('BC_BUILDINGCODE').AsString = aParentCode then
        begin
          nDeepSeq := FindField('BC_DEEPSEQ').AsInteger;
          aDeepSeq := inttostr(nDeepSeq + 1);
        end;
        if FindField('BC_DEEPSEQ').AsInteger = (nDeepSeq + 1) then
        begin
          if nViewSeq < FindField('BC_VIEWSEQ').AsInteger  then nViewSeq := FindField('BC_VIEWSEQ').AsInteger;
          stTemp := FindField('BC_BUILDINGCODE').AsString;
          stTemp := copy(stTemp,1 + (((nDeepSeq) * G_nBuildingCodeLength) + 1 ),G_nBuildingCodeLength);
          if nChildCode < strtoint(stTemp)  then nChildCode := strtoint(stTemp);
        end;

        Next;
      end;
    end;
  Finally
    TempAdoQuery.EnableControls;
    TempAdoQuery.Free;
    CoUninitialize;
  End;
  aViewSeq := inttostr(nViewSeq + 1);
  aCode := aParentCode + FillZeroNumber(nChildCode + 1,G_nBuildingCodeLength);
end;

procedure TfmBuilding.pm_ChiledCodeAddClick(Sender: TObject);
var
  stMessage : string;
begin
  inherited;
  if tv_List.Selected = nil then
  begin
    stMessage := dmFormMessage.GetMessage('SELECTERROR');
    stMessage := stringReplace(stMessage,'$WORK',pm_ChiledCodeAdd.Caption,[rfReplaceAll]);
    showmessage(stMessage);
    Exit;
  end;
  Pan_Workcode.Visible := True;
  lb_WorkType.Caption := pm_ChiledCodeAdd.Caption;
  ed_SelectCode.Text := tv_Code.Items.Item[tv_List.Selected.AbsoluteIndex].Text;
  L_stWork := 'CHILDCODEADD';
  ed_Name.Text := '';
  ed_Name.SetFocus;
end;

procedure TfmBuilding.pm_DeleteCodeClick(Sender: TObject);
var
  stMessage : string;
  stCode : string;
  stSql : string;
begin
  inherited;
  if tv_List.Selected = nil then
  begin
    stMessage := dmFormMessage.GetMessage('SELECTERROR');
    stMessage := stringReplace(stMessage,'$WORK',pm_DeleteCode.Caption,[rfReplaceAll]);
    showmessage(stMessage);
    Exit;
  end;
  stMessage := stringReplace(dmFormMessage.GetMessage('WORKMESSAGE'),'$WORK',pm_DeleteCode.Caption,[rfReplaceAll]);
  if (Application.MessageBox(PChar(stMessage),'Information',MB_OKCANCEL) = IDCANCEL)  then Exit;
  stCode := tv_Code.Items.Item[tv_List.Selected.AbsoluteIndex].Text;
  stSql := ' Delete From TB_BUILDINGCODE ';//set BC_CODEUSE = ''0'' ';
  stSql := stSql + ' Where GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND BC_BUILDINGCODE LIKE ''' + stCode + '%'' ';
  dmDataBase.ProcessExecSQL(stSql);
//  dmDBUpdate.UpdateTB_COMPANYCODE_Field_StringValue(stCode,'CO_CODEUSE','0');
  stSql := ' Update TB_DOOR set BC_BUILDINGCODE = ''0'' where BC_BUILDINGCODE LIKE ''' + stCode + '%'' ';
  dmDataBase.ProcessExecSQL(stSql);

  stSql := ' Update TB_ARMAREA set BC_BUILDINGCODE = ''0'' where BC_BUILDINGCODE LIKE ''' + stCode + '%'' ';
  dmDataBase.ProcessExecSQL(stSql);

  LoadBuildingTreeView(stCode,tv_List,tv_Code,0);
end;

procedure TfmBuilding.pm_UpdateCodeClick(Sender: TObject);
var
  stMessage : string;
begin
  inherited;
  if tv_List.Selected = nil then
  begin
    stMessage := dmFormMessage.GetMessage('SELECTERROR');
    stMessage := stringReplace(stMessage,'$WORK',pm_UpdateCode.Caption,[rfReplaceAll]);
    showmessage(stMessage);
    Exit;
  end;
  Pan_Workcode.Visible := True;
  lb_WorkType.Caption := pm_UpdateCode.Caption;
  ed_SelectCode.Text := tv_Code.Items.Item[tv_List.Selected.AbsoluteIndex].Text;
  ed_Name.Text := tv_List.Items.Item[tv_List.Selected.AbsoluteIndex].Text;
  L_stWork := 'SELECTCODEUPDATE';
  ed_Name.SetFocus;
end;

procedure TfmBuilding.tv_ListClick(Sender: TObject);
begin
  inherited;
  if tv_List.Selected = nil then Exit;

  if tv_List.Selected.AbsoluteIndex = 0 then
  begin
     btn_Delete.Enabled := False;
    pm_DeleteCode.Visible := False;
  end else
  begin
    //pm_ExtendCodeAdd.Visible := True;
    btn_Delete.Enabled := IsDeleteGrade;
    pm_DeleteCode.Visible := True;
  end;
end;

procedure TfmBuilding.tv_ListDblClick(Sender: TObject);
begin
  inherited;
  pm_UpdateCodeClick(Sender);

end;

procedure TfmBuilding.tv_ListDragDrop(Sender, Source: TObject; X, Y: Integer);
var
  currentItem, dropItem : TTreeNode;
  stOrgCode : string;
  stTargetParentCode : string;
  stCode : string;
  stDeepSeq,stViewSeq : string;
  stSql : string;
begin
  inherited;
  if Sender = Source then
  begin
    with TTreeView(Sender) do
    begin
      dropItem :=GetNodeAt(X,Y);
      currentItem := Selected;
      if currentItem.AbsoluteIndex = 0 then Exit;   //루트디렉토리가 움직일수는 없다
      stTargetParentCode := tv_Code.Items[dropItem.AbsoluteIndex].Text;
      stOrgCode := tv_Code.Items[currentItem.AbsoluteIndex].Text;
      if copy(stTargetParentCode,1,Length(stOrgCode)) = stOrgCode then Exit; //자신의 하위디렉토리로 갈수는 없다
      GetNextChildBuildingCode(stTargetParentCode,stCode,stDeepSeq,stViewSeq);
      ChangeBuildingCode(stOrgCode,stCode,stDeepSeq,stViewSeq);
    end;
  end;
  LoadBuildingTreeView(stCode,tv_List,tv_Code,0);
end;

procedure TfmBuilding.tv_ListDragOver(Sender, Source: TObject; X, Y: Integer;
  State: TDragState; var Accept: Boolean);
begin
  inherited;
  Accept := Sender = tv_List;
end;

initialization
  RegisterClass(TfmBuilding);
Finalization
  UnRegisterClass(TfmBuilding);

end.

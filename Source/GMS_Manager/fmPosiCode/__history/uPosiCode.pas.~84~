unit uPosiCode;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, uSubForm, CommandArray, AdvGlassButton,
  Vcl.Grids, AdvObj, BaseGrid, AdvGrid, Vcl.StdCtrls, AdvEdit, AdvSmoothLabel,
  AdvSmoothPanel, AdvOfficeTabSet, W7Classes, W7Panels,ActiveX,ADODB,
  Vcl.ComCtrls, Vcl.Menus, Vcl.ImgList, AdvOfficeTabSetStylers, AdvToolBar,
  AdvToolBarStylers, AdvGlowButton, AdvOfficePager, AdvAppStyler,
  AdvOfficePagerStylers, Vcl.Imaging.pngimage, Vcl.ExtCtrls;

const
  con_LocalCompanyImageIndex = 0;
  con_LocalPosiImageIndex = 1;

type
  TfmPosiCode = class(TfmASubForm)
    List: TAdvSmoothPanel;
    tv_List: TTreeView;
    tv_Code: TTreeView;
    pm_Work: TPopupMenu;
    pm_UpdateCode: TMenuItem;
    Pan_Workcode: TAdvSmoothPanel;
    ed_Name: TAdvEdit;
    ed_SelectPosiCode: TAdvEdit;
    pm_DeleteCode: TMenuItem;
    pmAddCode: TMenuItem;
    ed_SelectCompanCode: TAdvEdit;
    MenuImageList16: TImageList;
    AdvOfficePager1: TAdvOfficePager;
    AdvOfficePage1: TAdvOfficePage;
    btn_minimize: TAdvGlowButton;
    btn_Close: TAdvGlowButton;
    lb_List: TLabel;
    btn_Add: TAdvGlowButton;
    btn_Update: TAdvGlowButton;
    btn_Delete: TAdvGlowButton;
    AdvOfficePagerOfficeStyler1: TAdvOfficePagerOfficeStyler;
    AdvFormStyler1: TAdvFormStyler;
    lb_WorkType: TLabel;
    lb_Name: TAdvSmoothLabel;
    btn_Save: TAdvGlowButton;
    btn_Cancel: TAdvGlowButton;
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure FormResize(Sender: TObject);
    procedure FormShow(Sender: TObject);
    procedure tv_ListClick(Sender: TObject);
    procedure btn_CancelClick(Sender: TObject);
    procedure pm_UpdateCodeClick(Sender: TObject);
    procedure btn_SaveClick(Sender: TObject);
    procedure ed_NameKeyPress(Sender: TObject; var Key: Char);
    procedure pm_DeleteCodeClick(Sender: TObject);
    procedure tv_ListDragDrop(Sender, Source: TObject; X, Y: Integer);
    procedure tv_ListDragOver(Sender, Source: TObject; X, Y: Integer;
      State: TDragState; var Accept: Boolean);
    procedure tv_ListDblClick(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure pmAddCodeClick(Sender: TObject);
    procedure btn_CloseClick(Sender: TObject);
    procedure btn_minimizeClick(Sender: TObject);
    procedure FormActivate(Sender: TObject);
    procedure btn_AddClick(Sender: TObject);
    procedure btn_UpdateClick(Sender: TObject);
    procedure btn_DeleteClick(Sender: TObject);
  private
    L_stMenuID : string;
    L_stButtonCloseCaption : string;
    L_stWork : string;
    procedure FormNameSetting;
    procedure FontSetting;
    procedure SearchList(aCode:string);
  public
    { Public declarations }
    procedure Form_Close;
    procedure FormChangeEvent(aNumber:integer);
    procedure FormGradeRefresh;
    procedure FormIDSetting(aID:string);
  end;

var
  fmPosiCode: TfmPosiCode;

implementation
uses
  uCommonFunction,
  uCommonVariable,
  uFormVariable,
  uDataBase,
  uDBFormMessage,
  uDBFunction,
  uDBInsert,
  uDBUpdate,
  uDBDelete,
  uFormFunction,
  uFormUtil,
  uMain;
{$R *.dfm}

procedure TfmPosiCode.btn_AddClick(Sender: TObject);
begin
  inherited;
  pmAddCodeClick(pmAddCode);
end;

procedure TfmPosiCode.btn_CancelClick(Sender: TObject);
begin
  inherited;
  Pan_Workcode.Visible := False;
end;

procedure TfmPosiCode.btn_CloseClick(Sender: TObject);
begin
  inherited;
  Close;
end;

procedure TfmPosiCode.btn_DeleteClick(Sender: TObject);
begin
  inherited;
  pm_DeleteCodeClick(pm_DeleteCode);
end;

procedure TfmPosiCode.btn_minimizeClick(Sender: TObject);
begin
  inherited;
  windowState := wsNormal;
end;

procedure TfmPosiCode.btn_SaveClick(Sender: TObject);
var
  stMessage : string;
  stParentCode : string;
  stCode : string;
  stNodeNo,stEcuID,stExtendID,stDoorNo: string;
  stTime : string;
  stClientIP : string;
  stCompanyCode : string;
begin
  inherited;
  stClientIP:= GetLocalIPAddr;
  stTime := FormatDateTime('yyyymmddhhnnsszzz',now);
  if Trim(ed_Name.Text) = '' then
  begin
    stMessage := dmFormMessage.GetMessage('BLANKFIELD');
    stMessage := StringReplace(stMessage,'$WORK',lb_Name.Caption.Text,[rfReplaceAll]);
    showmessage(stMessage);
    Exit;
  end;
  if L_stWork = 'SELECTCODEUPDATE' then
  begin
    stCode := ed_SelectPosiCode.Text;
    Delete(stCode,1,1); //직위코드 추출
    dmDBUpdate.UpdateTB_POSICODE_Field_StringValue(stCode,'PO_POSICODENAME',ed_Name.Text);
    dmDBInsert.InsertIntoTB_SYSTEMLOG_All(copy(stTime,1,8),copy(stTime,9,6),stClientIP,G_stAdminUserID,'0', '00', '', '0', con_ComLogTYPE_PROGRAM, L_stMenuID + '(' + Caption + '): Change');
    tv_List.Items.Item[tv_List.Selected.AbsoluteIndex].Text := ed_Name.Text;
    tv_List.SetFocus;
    fmMain.FORMCHANGE(con_FormBMOSPOSICODE,'');
    //SearchList(ed_SelectCode.Text);
  end else if L_stWork = 'POSICODEADD' then
  begin
    stCompanyCode := ed_SelectCompanCode.Text;
    if dmDBFunction.CheckTB_POSICODE_PosiName(stCompanyCode,ed_Name.Text) = 1 then
    begin
      stMessage := dmFormMessage.GetMessage('DBDATADUP');
      stMessage := StringReplace(stMessage,'$WORK',lb_Name.Caption.Text,[rfReplaceAll]);
      showmessage(stMessage);
      Exit;
    end;
    stCode := dmDBFunction.GetNextTB_PosiCode;
    dmDBInsert.InsertIntoTB_POSICODE_DefaultValue(stCode,ed_Name.Text,stCompanyCode,stCode);
    fmMain.FORMCHANGE(con_FormBMOSPOSICODE,'');
    SearchList(stCompanyCode);
    tv_List.SetFocus;
  end;
  Pan_Workcode.Visible := False;
end;

procedure TfmPosiCode.btn_UpdateClick(Sender: TObject);
begin
  inherited;
  pm_UpdateCodeClick(pm_UpdateCode);
end;

procedure TfmPosiCode.ed_NameKeyPress(Sender: TObject; var Key: Char);
begin
  inherited;
  if Key = #13 then
  begin
    Key := #0;
    btn_SaveClick(self);
  end;
end;

procedure TfmPosiCode.FontSetting;
begin
(*  dmFormUtil.TravelFormFontSetting(self,G_stFontName,inttostr(G_nFontSize));
  dmFormUtil.TravelAdvOfficeTabSetOfficeStylerFontSetting(AdvOfficeTabSetOfficeStyler1, G_stFontName,inttostr(G_nFontSize));
  dmFormUtil.FormAdvOfficeTabSetOfficeStylerSetting(AdvOfficeTabSetOfficeStyler1,G_stFormStyle);
  dmFormUtil.FormAdvToolBarOfficeStylerSetting(AdvToolBarOfficeStyler1,G_stFormStyle);
  dmFormUtil.FormStyleSetting(self,AdvToolBarOfficeStyler1); *)
end;

procedure TfmPosiCode.FormActivate(Sender: TObject);
begin
  inherited;
  WindowState := wsNormal;
end;

procedure TfmPosiCode.FormChangeEvent(aNumber: integer);
begin

end;

procedure TfmPosiCode.FormClose(Sender: TObject; var Action: TCloseAction);
begin
  inherited;
  fmMain.FORMENABLE(con_FormBMOSPOSICODE,'FALSE');

  Action := caFree;
end;

procedure TfmPosiCode.FormCreate(Sender: TObject);
begin
  inherited;
  if G_nFormLanguageType = 1 then
  begin
    ed_name.ImeMode := imSHanguel; // imHanguel;
    ed_name.ImeName := '';
  end else if G_nFormLanguageType = 2 then
  begin
    ed_name.ImeMode := imAlpha;
    ed_name.ImeName := '';
  end;
  tv_Code.Left := -400;
  FontSetting;
end;

procedure TfmPosiCode.FormGradeRefresh;
begin
  Try
    if IsInsertGrade or IsUpdateGrade or IsDeleteGrade then PopupMenu := pm_Work;
    pmAddCode.Enabled := IsInsertGrade;
    btn_Add.Enabled := False;
    pm_DeleteCode.Enabled := IsDeleteGrade;
    btn_Delete.Enabled := False;
    pm_UpdateCode.Enabled := IsUpdateGrade;
    btn_Update.Enabled := False;
  Except
    Exit;
  End;
end;

procedure TfmPosiCode.FormIDSetting(aID: string);
begin
  L_stMenuID := aID;
end;

procedure TfmPosiCode.FormNameSetting;
begin
  AdvOfficePage1.Caption := dmFormFunction.GetFormName('0','2','BUTTONMENU002');
  lb_List.Caption := dmFormFunction.GetFormName('2','1','BM2_013');//dmFormFunction.GetFormName('0','2','COMMONLIST01');
  pmAddCode.Caption := dmFormFunction.GetFormName('2','2','BM2_013pm001');
  btn_Add.Caption := dmFormFunction.GetFormName('2','2','BM2_013pm001');
  pm_DeleteCode.Caption := dmFormFunction.GetFormName('0','2','BUTTONDEL001');
  btn_Delete.Caption := dmFormFunction.GetFormName('0','2','BUTTONDEL001');
  pm_UpdateCode.Caption := dmFormFunction.GetFormName('0','2','BUTTONUPDATE001');
  btn_Update.Caption := dmFormFunction.GetFormName('0','2','BUTTONUPDATE001');
  btn_Save.Caption := dmFormFunction.GetFormName('0','2','BUTTONSAVE001');
  btn_Cancel.Caption := dmFormFunction.GetFormName('0','2','BUTTONCANCEL001');
  lb_Name.Caption.Text := dmFormFunction.GetFormName('0','2','COMMONEMPLOYEEPOSINAME');
end;

procedure TfmPosiCode.FormResize(Sender: TObject);
begin
  inherited;
  btn_Close.Left := AdvOfficePager1.Width - btn_Close.Width - 10;
  btn_minimize.Left := btn_Close.Left - btn_minimize.Width - 2;

  tv_List.Height := List.Height - tv_List.Top - 30;
  tv_List.Width := List.Width - (tv_List.Left * 2);

  Pan_Workcode.Left := (Width div 2) - (Pan_Workcode.Width div 2);
  Pan_Workcode.top := (Height div 2) - (Pan_Workcode.Height div 2);

  if Windowstate = wsMaximized then
  begin
    btn_minimize.Visible := True;
    btn_Close.Visible := True;
  end else
  begin
    btn_minimize.Visible := False;
    btn_Close.Visible := False;
  end;
end;

procedure TfmPosiCode.FormShow(Sender: TObject);
begin
  inherited;
  WindowState := wsMaximized;

  FormNameSetting;
  fmMain.FORMENABLE(con_FormBMOSPOSICODE,'TRUE');

  SearchList('');
  Left := 0;
  Top := 0;

end;

procedure TfmPosiCode.Form_Close;
begin
  Close;
end;

procedure TfmPosiCode.pmAddCodeClick(Sender: TObject);
var
  stMessage : string;
begin
  inherited;
  if tv_List.Selected = nil then
  begin
    stMessage := dmFormMessage.GetMessage('SELECTERROR');
    stMessage := stringReplace(stMessage,'$WORK',pmAddCode.Caption,[rfReplaceAll]);
    showmessage(stMessage);
    Exit;
  end;
  Pan_Workcode.Visible := True;
  lb_WorkType.Caption := pmAddCode.Caption;
  ed_SelectCompanCode.Text := tv_Code.Items.Item[tv_List.Selected.AbsoluteIndex].Text;
  ed_SelectPosiCode.Text := '';
  ed_Name.Text := '';
  ed_Name.SetFocus;
  L_stWork := 'POSICODEADD';

end;

procedure TfmPosiCode.pm_DeleteCodeClick(Sender: TObject);
var
  stMessage : string;
  stCode : string;
  stSql : string;
  stNodeNo : string;
  stEcuID : string;
  stExtendID : string;
  stDoorNo : string;
  stTime : string;
  stClientIP : string;
  stPosiCode : string;
begin
  inherited;
  stClientIP:= GetLocalIPAddr;
  stTime := FormatDateTime('yyyymmddhhnnsszzz',now);
  if tv_List.Selected = nil then
  begin
    stMessage := dmFormMessage.GetMessage('SELECTERROR');
//    stMessage := stringReplace(stMessage,'$WORK',pm_DeleteCode.Caption,[rfReplaceAll]);
    showmessage(stMessage);
    Exit;
  end;

  stMessage := stringReplace(dmFormMessage.GetMessage('WORKMESSAGE'),'$WORK',pm_DeleteCode.Caption,[rfReplaceAll]);
  if (Application.MessageBox(PChar(stMessage),'Information',MB_OKCANCEL) = IDCANCEL)  then Exit;
  stCode := tv_Code.Items.Item[tv_List.Selected.AbsoluteIndex].Text;
  stPosiCode := stCode;
  Delete(stPosiCode,1,1);
  if dmDBFunction.CheckTB_EMPLOYEE_PosiCode(stPosiCode) = 1 then
  begin
    stMessage := dmFormMessage.GetMessage('EMPPOSIUSE');
    showmessage(stMessage);
    Exit;
  end;

  dmDBDelete.DeleteTB_POSICODE(stPosiCode);
  dmDBInsert.InsertIntoTB_SYSTEMLOG_All(copy(stTime,1,8),copy(stTime,9,6),stClientIP,G_stAdminUserID,'0', '00', '', '0', con_ComLogTYPE_PROGRAM, L_stMenuID + '(' + Caption + '-' + stPosiCode +'): Delete');
  SearchList(stCode);
end;

procedure TfmPosiCode.pm_UpdateCodeClick(Sender: TObject);
var
  stMessage : string;
begin
  inherited;
  if tv_List.Selected = nil then
  begin
    stMessage := dmFormMessage.GetMessage('SELECTERROR');
    stMessage := stringReplace(stMessage,'$WORK',pm_UpdateCode.Caption,[rfReplaceAll]);
    showmessage(stMessage);
    Exit;
  end;
  ed_SelectPosiCode.Text := tv_Code.Items.Item[tv_List.Selected.AbsoluteIndex].Text;
  if copy(ed_SelectPosiCode.Text,1,1) <> 'P' then Exit;

  Pan_Workcode.Visible := True;
  lb_WorkType.Caption := pm_UpdateCode.Caption;
  ed_Name.Text := tv_List.Items.Item[tv_List.Selected.AbsoluteIndex].Text;
  L_stWork := 'SELECTCODEUPDATE';
  ed_Name.SetFocus;
end;

procedure TfmPosiCode.SearchList(aCode: string);
var
  aTreeView : TTreeview;
  vTreeView : TTreeview;
  aNode,bNode,cNode,dNode : TTreeNode;
  vNode1,vNode2,vNode3 : TTreeNode;
  stSql : string;
  TempAdoQuery : TADOQuery;
  stParentCode : string;
  nDeepSeq : integer;
  stPosiAllCode : string;
begin
  aTreeView := tv_List;
  aTreeView.ReadOnly:= True;
  aTreeView.Items.Clear;
  vTreeView := tv_Code;
  vTreeView.ReadOnly := True;
  vTreeView.Items.Clear;

  if G_nFormLanguageType = 1 then
    aNode := aTreeView.Items.Add(nil,'공통')
  else aNode := aTreeView.Items.Add(nil,'ALL');
  vTreeView.Items.AddChild(nil,'0');
  aNode.Expanded := True;

  stSql := ' Select * from TB_COMPANYCODE ';
  stSql := stSql + ' Where GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND CO_DEEPSEQ = 1 ';
  stSql := stSql + ' AND CO_CODEUSE = ''1'' ';
  stSql := stSql + ' Order by CO_VIEWSEQ,CO_COMPANYCODE ';
  Try
    CoInitialize(nil);
    TempAdoQuery := TADOQuery.Create(nil);
    TempAdoQuery.Connection := dmDataBase.ADOConnection;
    TempAdoQuery.DisableControls;

    with TempAdoQuery do
    begin
      Close;
      sql.Text := stSql;
      Try
        Open;
      Except
        Exit;
      End;
      //if RecordCount < 1 then Exit;  //소속은 무조건 0 이 있으므로
      First;
      While Not Eof do
      begin
        nDeepSeq := FindField('CO_DEEPSEQ').AsInteger;
        stParentCode := copy(FindField('CO_COMPANYCODE').AsString,1,1 + ((nDeepSeq - 1) * G_nCompanyCodeLength) );
        vNode1:= GetNodeByText(vTreeView,stParentCode,True);
        if vNode1 <> nil then
        begin
          bNode := aTreeView.Items.Item[vNode1.AbsoluteIndex];
          if bNode <> nil then
          begin
            cNode:= aTreeView.Items.AddChild(bNode,FindField('CO_COMPANYNAME').AsString);
            cNode.ImageIndex := con_LocalCompanyImageIndex;
            cNode.SelectedIndex := con_LocalCompanyImageIndex;
          end;
          vNode2:= vTreeView.Items.Item[vNode1.AbsoluteIndex];
          if vNode2 <> nil then
          begin
            vNode3:= vTreeView.Items.AddChild(vNode2,FindField('CO_COMPANYCODE').AsString);
          end;
          bNode.Expanded := True;
          vNode1.Expanded := True;
          if aCode = FindField('CO_COMPANYCODE').AsString  then
          begin
            if cNode <> nil then cNode.Selected := True;
          end;
        end;
        Next;
      end;

      stSql := ' Select * from TB_POSICODE  ';
      stSql := stSql + ' Order by PO_VIEWSEQ ';

      Close;
      sql.Text := stSql;
      Try
        Open;
      Except
        Exit;
      End;
      if RecordCount < 1 then Exit;
      While Not Eof do
      begin
        stParentCode := FindField('CO_COMPANYCODE').AsString;
        if Trim(stParentCode) = '' then stParentCode := '0';
        vNode1:= GetNodeByText(vTreeView,stParentCode,True);
        if vNode1 <> nil then
        begin
          bNode := aTreeView.Items.Item[vNode1.AbsoluteIndex];
          if bNode <> nil then
          begin
            cNode:= aTreeView.Items.AddChild(bNode,FindField('PO_POSICODENAME').AsString);
            cNode.ImageIndex := con_LocalPosiImageIndex;
            cNode.SelectedIndex := con_LocalPosiImageIndex;
          end;
          vNode2:= vTreeView.Items.Item[vNode1.AbsoluteIndex];
          if vNode2 <> nil then
          begin
            stPosiAllCode := 'P' + FindField('PO_POSICODE').AsString;
            vNode3:= vTreeView.Items.AddChild(vNode2,stPosiAllCode);
          end;
          bNode.Expanded := True;
          vNode1.Expanded := True;
          if aCode = stPosiAllCode  then
          begin
            if cNode <> nil then cNode.Selected := True;
          end;
        end;
        Next;
      end;

    end;
  Finally
    TempAdoQuery.EnableControls;
    TempAdoQuery.Free;
    CoUninitialize;
  End;
  tv_List.SetFocus;
end;

procedure TfmPosiCode.tv_ListClick(Sender: TObject);
var
  stCode : string;
begin
  inherited;
  popupmenu := nil;
  if tv_List.Selected = nil then Exit;

  popupmenu := pm_Work;
  stCode := tv_Code.Items.Item[tv_List.Selected.AbsoluteIndex].Text;

  if copy(stCode,1,1) = 'P' then
  begin
    pmAddCode.Visible := False;
    btn_Add.Enabled := False;
    pm_UpdateCode.Visible := IsUpdateGrade;
    btn_Update.Enabled := IsUpdateGrade;
    pm_DeleteCode.Visible := IsDeleteGrade;
    btn_Delete.Enabled := IsDeleteGrade;
  end else
  begin
    pmAddCode.Visible := IsInsertGrade;
    btn_Add.Enabled := IsInsertGrade;
    pm_UpdateCode.Visible := False;
    btn_Update.Enabled := False;
    pm_DeleteCode.Visible := False;
    btn_Delete.Enabled := False;
  end;
end;

procedure TfmPosiCode.tv_ListDblClick(Sender: TObject);
begin
  inherited;
  pm_UpdateCodeClick(self);
end;

procedure TfmPosiCode.tv_ListDragDrop(Sender, Source: TObject; X, Y: Integer);
var
  currentItem, dropItem : TTreeNode;
  stOrgCode : string;
  stCompanyCode : string;
  stCode : string;
  stDeepSeq,stViewSeq : string;
  stSql : string;
  stPosiCode:string;
begin
  inherited;
  if Sender = Source then
  begin
    with TTreeView(Sender) do
    begin
      dropItem :=GetNodeAt(X,Y);
      currentItem := Selected;
      if currentItem.AbsoluteIndex = 0 then Exit;   //루트디렉토리가 움직일수는 없다
      stCompanyCode := tv_Code.Items[dropItem.AbsoluteIndex].Text;
      if copy(stCompanyCode,1,1) = 'P' then Exit; //옮기려는 위치가 직위명이면 빠져 나가자
      stOrgCode := tv_Code.Items[currentItem.AbsoluteIndex].Text;
      if copy(stOrgCode,1,1) <> 'P' then Exit;
      stPosiCode := stOrgCode;
      Delete(stPosiCode,1,1); //'P' 삭제
      dmDBUpdate.UpdateTB_POSICODE_Field_StringValue(stPosiCode,'CO_COMPANYCODE',stCompanyCode);
    end;
  end;
  SearchList(stCode);
end;

procedure TfmPosiCode.tv_ListDragOver(Sender, Source: TObject; X, Y: Integer;
  State: TDragState; var Accept: Boolean);
begin
  inherited;
  Accept := Sender = tv_List;
end;

initialization
  RegisterClass(TfmPosiCode);
Finalization
  UnRegisterClass(TfmPosiCode);

end.

unit uArmArea;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, uSubForm, CommandArray, AdvGlassButton,
  Vcl.Grids, AdvObj, BaseGrid, AdvGrid, Vcl.StdCtrls, AdvEdit, AdvSmoothLabel,
  AdvSmoothPanel, AdvOfficeTabSet, W7Classes, W7Panels,ActiveX,ADODB,
  Vcl.ComCtrls, Vcl.Menus, Vcl.ImgList, AdvOfficeTabSetStylers, AdvCombo,
  AdvToolBar, AdvToolBarStylers, AdvGlowButton, AdvOfficePager,
  AdvOfficePagerStylers, AdvAppStyler, Vcl.Imaging.pngimage, Vcl.ExtCtrls;

const
  con_LocalBuildingImageIndex = 1;
  con_LocalArmAreaImageIndex = 8;
  con_LocalSelectArmAreaImageIndex = 9;

type
  TfmArmArea = class(TfmASubForm)
    BodyPanel: TW7Panel;
    List: TAdvSmoothPanel;
    tv_List: TTreeView;
    tv_Code: TTreeView;
    pm_Work: TPopupMenu;
    pm_UpdateCode: TMenuItem;
    Pan_Workcode: TAdvSmoothPanel;
    ed_Name: TAdvEdit;
    ed_SelectCode: TAdvEdit;
    MenuImageList16: TImageList;
    pan_CCTV: TAdvSmoothPanel;
    ed_ArmAreaCode: TAdvEdit;
    cmb_CCTV: TAdvComboBox;
    N1: TMenuItem;
    CCTV1: TMenuItem;
    N2: TMenuItem;
    mn_Crop: TMenuItem;
    mn_Past: TMenuItem;
    pm_Building: TPopupMenu;
    pm_BuildingPast: TMenuItem;
    pan_ArmAreaMangement: TAdvSmoothPanel;
    pan_DoorSearch: TAdvSmoothPanel;
    lb_NodeName: TAdvSmoothLabel;
    cmb_Node: TAdvComboBox;
    sg_ArmArea: TAdvStringGrid;
    tv_buildingCode: TTreeView;
    pan_Building: TAdvSmoothPanel;
    tv_buildingName: TTreeView;
    mn_DeviceInfo: TMenuItem;
    AdvOfficePager1: TAdvOfficePager;
    AdvOfficePage1: TAdvOfficePage;
    btn_minimize: TAdvGlowButton;
    btn_Close: TAdvGlowButton;
    lb_List: TLabel;
    btn_Position: TAdvGlowButton;
    AdvFormStyler1: TAdvFormStyler;
    AdvOfficePagerOfficeStyler1: TAdvOfficePagerOfficeStyler;
    AdvOfficeTabSetOfficeStyler1: TAdvOfficeTabSetOfficeStyler;
    lb_WorkType: TLabel;
    lb_name: TAdvSmoothLabel;
    lb_CCTV: TLabel;
    lb_cctvName: TAdvSmoothLabel;
    btn_Save: TAdvGlowButton;
    btn_Cancel: TAdvGlowButton;
    btn_cctvCancel: TAdvGlowButton;
    btn_cctvApply: TAdvGlowButton;
    lb_DoorSearch: TLabel;
    btn_ArmAreaClose: TAdvGlowButton;
    btn_SelectBuildingPosition: TAdvGlowButton;
    btn_BuildingSelect: TAdvGlowButton;
    btn_BuildingCancel: TAdvGlowButton;
    lb_Building: TLabel;
    AdvGlowButton2: TAdvGlowButton;
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure FormResize(Sender: TObject);
    procedure FormShow(Sender: TObject);
    procedure tv_ListClick(Sender: TObject);
    procedure btn_CancelClick(Sender: TObject);
    procedure pm_UpdateCodeClick(Sender: TObject);
    procedure btn_SaveClick(Sender: TObject);
    procedure ed_NameKeyPress(Sender: TObject; var Key: Char);
    procedure pm_DeleteCodeClick(Sender: TObject);
    procedure tv_ListDragDrop(Sender, Source: TObject; X, Y: Integer);
    procedure tv_ListDragOver(Sender, Source: TObject; X, Y: Integer;
      State: TDragState; var Accept: Boolean);
    procedure tv_ListDblClick(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure CCTV1Click(Sender: TObject);
    procedure mn_CropClick(Sender: TObject);
    procedure mn_PastClick(Sender: TObject);
    procedure btn_PositionClick(Sender: TObject);
    procedure cmb_NodeChange(Sender: TObject);
    procedure btn_ArmAreaCloseClick(Sender: TObject);
    procedure sg_ArmAreaCheckBoxClick(Sender: TObject; ACol, ARow: Integer;
      State: Boolean);
    procedure btn_SelectBuildingPositionClick(Sender: TObject);
    procedure btn_BuildingCancelClick(Sender: TObject);
    procedure btn_BuildingSelectClick(Sender: TObject);
    procedure btn_minimizeClick(Sender: TObject);
    procedure btn_CloseClick(Sender: TObject);
    procedure btn_cctvApplyClick(Sender: TObject);
    procedure btn_cctvCancelClick(Sender: TObject);
  private
    L_stMenuID : string;
    L_stButtonCloseCaption : string;
    L_stWork : string;
    L_stMoveCode : string;
    L_stAllName : string;
    L_nArmAreaCheckCount : integer;
    cmbCCTVCodeList : TStringList;
    NodeCodeList : TStringList;
    procedure FormNameSetting;
    procedure FontSetting;
    procedure SearchList(aCode:string);
    procedure SearchArmAreaNode(aNodeNo:string);
    procedure Load_CCTVCode;
    function GetTB_ARMAREA_CCTVNo(aNodeNo,aEcuID,aExtendID,aArmAreaNo:string):string;
  private
    { Private declarations }
    procedure MoveArmAreaViewSeq(aTargetCode,aOrgCode:string);
    procedure AdvStrinGridSetAllCheck(Sender: TObject;bchkState:Boolean);
  public
    { Public declarations }
    procedure Form_Close;
    procedure FormChangeEvent(aNumber:integer);
    procedure FormGradeRefresh;
    procedure FormIDSetting(aID:string);
  end;

var
  fmArmArea: TfmArmArea;

implementation
uses
  uCommonFunction,
  uCommonVariable,
  uFormFunction,
  uFormVariable,
  uDataBase,
  uDBSelect,
  uDBFormMessage,
  uDBFunction,
  uDBInsert,
  uDBUpdate,
  uFormUtil,
  uComboBoxCodeLoad,
  uMain;
{$R *.dfm}

procedure TfmArmArea.AdvStrinGridSetAllCheck(Sender: TObject;
  bchkState: Boolean);
var
  i : integer;
begin
    for i:= 1 to (Sender as TAdvStringGrid).RowCount - 1  do
    begin
      (Sender as TAdvStringGrid).SetCheckBoxState(0,i,bchkState);
    end;

end;

procedure TfmArmArea.btn_ArmAreaCloseClick(Sender: TObject);
begin
  inherited;
  pan_ArmAreaMangement.Visible := False;
  btn_Position.Enabled := True;
  SearchList('');

end;

procedure TfmArmArea.btn_BuildingCancelClick(Sender: TObject);
begin
  inherited;
  pan_Building.Visible := False;
  sg_ArmArea.Enabled := True;
  cmb_Node.Enabled := True;
  btn_SelectBuildingPosition.Enabled := True;
  btn_ArmAreaClose.Enabled := True;
end;

procedure TfmArmArea.btn_BuildingSelectClick(Sender: TObject);
var
  stMessage : string;
  stBuildingCode : string;
  i : integer;
  bCheckState : Boolean;
begin
  inherited;
  if tv_buildingName.Selected = nil then
  begin
    stMessage := stringReplace(dmFormMessage.GetMessage('NOTSELECTDATA'),'$WORK',btn_BuildingSelect.Caption,[rfReplaceAll]);
    Application.MessageBox(PChar(stMessage),'Information',MB_OK);
    Exit;
  end;
  stBuildingCode := tv_buildingCode.Items.Item[tv_buildingName.Selected.AbsoluteIndex].Text;
  with sg_ArmArea do
  begin
    for i := RowCount - 1 downto 1 do
    begin
      GetCheckBoxState(0,i, bCheckState);
      if bCheckState then
      begin
        dmDBUpdate.UpdateTB_ArmArea_Field_StringValue(Cells[3,i],Cells[4,i],Cells[5,i],Cells[6,i],'BC_BUILDINGCODE',stBuildingCode);
        dmDBUpdate.UpdateTB_ArmArea_Field_StringValue(Cells[3,i],Cells[4,i],Cells[5,i],Cells[6,i],'AR_NAMECHANGE','1');
      end;
    end;
  end;

  pan_Building.Visible := False;
  sg_ArmArea.Enabled := True;
  cmb_Node.Enabled := True;
  btn_SelectBuildingPosition.Enabled := True;
  btn_ArmAreaClose.Enabled := True;
  cmb_NodeChange(self);
end;

procedure TfmArmArea.btn_CancelClick(Sender: TObject);
begin
  inherited;
  Pan_Workcode.Visible := False;
end;

procedure TfmArmArea.btn_cctvApplyClick(Sender: TObject);
var
  stMessage : string;
  stParentCode : string;
  stCode : string;
  stNodeNo,stEcuID,stExtendID,stArmAreaNo: string;
  stTime : string;
  stClientIP : string;
  stCCTVNo : string;
begin
  inherited;
  stCode := ed_SelectCode.Text;
  Delete(stCode,1,1);
  stNodeNo := copy(stCode,1,G_nNodeCodeLength);
  stEcuID := copy(stCode,1 + G_nNodeCodeLength,2);
  stExtendID := copy(stCode,1 + G_nNodeCodeLength + 2,2);
  stExtendID := inttostr(strtoint(stExtendID));
  stArmAreaNo := copy(stCode,1 + G_nNodeCodeLength + 2 + 2,1);
  if cmb_CCTV.ItemIndex > -1 then stCCTVNo := cmbCCTVCodeList.Strings[cmb_CCTV.ItemIndex];
  if Not IsDigit(stCCTVNo) then stCCTVNo := '0';
  dmDBUpdate.UpdateTB_ARMAREA_Field_IntValue(stNodeNo,stEcuID,stExtendID,stArmAreaNo,'CT_NO',stCCTVNo);
  Pan_CCTV.Visible := False;
end;

procedure TfmArmArea.btn_cctvCancelClick(Sender: TObject);
begin
  inherited;
  pan_CCTV.Visible := False;
end;

procedure TfmArmArea.btn_CloseClick(Sender: TObject);
begin
  inherited;
  Close;
end;

procedure TfmArmArea.btn_minimizeClick(Sender: TObject);
begin
  inherited;
  windowState := wsNormal;
end;

procedure TfmArmArea.btn_PositionClick(Sender: TObject);
begin
  inherited;
  pan_ArmAreaMangement.Visible := True;
  pan_ArmAreaMangement.Caption.Text := btn_Position.Caption;
  lb_DoorSearch.Caption := btn_Position.Caption;
  LoadNode(NodeCodeList,TComboBox(cmb_Node),True,L_stAllName);
  cmb_NodeChange(self);
  btn_Position.Enabled := False;
end;

procedure TfmArmArea.btn_SaveClick(Sender: TObject);
var
  stMessage : string;
  stParentCode : string;
  stCode : string;
  stNodeNo,stEcuID,stExtendID,stArmAreaNo: string;
  stTime : string;
  stClientIP : string;
begin
  inherited;
  stClientIP:= GetLocalIPAddr;
  stTime := FormatDateTime('yyyymmddhhnnsszzz',now);
  if Trim(ed_Name.Text) = '' then
  begin
    stMessage := dmFormMessage.GetMessage('BLANKFIELD');
    stMessage := StringReplace(stMessage,'$WORK',lb_Name.Caption.Text,[rfReplaceAll]);
    showmessage(stMessage);
    Exit;
  end;
  if L_stWork = 'SELECTCODEUPDATE' then
  begin
    stCode := ed_SelectCode.Text;
    Delete(stCode,1,1);
    stNodeNo := copy(stCode,1,G_nNodeCodeLength);
    stEcuID := copy(stCode,1 + G_nNodeCodeLength,2);
    stExtendID := copy(stCode,1 + G_nNodeCodeLength + 2,2);
    stExtendID := inttostr(strtoint(stExtendID));
    stArmAreaNo := copy(stCode,1 + G_nNodeCodeLength + 2 + 2,1);
    dmDBUpdate.UpdateTB_ArmArea_Field_StringValue(stNodeNo,stEcuID,stExtendID,stArmAreaNo,'AR_ARMAREANAME',ed_Name.Text);
    dmDBUpdate.UpdateTB_ArmArea_Field_StringValue(stNodeNo,stEcuID,stExtendID,stArmAreaNo,'AR_NAMECHANGE','1');
    dmDBInsert.InsertIntoTB_SYSTEMLOG_All(copy(stTime,1,8),copy(stTime,9,6),stClientIP,G_stAdminUserID,stNodeNo, stEcuID, '', stArmAreaNo, con_ComLogTYPE_ARMAREA, L_stMenuID + '(' + Caption + '): Change');
    tv_List.Items.Item[tv_List.Selected.AbsoluteIndex].Text := ed_Name.Text;
    tv_List.SetFocus;
    fmMain.FORMCHANGE(con_FormBMOSARMAREACODE,'');
    //SearchList(ed_SelectCode.Text);
  end;


  Pan_Workcode.Visible := False;
end;

procedure TfmArmArea.btn_SelectBuildingPositionClick(Sender: TObject);
var
  stMessage : string;
begin
  inherited;
  if L_nArmAreaCheckCount < 1 then
  begin
    stMessage := stringReplace(dmFormMessage.GetMessage('NOTSELECTDATA'),'$WORK',btn_SelectBuildingPosition.Caption,[rfReplaceAll]);
    Application.MessageBox(PChar(stMessage),'Information',MB_OK);
    Exit;
  end;
  pan_Building.Visible := True;
  lb_Building.Caption := btn_SelectBuildingPosition.Caption;
  sg_ArmArea.Enabled := False;
  cmb_Node.Enabled := False;
  btn_SelectBuildingPosition.Enabled := False;
  btn_ArmAreaClose.Enabled := False;
  LoadBuildingTreeView('',tv_buildingName,tv_buildingCode,con_LocalBuildingImageIndex);
end;

procedure TfmArmArea.CCTV1Click(Sender: TObject);
var
  stCCTVNo : string;
  stSelectArmArea : string;
  stMessage : string;
  stNodeNo : string;
  stEcuID : string;
  stExtendID : string;
  stArmAreaNo : string;
  nIndex : integer;
begin
  inherited;
  pan_CCTV.Visible := True;
  if tv_List.Selected = nil then
  begin
    stMessage := dmFormMessage.GetMessage('SELECTERROR');
    stMessage := stringReplace(stMessage,'$WORK',pm_UpdateCode.Caption,[rfReplaceAll]);
    showmessage(stMessage);
    Exit;
  end;
  stSelectArmArea := tv_Code.Items.Item[tv_List.Selected.AbsoluteIndex].Text;
  ed_SelectCode.Text := stSelectArmArea;
  if copy(stSelectArmArea,1,1) <> 'A' then Exit;
  Delete(stSelectArmArea,1,1);
  stNodeNo := copy(stSelectArmArea,1,G_nNodeCodeLength);
  stEcuID := copy(stSelectArmArea,1 + G_nNodeCodeLength,2);
  stExtendID := copy(stSelectArmArea,1 + G_nNodeCodeLength + 2,2);
  stExtendID := inttostr(strtoint(stExtendID));
  stArmAreaNo := copy(stSelectArmArea,1 + G_nNodeCodeLength + 2 + 2,1);
  stCCTVNo := GetTB_ARMAREA_CCTVNo(stNodeNo,stEcuID,stExtendID,stArmAreaNo);
  if Not isDigit(stCCTVNo) then stCCTVNo := '0';
  stCCTVNo := FillZeroNumber(strtoint(stCCTVNo),G_nNodeCodeLength);
  nIndex := cmbCCTVCodeList.IndexOf(stCCTVNo);

  cmb_CCTV.ItemIndex := nIndex;
end;

procedure TfmArmArea.cmb_NodeChange(Sender: TObject);
var
  stNodeNo : string;
begin
  inherited;
  stNodeNo := '';
  if cmb_Node.ItemIndex > 0 then stNodeNo := NodeCodeList.Strings[cmb_Node.ItemIndex];
  SearchArmAreaNode(stNodeNo);

end;

procedure TfmArmArea.ed_NameKeyPress(Sender: TObject; var Key: Char);
begin
  inherited;
  if Key = #13 then
  begin
    Key := #0;
    btn_SaveClick(self);
  end;
end;

procedure TfmArmArea.FontSetting;
begin
(*  dmFormUtil.TravelFormFontSetting(self,G_stFontName,inttostr(G_nFontSize));
  dmFormUtil.TravelAdvOfficeTabSetOfficeStylerFontSetting(AdvOfficeTabSetOfficeStyler1, G_stFontName,inttostr(G_nFontSize));
  dmFormUtil.FormAdvOfficeTabSetOfficeStylerSetting(AdvOfficeTabSetOfficeStyler1,G_stFormStyle);
  dmFormUtil.FormAdvToolBarOfficeStylerSetting(AdvToolBarOfficeStyler1,G_stFormStyle);
  dmFormUtil.FormStyleSetting(self,AdvToolBarOfficeStyler1);
  *)
end;

procedure TfmArmArea.FormChangeEvent(aNumber: integer);
begin

end;

procedure TfmArmArea.FormClose(Sender: TObject; var Action: TCloseAction);
begin
  inherited;
  cmbCCTVCodeList.Free;
  NodeCodeList.Free;

  fmMain.FORMENABLE(con_FormBMOSARMAREACODE,'FALSE');

  Action := caFree;
end;

procedure TfmArmArea.FormCreate(Sender: TObject);
begin
  inherited;
  if G_nFormLanguageType = 1 then
  begin
    ed_name.ImeMode := imSHanguel;//imHanguel;
    ed_name.ImeName := '';
  end else if G_nFormLanguageType = 2 then
  begin
    ed_name.ImeMode := imAlpha;
    ed_name.ImeName := '';
  end;

  tv_Code.Left := -400;

  cmbCCTVCodeList := TStringList.Create;
  NodeCodeList := TStringList.Create;

  FontSetting;
end;

procedure TfmArmArea.FormGradeRefresh;
begin
  if IsInsertGrade or IsUpdateGrade or IsDeleteGrade then PopupMenu := pm_Work;
//  pm_DeleteCode.Enabled := IsDeleteGrade;
  pm_UpdateCode.Enabled := IsUpdateGrade;

end;

procedure TfmArmArea.FormIDSetting(aID: string);
begin
  L_stMenuID := aID;
end;

procedure TfmArmArea.FormNameSetting;
begin
  AdvOfficePage1.Caption := dmFormFunction.GetFormName('0','2','BUTTONMENU002');
  L_stButtonCloseCaption := dmFormFunction.GetFormName('0','2','BUTTONMENU001');
  lb_List.Caption := dmFormFunction.GetFormName('2','1','BM2_022List');//dmFormFunction.GetFormName('0','2','COMMONLIST01');
  btn_Position.Caption := dmFormFunction.GetFormName('2','2','BM2_022btn001');
  pm_UpdateCode.Caption := dmFormFunction.GetFormName('0','2','BUTTONUPDATE001');
  btn_Save.Caption := dmFormFunction.GetFormName('0','2','BUTTONSAVE001');
  btn_Cancel.Caption := dmFormFunction.GetFormName('0','2','BUTTONCANCEL001');
  lb_Name.Caption.Text := dmFormFunction.GetFormName('0','2','COMMONARMAREANAME');
  L_stAllName := dmFormFunction.GetFormName('0','2','COMMONALLNAME');
  lb_NodeName.Caption.Text := dmFormFunction.GetFormName('0','2','COMMONNODENAME01');
  with sg_ArmArea do
  begin
    cells[1,0] := dmFormFunction.GetFormName('0','2','COMMONARMAREANAME');
    cells[2,0] := dmFormFunction.GetFormName('0','2','COMMONBUILDINGNAME');
  end;
  btn_SelectBuildingPosition.Caption := dmFormFunction.GetFormName('2','2','BM2_022_01');
  lb_Building.Caption := dmFormFunction.GetFormName('0','2','COMMONSELECTBUILDING');
  lb_CCTV.Caption := dmFormFunction.GetFormName('0','2','COMMONCCTV');
  lb_cctvName.Caption.Text := dmFormFunction.GetFormName('0','2','COMMONCCTV');
  btn_cctvApply.Caption := dmFormFunction.GetFormName('0','2','BUTTONAPPLY');
  btn_cctvCancel.Caption := dmFormFunction.GetFormName('0','2','BUTTONCANCEL001');
  btn_BuildingCancel.Caption := dmFormFunction.GetFormName('0','2','BUTTONCANCEL001');
  btn_BuildingSelect.Caption := dmFormFunction.GetFormName('0','2','BUTTONAPPLY');

  mn_Crop.Caption := dmFormFunction.GetFormName('0','2','COMCUT');
  mn_Past.Caption := dmFormFunction.GetFormName('0','2','COMPASTE');
  pm_BuildingPast.Caption := dmFormFunction.GetFormName('0','2','COMPASTE');
  CCTV1.Caption := dmFormFunction.GetFormName('1','1','BM2_03');
end;

procedure TfmArmArea.FormResize(Sender: TObject);
begin
  inherited;
  tv_List.Height := Height - tv_List.Top - 30;

  btn_Close.Left := AdvOfficePager1.Width - btn_Close.Width - 10;
  btn_minimize.Left := btn_Close.Left - btn_minimize.Width - 2;

  tv_List.Height := List.Height - tv_List.Top - 30;
  tv_List.Width := List.Width - (tv_List.Left * 2);

  Pan_Workcode.Left := (Width div 2) - (Pan_Workcode.Width div 2);
  Pan_Workcode.top := (Height div 2) - (Pan_Workcode.Height div 2);

  pan_CCTV.Left := (Width div 2) - (pan_CCTV.Width div 2);
  pan_CCTV.top := (Height div 2) - (pan_CCTV.Height div 2);

  pan_ArmAreaMangement.Left := (Width div 2) - (pan_ArmAreaMangement.Width div 2);
  pan_ArmAreaMangement.top := (Height div 2) - (pan_ArmAreaMangement.Height div 2) - 30;

  if Windowstate = wsMaximized then
  begin
    //btn_minimize.Visible := True;
    btn_Close.Visible := True;
  end else
  begin
    btn_minimize.Visible := False;
    btn_Close.Visible := False;
  end;
end;

procedure TfmArmArea.FormShow(Sender: TObject);
begin
  inherited;
  WindowState := wsMaximized;

  FormNameSetting;
  fmMain.FORMENABLE(con_FormBMOSARMAREACODE,'TRUE');

  SearchList('');
  Load_CCTVCode;
end;

procedure TfmArmArea.Form_Close;
begin
  Close;
end;

function TfmArmArea.GetTB_ARMAREA_CCTVNo(aNodeNo, aEcuID, aExtendID,
  aArmAreaNo: string): string;
var
  stSql : string;
  TempAdoQuery : TADOQuery;
begin
  result := '0';
  stSql := ' Select * from TB_ARMAREA ';
  stSql := stSql + ' where GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND ND_NODENO = ' + aNodeNo + '';
  stSql := stSql + ' AND DE_ECUID = ''' + aEcuID + '''';
  stSql := stSql + ' AND DE_EXTENDID = ' + aExtendID + '';
  stSql := stSql + ' AND AR_ARMAREANO = ' + aArmAreaNo + '';

  Try
    CoInitialize(nil);
    TempAdoQuery := TADOQuery.Create(nil);
    TempAdoQuery.Connection := dmDataBase.ADOConnection;
    TempAdoQuery.DisableControls;

    with TempAdoQuery do
    begin
      Close;
      sql.Text := stSql;
      Try
        Open;
      Except
        dmDataBase.DBConnected := False;
        Exit;
      End;
      if recordcount < 1 then Exit;
      if Not FindField('CT_NO').IsNull then
        result := FindField('CT_NO').AsString;
    end;
  Finally
    TempAdoQuery.EnableControls;
    TempAdoQuery.Free;
    CoUninitialize;
  End;
end;

procedure TfmArmArea.Load_CCTVCode;
var
  stSql : string;
  TempAdoQuery : TADOQuery;
  stCCTVCode : string;
begin

  cmb_CCTV.Text := '';
  ed_ArmAreaCode.Text := '';

  cmb_CCTV.Items.Clear;
  cmb_CCTV.ItemIndex := -1;
  cmbCCTVCodeList.Clear;
  cmb_CCTV.Items.Add('');
  cmbCCTVCodeList.Add('0');

  stSql := dmDBSelect.SelectTB_CCTV_All;

  Try
    CoInitialize(nil);
    TempAdoQuery := TADOQuery.Create(nil);
    TempAdoQuery.Connection := dmDataBase.ADOConnection;
    TempAdoQuery.DisableControls;

    with TempAdoQuery do
    begin
      Close;
      sql.Text := stSql;
      Try
        Open;
      Except
        dmDataBase.DBConnected := False;
        Exit;
      End;
      if recordcount < 1 then Exit;
      while Not Eof do
      begin
        stCCTVCode := FillZeroNumber(FindField('CT_NO').AsInteger,G_nNodeCodeLength);
        cmbCCTVCodeList.Add(stCCTVCode);
        cmb_CCTV.Items.Add(FindField('CT_NAME').AsString);
        Next;
      end;
      if cmb_CCTV.Items.Count > 0 then
      begin
        cmb_CCTV.ItemIndex := 0;
      end;
    end;
  Finally
    TempAdoQuery.EnableControls;
    TempAdoQuery.Free;
    CoUninitialize;
  End;
end;

procedure TfmArmArea.mn_CropClick(Sender: TObject);
var
  stMessage : string;
begin
  inherited;
  if tv_List.Selected = nil then
  begin
    stMessage := dmFormMessage.GetMessage('SELECTERROR');
    stMessage := stringReplace(stMessage,'$WORK',mn_Crop.Caption,[rfReplaceAll]);
    showmessage(stMessage);
    Exit;
  end;
  L_stMoveCode := tv_Code.Items.Item[tv_List.Selected.AbsoluteIndex].Text;
  if copy(L_stMoveCode,1,1) <> 'A' then
  begin
    L_stMoveCode := '';
    Exit;
  end;
  tv_List.Selected.ImageIndex := con_LocalSelectArmAreaImageIndex;
  mn_Crop.Visible := False;
  mn_Past.Visible := True;
end;

procedure TfmArmArea.mn_PastClick(Sender: TObject);
var
  stBuildingCode : string;
  stSql : string;
  stNodeNo,stEcuID,stExtendID,stArmAreaNo:string;
  stMessage : string;
begin
  inherited;
  if tv_List.Selected = nil then
  begin
    stMessage := dmFormMessage.GetMessage('SELECTERROR');
    stMessage := stringReplace(stMessage,'$WORK',mn_Past.Caption,[rfReplaceAll]);
    showmessage(stMessage);
    Exit;
  end;
  stBuildingCode := tv_Code.Items.Item[tv_List.Selected.AbsoluteIndex].Text;
  if copy(stBuildingCode,1,1) = 'A' then //옮기려는 위치가 출입문이면 조회순서 변경 후 빠져 나가자
  begin
    if copy(L_stMoveCode,1,1) <> 'A' then Exit; //대상이 출입문이 아니면 빠져 나가자.
    MoveArmAreaViewSeq(stBuildingCode,L_stMoveCode);
    SearchList(L_stMoveCode);
    Exit;
  end;
  if copy(L_stMoveCode,1,1) <> 'A' then Exit;
  stNodeNo := copy(L_stMoveCode,2,G_nNodeCodeLength);
  stEcuID := copy(L_stMoveCode,2 + G_nNodeCodeLength,2);
  stExtendID := copy(L_stMoveCode,2 + G_nNodeCodeLength + 2,2);
  stExtendID := inttostr(strtoint(stExtendID));
  stArmAreaNo := copy(L_stMoveCode,2 + G_nNodeCodeLength + 2 + 2,1);
  dmDBUpdate.UpdateTB_ArmArea_Field_StringValue(stNodeNo,stEcuID,stExtendID,stArmAreaNo,'BC_BUILDINGCODE',stBuildingCode);
  dmDBUpdate.UpdateTB_ArmArea_Field_StringValue(stNodeNo,stEcuID,stExtendID,stArmAreaNo,'AR_NAMECHANGE','1');
  SearchList(L_stMoveCode);
end;

procedure TfmArmArea.MoveArmAreaViewSeq(aTargetCode, aOrgCode: string);
var
  stTargetNodeNo : string;
  stTargetEcuID : string;
  stTargetExtendID : string;
  stTargetArmAreaNo : string;
  stNodeNo : string;
  stEcuID : string;
  stExtendID : string;
  stArmAreaNo : string;
  stBuildingCode : string;
  stViewSeq : string;
begin
  stTargetNodeNo := copy(aTargetCode,2,G_nNodeCodeLength);
  stTargetEcuID := copy(aTargetCode,2 + G_nNodeCodeLength,2);
  stTargetExtendID := copy(aTargetCode,2 + G_nNodeCodeLength + 2,2);
  stTargetExtendID := inttostr(strtoint(stTargetExtendID));
  stTargetArmAreaNo := copy(aTargetCode,2 + G_nNodeCodeLength + 2 + 2,1);

  stBuildingCode := dmDBFunction.GetTB_ARMAREA_BuildingCode(stTargetNodeNo,stTargetEcuID,stTargetArmAreaNo);

  stNodeNo := copy(aOrgCode,2,G_nNodeCodeLength);
  stEcuID := copy(aOrgCode,2 + G_nNodeCodeLength,2);
  stExtendID := copy(aOrgCode,2 + G_nNodeCodeLength + 2,2);
  stExtendID := inttostr(strtoint(stExtendID));
  stArmAreaNo := copy(aOrgCode,2 + G_nNodeCodeLength + 2 + 2,1);
  dmDBUpdate.UpdateTB_ArmArea_Field_StringValue(stNodeNo,stEcuID,stExtendID,stArmAreaNo,'BC_BUILDINGCODE',stBuildingCode);
  dmDBUpdate.UpdateTB_ArmArea_Field_StringValue(stNodeNo,stEcuID,stExtendID,stArmAreaNo,'AR_NAMECHANGE','1');


  stViewSeq := dmDBFunction.GetTB_ARMAREA_ViewSeq(stTargetNodeNo,stTargetEcuID,stTargetArmAreaNo);
  dmDBUpdate.UpdateTB_ARMAREA_ViewSeqInc(stViewSeq);   //현재 조회순서에서 증가 시킴
  dmDBUpdate.UpdateTB_ArmArea_Field_StringValue(stNodeNo,stEcuID,stExtendID,stArmAreaNo,'AR_VIEWSEQ',stViewSeq); //빌딩코드 변경처리

end;

procedure TfmArmArea.pm_DeleteCodeClick(Sender: TObject);
var
  stMessage : string;
  stCode : string;
  stSql : string;
  stNodeNo : string;
  stEcuID : string;
  stExtendID : string;
  stArmAreaNo : string;
  stTime : string;
  stClientIP : string;
begin
  inherited;
  stClientIP:= GetLocalIPAddr;
  stTime := FormatDateTime('yyyymmddhhnnsszzz',now);
  if tv_List.Selected = nil then
  begin
    stMessage := dmFormMessage.GetMessage('SELECTERROR');
//    stMessage := stringReplace(stMessage,'$WORK',pm_DeleteCode.Caption,[rfReplaceAll]);
    showmessage(stMessage);
    Exit;
  end;
//  stMessage := stringReplace(dmFormMessage.GetMessage('WORKMESSAGE'),'$WORK',pm_DeleteCode.Caption,[rfReplaceAll]);
  if (Application.MessageBox(PChar(stMessage),'Information',MB_OKCANCEL) = IDCANCEL)  then Exit;
  stCode := tv_Code.Items.Item[tv_List.Selected.AbsoluteIndex].Text;
  stNodeNo := copy(stCode,2,G_nNodeCodeLength);
  stEcuID := copy(stCode,2 + G_nNodeCodeLength,2);
  stExtendID := copy(stCode,2 + G_nNodeCodeLength + 2,2);
  stArmAreaNo := copy(stCode,2 + G_nNodeCodeLength + 2 + 2,1);
  dmDBUpdate.UpdateTB_ARMAREA_Field_StringValue(stNodeNo,stEcuID,stExtendID,stArmAreaNo,'AR_ARMAREAUSE','0');
  dmDBInsert.InsertIntoTB_SYSTEMLOG_All(copy(stTime,1,8),copy(stTime,9,6),stClientIP,G_stAdminUserID,stNodeNo, stEcuID, '', stArmAreaNo, con_ComLogTYPE_ARMAREA, L_stMenuID + '(' + Caption + '): Delete');
//  dmDBUpdate.UpdateTB_COMPANYCODE_Field_StringValue(stCode,'CO_CODEUSE','0');
  SearchList(stCode);
end;

procedure TfmArmArea.pm_UpdateCodeClick(Sender: TObject);
var
  stMessage : string;
begin
  inherited;
  if tv_List.Selected = nil then
  begin
    stMessage := dmFormMessage.GetMessage('SELECTERROR');
    stMessage := stringReplace(stMessage,'$WORK',pm_UpdateCode.Caption,[rfReplaceAll]);
    showmessage(stMessage);
    Exit;
  end;
  ed_SelectCode.Text := tv_Code.Items.Item[tv_List.Selected.AbsoluteIndex].Text;
  if copy(ed_SelectCode.Text,1,1) <> 'A' then Exit;

  Pan_Workcode.Visible := True;
  //Pan_Workcode.Caption.Text := pm_UpdateCode.Caption;
  lb_WorkType.Caption := pm_UpdateCode.Caption;
  ed_Name.Text := tv_List.Items.Item[tv_List.Selected.AbsoluteIndex].Text;
  L_stWork := 'SELECTCODEUPDATE';
  ed_Name.SetFocus;
end;

procedure TfmArmArea.SearchArmAreaNode(aNodeNo: string);
var
  stSql : string;
  TempAdoQuery : TADOQuery;
  nRow : integer;
begin
  GridInit(sg_ArmArea,3,2,true);
  stSql := ' Select a.*,c.BC_BUILDINGNAME from TB_ARMAREA a ';
  stSql := stSql + ' Inner Join TB_DEVICE b ';
  stSql := stSql + ' ON(a.GROUP_CODE = b.GROUP_CODE ';   //컨트롤러 사용중인거에서
  stSql := stSql + ' AND a.ND_NODENO = b.ND_NODENO ';
  stSql := stSql + ' AND a.DE_ECUID = b.DE_ECUID ';
  stSql := stSql + ' AND a.DE_EXTENDID = b.DE_EXTENDID ';
  stSql := stSql + ' AND b.DE_DEVICEUSE = ''1'') ';
  stSql := stSql + ' Left Join TB_BUILDINGCODE c ';
  stSql := stSql + ' ON(a.GROUP_CODE = c.GROUP_CODE ';
  stSql := stSql + ' AND a.BC_BUILDINGCODE = c.BC_BUILDINGCODE ) ';
  stSql := stSql + ' Where a.GROUP_CODE = ''' + G_stGroupCode + ''' ';
  if isDigit(aNodeNo) then stSql := stSql + ' AND a.ND_NODENO = ' + aNodeNo + ' ';
  stSql := stSql + ' AND a.AR_ARMAREAUSE = ''1'' ';
  stSql := stSql + ' AND a.AR_VIEW = ''1'' ';
  stSql := stSql + ' Order by a.AR_VIEWSEQ ';
  Try
    CoInitialize(nil);
    TempAdoQuery := TADOQuery.Create(nil);
    TempAdoQuery.Connection := dmDataBase.ADOConnection;

    with TempAdoQuery do
    begin
      Close;
      sql.Text := stSql;
      Try
        Open;
      Except
        dmDataBase.DBConnected := False;
        Exit;
      End;
      if recordcount < 1 then Exit;
      with sg_ArmArea do
      begin
        nRow := 1;
        RowCount := RecordCount + 1;
        while Not Eof do
        begin
          AddCheckBox(0,nRow,False,False);
          cells[1,nRow] := FindField('AR_ARMAREANAME').AsString;
          cells[2,nRow] := FindField('BC_BUILDINGNAME').AsString;
          cells[3,nRow] := FindField('ND_NODENO').AsString;
          cells[4,nRow] := FindField('DE_ECUID').AsString;
          cells[5,nRow] := FindField('DE_EXTENDID').AsString;
          cells[6,nRow] := FindField('AR_ARMAREANO').AsString;

          nRow := nRow + 1;
          Next;
        end;
      end;
    end;
  Finally
    TempAdoQuery.Free;
    CoUninitialize;
  End;
end;

procedure TfmArmArea.SearchList(aCode: string);
var
  aTreeView : TTreeview;
  vTreeView : TTreeview;
  aNode,bNode,cNode,dNode : TTreeNode;
  vNode1,vNode2,vNode3 : TTreeNode;
  stSql : string;
  TempAdoQuery : TADOQuery;
  stParentCode : string;
  nDeepSeq : integer;
  stArmAreaAllCode : string;
begin
  L_stMoveCode := '';
  mn_Crop.Visible := True;
  mn_Past.Visible := False;
  popupmenu := nil;

  aTreeView := tv_List;
  aTreeView.ReadOnly:= True;
  aTreeView.Items.Clear;
  vTreeView := tv_Code;
  vTreeView.ReadOnly := True;
  vTreeView.Items.Clear;

  stSql := ' Select * from TB_BUILDINGCODE ';
  stSql := stSql + ' Where GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND BC_CODEUSE = ''1'' ';
  stSql := stSql + ' Order by BC_DEEPSEQ,BC_VIEWSEQ ';
  Try
    CoInitialize(nil);
    TempAdoQuery := TADOQuery.Create(nil);
    TempAdoQuery.Connection := dmDataBase.ADOConnection;
    TempAdoQuery.DisableControls;

    with TempAdoQuery do
    begin
      Close;
      sql.Text := stSql;
      Try
        Open;
      Except
        dmDataBase.DBConnected := False;
        Exit;
      End;
      if RecordCount < 1 then Exit;
      First;
      While Not Eof do
      begin
        if FindField('BC_DEEPSEQ').AsInteger = 0 then
        begin
          aNode := aTreeView.Items.Add(nil,FindField('BC_BUILDINGNAME').AsString);
          vTreeView.Items.AddChild(nil,FindField('BC_BUILDINGCODE').AsString);
          aNode.Expanded := True;
        end else
        begin
          nDeepSeq := FindField('BC_DEEPSEQ').AsInteger;
          stParentCode := copy(FindField('BC_BUILDINGCODE').AsString,1,1 + ((nDeepSeq - 1) * G_nBuildingCodeLength) );
          vNode1:= GetNodeByText(vTreeView,stParentCode,True);
          if vNode1 <> nil then
          begin
            bNode := aTreeView.Items.Item[vNode1.AbsoluteIndex];
            if bNode <> nil then
            begin
              cNode:= aTreeView.Items.AddChild(bNode,FindField('BC_BUILDINGNAME').AsString);
              cNode.ImageIndex := con_LocalBuildingImageIndex;
              cNode.SelectedIndex := con_LocalBuildingImageIndex;
            end;
            vNode2:= vTreeView.Items.Item[vNode1.AbsoluteIndex];
            if vNode2 <> nil then
            begin
              vNode3:= vTreeView.Items.AddChild(vNode2,FindField('BC_BUILDINGCODE').AsString);
            end;
            bNode.Expanded := True;
            vNode1.Expanded := True;
          end;
        end;
        Next;
      end;
      stSql := ' Select a.* from TB_ARMAREA a ';
      stSql := stSql + ' Inner Join TB_DEVICE b ';
      stSql := stSql + ' ON(a.GROUP_CODE = b.GROUP_CODE ';   //컨트롤러 사용중인거에서
      stSql := stSql + ' AND a.ND_NODENO = b.ND_NODENO ';
      stSql := stSql + ' AND a.DE_ECUID = b.DE_ECUID ';
      stSql := stSql + ' AND a.DE_EXTENDID = b.DE_EXTENDID ';
      stSql := stSql + ' AND b.DE_DEVICEUSE = ''1'') ';
      stSql := stSql + ' Where a.GROUP_CODE = ''' + G_stGroupCode + ''' ';
      stSql := stSql + ' AND a.AR_ARMAREAUSE = ''1'' ';
      stSql := stSql + ' AND a.AR_VIEW = ''1'' ';
      stSql := stSql + ' Order by a.AR_VIEWSEQ ';

      Close;
      sql.Text := stSql;
      Try
        Open;
      Except
        Exit;
      End;
      if RecordCount < 1 then Exit;
      While Not Eof do
      begin
        stParentCode := FindField('BC_BUILDINGCODE').AsString;
        if Trim(stParentCode) = '' then stParentCode := '0';
        vNode1:= GetNodeByText(vTreeView,stParentCode,True);
        if vNode1 <> nil then
        begin
          bNode := aTreeView.Items.Item[vNode1.AbsoluteIndex];
          if bNode <> nil then
          begin
            cNode:= aTreeView.Items.AddChild(bNode,FindField('AR_ARMAREANAME').AsString);
            cNode.ImageIndex := con_LocalArmAreaImageIndex;
            cNode.SelectedIndex := con_LocalArmAreaImageIndex;
          end;
          vNode2:= vTreeView.Items.Item[vNode1.AbsoluteIndex];
          if vNode2 <> nil then
          begin
            stArmAreaAllCode := 'A' + FillZeroNumber(FindField('ND_NODENO').AsInteger,G_nNodeCodeLength) + FindField('DE_ECUID').AsString  + FillZeroNumber(FindField('DE_EXTENDID').AsInteger,2) + FindField('AR_ARMAREANO').AsString;
            vNode3:= vTreeView.Items.AddChild(vNode2,stArmAreaAllCode);
          end;
          bNode.Expanded := True;
          vNode1.Expanded := True;
          if aCode = stArmAreaAllCode  then
          begin
            if cNode <> nil then cNode.Selected := True;
          end;
        end;
        Next;
      end;

    end;
  Finally
    TempAdoQuery.EnableControls;
    TempAdoQuery.Free;
    CoUninitialize;
  End;
  tv_List.SetFocus;
end;

procedure TfmArmArea.sg_ArmAreaCheckBoxClick(Sender: TObject; ACol,
  ARow: Integer; State: Boolean);
begin
  inherited;
  if ARow = 0 then //전체선택 또는 해제
  begin
    if State then L_nArmAreaCheckCount := (Sender as TAdvStringGrid).RowCount - 1
    else L_nArmAreaCheckCount := 0;
    AdvStrinGridSetAllCheck(Sender,State);
  end else
  begin
    if State then L_nArmAreaCheckCount := L_nArmAreaCheckCount + 1
    else L_nArmAreaCheckCount := L_nArmAreaCheckCount - 1 ;
  end;

end;

procedure TfmArmArea.tv_ListClick(Sender: TObject);
var
  stCode : string;
  stNodeName : string;
  stNodeNo : string;
  stEcuID : string;
  stArmAreaNo : string;
begin
  inherited;
  if tv_List.Selected = nil then Exit;

  stCode := tv_Code.Items.Item[tv_List.Selected.AbsoluteIndex].Text;

  if copy(stCode,1,1) = 'A' then
  begin
    popupmenu := pm_Work;
    stNodeNo := copy(stCode,2,G_nNodeCodeLength);
    stEcuID := copy(stCode,2 + G_nNodeCodeLength,2);
    stArmAreaNo := copy(stCode,2 + G_nNodeCodeLength + 2 + 2,1);
    stNodeName := dmDBFunction.GetTB_NODE_NodeIP(stNodeNo);
    mn_DeviceInfo.Caption := stNodeName + ':' + stEcuID + '-' + stArmAreaNo;
  end else
  begin
    if L_stMoveCode = '' then popupmenu := nil
    else popupmenu := pm_Building;
  end;
end;

procedure TfmArmArea.tv_ListDblClick(Sender: TObject);
begin
  inherited;
  pm_UpdateCodeClick(self);
end;

procedure TfmArmArea.tv_ListDragDrop(Sender, Source: TObject; X, Y: Integer);
var
  currentItem, dropItem : TTreeNode;
  stOrgCode : string;
  stBuildingCode : string;
  stDeepSeq,stViewSeq : string;
  stSql : string;
  stNodeNo,stEcuID,stExtendID,stArmAreaNo:string;
begin
  inherited;
  if Sender = Source then
  begin
    with TTreeView(Sender) do
    begin
      dropItem :=GetNodeAt(X,Y);
      currentItem := Selected;
      if currentItem.AbsoluteIndex = 0 then Exit;   //루트디렉토리가 움직일수는 없다
      stBuildingCode := tv_Code.Items[dropItem.AbsoluteIndex].Text;
      stOrgCode := tv_Code.Items[currentItem.AbsoluteIndex].Text;
      if copy(stBuildingCode,1,1) = 'A' then //옮기려는 위치가 방범구역이면 조회순서 변경 후 빠져 나가자
      begin
        if copy(stOrgCode,1,1) <> 'A' then Exit; //대상이 방범구역이 아니면 빠져 나가자.
        MoveArmAreaViewSeq(stBuildingCode,stOrgCode);
        SearchList(stOrgCode);
        Exit;
      end;
      if copy(stOrgCode,1,1) <> 'A' then Exit;
      stNodeNo := copy(stOrgCode,2,G_nNodeCodeLength);
      stEcuID := copy(stOrgCode,2 + G_nNodeCodeLength,2);
      stExtendID := copy(stOrgCode,2 + G_nNodeCodeLength + 2,2);
      stExtendID := inttostr(strtoint(stExtendID));
      stArmAreaNo := copy(stOrgCode,2 + G_nNodeCodeLength + 2 + 2,1);
      dmDBUpdate.UpdateTB_ArmArea_Field_StringValue(stNodeNo,stEcuID,stExtendID,stArmAreaNo,'BC_BUILDINGCODE',stBuildingCode);
    end;
  end;
  SearchList(stOrgCode);
end;

procedure TfmArmArea.tv_ListDragOver(Sender, Source: TObject; X, Y: Integer;
  State: TDragState; var Accept: Boolean);
begin
  inherited;
  Accept := Sender = tv_List;
end;

initialization
  RegisterClass(TfmArmArea);
Finalization
  UnRegisterClass(TfmArmArea);

end.

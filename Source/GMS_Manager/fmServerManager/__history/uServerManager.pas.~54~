unit uServerManager;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs,uSubForm, AdvOfficeTabSet,
  AdvOfficeTabSetStylers, CommandArray, Vcl.Grids, AdvObj, BaseGrid, AdvGrid,
  Vcl.StdCtrls, AdvEdit, Vcl.Buttons, AdvSmoothLabel, AdvSmoothPanel, W7Classes,
  W7Panels, AdvGlassButton,ADODB,ActiveX, frmshape, Vcl.Mask, AdvSpin,
  DBAdvSmoothLabel, AdvSmoothProgressBar, Vcl.ExtCtrls, AdvCombo, AdvGlowButton,
  AdvOfficePager, Vcl.Imaging.pngimage, Vcl.Menus, AdvOfficePagerStylers,
  AdvAppStyler;

type
  TfmServerManager = class(TfmASubForm)
    TimerProgress: TTimer;
    AdvOfficePager1: TAdvOfficePager;
    AdvOfficePage1: TAdvOfficePage;
    btn_minimize: TAdvGlowButton;
    btn_Close: TAdvGlowButton;
    pm_Work: TPopupMenu;
    pm_CodeAdd: TMenuItem;
    pm_UpdateCode: TMenuItem;
    pm_DeleteCode: TMenuItem;
    AdvFormStyler1: TAdvFormStyler;
    AdvOfficePagerOfficeStyler1: TAdvOfficePagerOfficeStyler;
    AdvOfficeTabSetOfficeStyler1: TAdvOfficeTabSetOfficeStyler;
    BodyPanel: TAdvSmoothPanel;
    lb_SearchName: TAdvSmoothLabel;
    lb_List: TLabel;
    ed_SearchName: TAdvEdit;
    sg_List: TAdvStringGrid;
    btn_Search: TAdvGlassButton;
    btn_Add: TAdvGlowButton;
    btn_Update: TAdvGlowButton;
    btn_Delete: TAdvGlowButton;
    Add: TAdvSmoothPanel;
    lb_WorkType: TLabel;
    lb_SocketType: TAdvSmoothLabel;
    ed_ServerName: TAdvEdit;
    ed_DecoderNo: TAdvEdit;
    btn_Save: TAdvGlowButton;
    btn_Cancel: TAdvGlowButton;
    pan_Progress: TPanel;
    Lb_SaveMessage: TDBAdvSmoothLabel;
    AdvSmoothProgressBar1: TAdvSmoothProgressBar;
    cmb_SocketType: TAdvComboBox;
    ed_DecoderIP: TAdvEdit;
    AdvSmoothLabel1: TAdvSmoothLabel;
    ed_MonitoringServerPort: TAdvEdit;
    ed_ControlerServerPort: TAdvEdit;
    AdvSmoothLabel2: TAdvSmoothLabel;
    lb_ServerName: TAdvSmoothLabel;
    lb_DecoderIp: TAdvSmoothLabel;
    AdvSmoothLabel3: TAdvSmoothLabel;
    ed_FTPPort: TAdvEdit;
    AdvSmoothLabel4: TAdvSmoothLabel;
    ed_DirectPort: TAdvEdit;
    procedure FormShow(Sender: TObject);
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure btn_AddClick(Sender: TObject);
    procedure FormResize(Sender: TObject);
    procedure btn_SearchClick(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure sg_ListCheckBoxClick(Sender: TObject; ACol, ARow: Integer;
      State: Boolean);
    procedure sg_ListDblClick(Sender: TObject);
    procedure ed_SearchNameChange(Sender: TObject);
    procedure btn_DeleteClick(Sender: TObject);
    procedure CommandArrayCommandsTGRADEREFRESHExecute(Command: TCommand;
      Params: TStringList);
    procedure CommandArrayCommandsTMENUIDExecute(Command: TCommand;
      Params: TStringList);
    procedure ed_NodeIpKeyPress(Sender: TObject; var Key: Char);
    procedure TimerProgressTimer(Sender: TObject);
    procedure CommandArrayCommandsTFORMNAMEExecute(Command: TCommand;
      Params: TStringList);
    procedure pm_CodeAddClick(Sender: TObject);
    procedure btn_CancelClick(Sender: TObject);
    procedure btn_SaveClick(Sender: TObject);
    procedure btn_UpdateClick(Sender: TObject);
    procedure pm_UpdateCodeClick(Sender: TObject);
    procedure btn_CloseClick(Sender: TObject);
    procedure btn_minimizeClick(Sender: TObject);
  private
    L_nPageListMaxCount : integer;
    L_nCheckCount : integer;
    L_nProgress : integer;
    L_stMenuID : string;
    L_stButtonCloseCaption : string;
    L_stButtonPreCaption : string;
    L_stAddCaption : string;
    L_stUpdateCaption : string;
    L_stWork : string;
    L_bNodeChange : Boolean;
    { Private declarations }
    Function FormNameSetting:Boolean;
    Function SearchList(aCurrentCode:string;aTopRow:integer = 0):Boolean;
    Function AddDecoder : Boolean;
    Function UpdateWork : Boolean;
  private
    procedure AdvStrinGridSetAllCheck(Sender: TObject;bchkState:Boolean);

  public
    { Public declarations }
    procedure FormChangeEvent(aFormName:integer);
    procedure FormGradeRefresh;
    procedure FormIDSetting(aID:string);
  end;

var
  fmServerManager: TfmServerManager;

implementation
uses
  uCommonFunction,
  uCommonVariable,
  uDataBase,
  uDBDelete,
  uDBFormMessage,
  uDBFunction,
  uDBInsert,
  uDBUpdate,
  uDBSelect,
  uFormFunction,
  uFormVariable,
  uComboBoxCodeLoad,
  uFireGroup,
  uMain;
{$R *.dfm}

function TfmServerManager.AddDecoder: Boolean;
var
  stDecoderNo : string;
  stMessage : string;
  i,j,k : integer;
  stDate : string;
  stServerNo : string;
  stDeviceType : string;
begin
  inherited;
  stDecoderNo := dmDBFunction.GetNextTB_DECODER_ID;

  if dmDBFunction.CheckTB_Decoder_IP(ed_DecoderIP.Text,ed_MonitoringServerPort.Text) = 1 then
  begin
    stMessage := dmFormMessage.GetMessage('DBDATADUP');
    Application.MessageBox(PChar(stMessage),'Error',MB_OK);
    Exit;
  end;
  if dmDBFunction.CheckTB_Decoder_IP(ed_DecoderIP.Text,ed_ControlerServerPort.Text) = 1 then
  begin
    stMessage := dmFormMessage.GetMessage('DBDATADUP');
    Application.MessageBox(PChar(stMessage),'Error',MB_OK);
    Exit;
  end;
  if dmDBFunction.CheckTB_Decoder_IP(ed_DecoderIP.Text,ed_MonitoringServerPort.Text) = 1 then
  begin
    stMessage := dmFormMessage.GetMessage('DBDATADUP');
    Application.MessageBox(PChar(stMessage),'Error',MB_OK);
    Exit;
  end;
  if dmDBFunction.CheckTB_Decoder_IP(ed_DecoderIP.Text,ed_DirectPort.Text) = 1 then
  begin
    stMessage := dmFormMessage.GetMessage('DBDATADUP');
    Application.MessageBox(PChar(stMessage),'Error',MB_OK);
    Exit;
  end;

  if cmb_SocketType.ItemIndex < 0 then cmb_SocketType.ItemIndex := 0;


  if Not dmDBInsert.InsertIntoTB_DECODER_ALL(stDecoderNo,inttostr(cmb_SocketType.ItemIndex + 1),ed_ServerName.Text,ed_DecoderIP.Text,ed_ControlerServerPort.Text,ed_MonitoringServerPort.text,ed_FTPPort.Text,ed_DirectPort.Text) then
  begin
    stMessage := stringReplace(dmFormMessage.GetMessage('DBSAVEERROR'),'$WORK',btn_Save.Caption,[rfReplaceAll]);
    Application.MessageBox(PChar(stMessage),'Error',MB_OK);
    Exit;
  end;

  stDate := FormatDateTime('yyyymmddhhnnss',now);
  dmDBInsert.InsertIntoTB_ADMINWORKLOG_All(copy(stDate,1,8), copy(stDate,9,6), GetLocalIPAddr, G_stAdminUserID,L_stMenuID, '1', stDecoderNo, '00', '0', '0', '','Server Add');

end;


procedure TfmServerManager.AdvStrinGridSetAllCheck(Sender: TObject;
  bchkState: Boolean);
var
  i : integer;
begin
    for i:= 1 to (Sender as TAdvStringGrid).RowCount - 1  do
    begin
      (Sender as TAdvStringGrid).SetCheckBoxState(0,i,bchkState);
    end;
end;

procedure TfmServerManager.btn_AddClick(Sender: TObject);
begin
  inherited;
  pm_CodeAddClick(pm_CodeAdd);
end;

procedure TfmServerManager.btn_CancelClick(Sender: TObject);
begin
  inherited;
  Add.Visible := False;
end;

procedure TfmServerManager.btn_CloseClick(Sender: TObject);
begin
  inherited;
  Close;
end;

procedure TfmServerManager.btn_DeleteClick(Sender: TObject);
var
  i : integer;
  bChkState : Boolean;
  stMessage : string;
  stClientIP : string;
  stTime : string;
begin
  inherited;
  stClientIP:= GetLocalIPAddr;
  stTime := FormatDateTime('yyyymmddhhnnsszzz',now);
  stMessage := stringReplace(dmFormMessage.GetMessage('SELECTERROR'),'$WORK',btn_Delete.Caption,[rfReplaceAll]);
  if L_nCheckCount = 0 then
  begin
    Application.MessageBox(PChar(stMessage),'Information',MB_OK);
    Exit;
  end;
  stMessage := stringReplace(dmFormMessage.GetMessage('WORKCOUNTINFO'),'$WORK',btn_Delete.Caption,[rfReplaceAll]);
  stMessage := stringReplace(stMessage,'$COUNT',inttostr(L_nCheckCount),[rfReplaceAll]);
  if (Application.MessageBox(PChar(stMessage),'Information',MB_OKCANCEL) = IDCANCEL)  then Exit;
  stMessage := stringReplace(dmFormMessage.GetMessage('NODEDELETEMESSAGE'),'$WORK',btn_Delete.Caption,[rfReplaceAll]);
  if (Application.MessageBox(PChar(stMessage),'Information',MB_OKCANCEL) = IDCANCEL)  then Exit;
  With sg_List do
  begin
    for i := 1 to RowCount - 1 do
    begin
      GetCheckBoxState(0,i, bChkState);
      if bChkState then
      begin
        dmDBDelete.DeleteTB_Decoder_Value(cells[1,i]);

        Application.ProcessMessages;
      end;
    end;
    dmDBInsert.InsertIntoTB_SYSTEMLOG_All(copy(stTime,1,8),copy(stTime,9,6),stClientIP,'SERVER','0','00','','0',con_ComLogTYPE_PROGRAM,cells[1,Row] + ' : Server DELETE');
  end;
  SearchList('');
end;

procedure TfmServerManager.btn_minimizeClick(Sender: TObject);
begin
  inherited;
  windowState := wsNormal;
end;

procedure TfmServerManager.btn_SaveClick(Sender: TObject);
var
  stMessage : string;
  i,j,k : integer;
begin
  inherited;
  btn_Add.Enabled := False;
  btn_Save.Enabled := False;
  pan_Progress.Visible := True;

  L_nProgress := 0;
  TimerProgress.Enabled := True;
  Lb_SaveMessage.Caption.Text := dmFormMessage.GetMessage('SAVINGMESSAGE');
  if L_stWork = 'ADD' then AddDecoder
  else if L_stWork = 'UPDATE' then UpdateWork;
  TimerProgress.Enabled := False;

  L_bNodeChange := True;

  btn_Save.Enabled := True;
  btn_Add.Enabled := True;
  pan_Progress.Visible := False;
  Add.Visible := False;
  SearchList(ed_DecoderNo.Text,sg_List.TopRow);
end;

procedure TfmServerManager.btn_SearchClick(Sender: TObject);
begin
  inherited;
  SearchList('');
end;

procedure TfmServerManager.btn_UpdateClick(Sender: TObject);
begin
  inherited;
  sg_ListDblClick(sg_List);
end;

procedure TfmServerManager.CommandArrayCommandsTFORMNAMEExecute(Command: TCommand;
  Params: TStringList);
begin
  inherited;
  Caption := Params.Values['CAPTION'];

end;

procedure TfmServerManager.CommandArrayCommandsTGRADEREFRESHExecute(
  Command: TCommand; Params: TStringList);
begin
  inherited;
(*  btn_Add.Enabled := IsInsertGrade;
  pm_CodeAdd.Enabled := IsInsertGrade;
  btn_Delete.Enabled := IsDeleteGrade;
  pm_DeleteCode.Enabled := IsDeleteGrade;
  btn_Update.Enabled
*)
end;

procedure TfmServerManager.CommandArrayCommandsTMENUIDExecute(Command: TCommand;
  Params: TStringList);
begin
  inherited;
  L_stMenuID := Params.Values['ID'];
end;

procedure TfmServerManager.ed_NodeIpKeyPress(Sender: TObject; var Key: Char);
begin
  inherited;
  if Key = Char(VK_RETURN) then
      Perform(WM_NEXTDLGCTL,0,0);

end;

procedure TfmServerManager.ed_SearchNameChange(Sender: TObject);
begin
  inherited;
  SearchList('');
end;

procedure TfmServerManager.FormChangeEvent(aFormName: integer);
begin
//  case aFormName of
//  end;
end;

procedure TfmServerManager.FormClose(Sender: TObject; var Action: TCloseAction);
begin
  inherited;
  if L_bNodeChange then
  begin
    fmMain.FORMCHANGE(con_FormBMOSDECODERMANAGER,'')
  end;
  fmMain.FORMENABLE(con_FormBMOSDECODERMANAGER,'FALSE');


  Action := caFree;
end;

procedure TfmServerManager.FormCreate(Sender: TObject);
begin
  inherited;
  L_nPageListMaxCount := 17;
  pan_Progress.Left := 10;
end;

procedure TfmServerManager.FormGradeRefresh;
begin
  Try
    if IsInsertGrade or IsUpdateGrade or IsDeleteGrade then PopupMenu := pm_Work;
    pm_CodeAdd.Enabled := IsInsertGrade;
    btn_Add.Enabled := False;
    pm_DeleteCode.Enabled := IsDeleteGrade;
    btn_Delete.Enabled := False;
    pm_UpdateCode.Enabled := IsUpdateGrade;
    btn_Update.Enabled := False;
  Except
    Exit;
  End;
end;

procedure TfmServerManager.FormIDSetting(aID: string);
begin
  L_stMenuID := aID;
end;

function TfmServerManager.FormNameSetting: Boolean;
begin

  AdvOfficePage1.Caption := dmFormFunction.GetFormName('0','2','BUTTONMENU002');
//  lb_List.Caption := dmFormFunction.GetFormName('2','1','BM2_011');//dmFormFunction.GetFormName('0','2','COMMONLIST01');
  pm_CodeAdd.Caption := dmFormFunction.GetFormName('0','2','BUTTONADD001');
  btn_Add.Caption := dmFormFunction.GetFormName('0','2','BUTTONADD001');
  pm_DeleteCode.Caption := dmFormFunction.GetFormName('0','2','BUTTONDEL001');
  btn_Delete.Caption := dmFormFunction.GetFormName('0','2','BUTTONDEL001');
  pm_UpdateCode.Caption := dmFormFunction.GetFormName('0','2','BUTTONUPDATE001');
  btn_Update.Caption := dmFormFunction.GetFormName('0','2','BUTTONUPDATE001');
  btn_Save.Caption := dmFormFunction.GetFormName('0','2','BUTTONSAVE001');
  btn_Cancel.Caption := dmFormFunction.GetFormName('0','2','BUTTONCANCEL001');
  //lb_SearchName.Caption.Text := dmFormFunction.GetFormName('0','2','COMMONSERVERNAME');
  //lb_ServerName.Caption.Text := dmFormFunction.GetFormName('0','2','COMMONSERVERNAME');
  sg_List.Cells[1,0] := dmFormFunction.GetFormName('0','2','COMMONSERVERID');
  sg_List.Cells[2,0] := dmFormFunction.GetFormName('0','2','COMMONSERVERNAME');
  //lb_DecoderIp.Caption.Text := dmFormFunction.GetFormName('0','2','COMMONSERVERIP');
  L_stAddCaption := dmFormFunction.GetFormName('0','2','BUTTONADD001');
  L_stUpdateCaption := dmFormFunction.GetFormName('0','2','BUTTONUPDATE001');
  L_stButtonCloseCaption := dmFormFunction.GetFormName('0','2','BUTTONMENU001');
  L_stButtonPreCaption := dmFormFunction.GetFormName('0','2','BUTTONMENU004');
  btn_Search.Caption := dmFormFunction.GetFormName('0','2','BUTTONSEARCH001');

end;

procedure TfmServerManager.FormResize(Sender: TObject);
begin
  inherited;
  btn_Close.Left := AdvOfficePager1.Width - btn_Close.Width - 10;
  btn_minimize.Left := btn_Close.Left - btn_minimize.Width - 2;

  if Windowstate = wsMaximized then
  begin
    btn_minimize.Visible := True;
    btn_Close.Visible := True;
  end else
  begin
    btn_minimize.Visible := False;
    btn_Close.Visible := False;
  end;

  sg_List.Left := 10;
  sg_List.Width := BodyPanel.Width - (sg_List.Left * 2);
  sg_List.Height := BodyPanel.Height - (sg_List.Top + 10);
  if (sg_List.ColWidths[0] + sg_List.ColWidths[1] + sg_List.ColWidths[2] + sg_List.ColWidths[3] + sg_List.ColWidths[4] + sg_List.ColWidths[5] + sg_List.ColWidths[6] + sg_List.ColWidths[7])   < sg_List.Width - 10 then
  begin
    sg_List.ColWidths[7] := sg_List.Width - (sg_List.ColWidths[0] + sg_List.ColWidths[1] + sg_List.ColWidths[2] + sg_List.ColWidths[3] + sg_List.ColWidths[4] + sg_List.ColWidths[5] + sg_List.ColWidths[6]) - 10;
  end;

  Add.Left := (BodyPanel.Width div 2) - (Add.Width div 2);
  Add.Top := (BodyPanel.Height div 2) - (Add.Height div 2);

end;

procedure TfmServerManager.FormShow(Sender: TObject);
begin
  inherited;
  WindowState := wsMaximized;

  FormNameSetting;
  fmMain.FORMENABLE(con_FormBMOSDECODERMANAGER,'TRUE');

  SearchList('');
  FormResize(Self);
end;

procedure TfmServerManager.pm_CodeAddClick(Sender: TObject);
begin
  inherited;
  lb_WorkType.Caption := L_stAddCaption;
  Add.Visible := True;
  L_stWork := 'ADD';
  ed_ServerName.Text := '';
  ed_DecoderIP.Text := '';
  ed_MonitoringServerPort.Text := '';
  ed_ControlerServerPort.Text := '';
  cmb_SocketType.ItemIndex := 0;
end;

procedure TfmServerManager.pm_UpdateCodeClick(Sender: TObject);
begin
  inherited;
  sg_ListDblClick(sg_List);
end;

function TfmServerManager.SearchList(aCurrentCode:string;aTopRow:integer = 0): Boolean;
var
  stSql : string;
  TempAdoQuery : TADOQuery;
  nRow : integer;
begin
  GridInit(sg_List,8,2,true);
  stSql := dmDBSelect.SelectTB_Decoder_Name(ed_SearchName.Text);
  L_nCheckCount := 0;

  Try
    CoInitialize(nil);
    TempAdoQuery := TADOQuery.Create(nil);
    TempAdoQuery.Connection := dmDataBase.ADOConnection;
    TempAdoQuery.DisableControls;

    with TempAdoQuery do
    begin
      Close;
      sql.Text := stSql;
      Try
        Open;
      Except
        Exit;
      End;
      if recordcount < 1 then Exit;
      with sg_List do
      begin
        nRow := 1;
        RowCount := RecordCount + 1;
        while Not Eof do
        begin
          AddCheckBox(0,nRow,False,False);
          cells[1,nRow] := FindField('ND_DECODERNO').AsString;
          cells[2,nRow] := FindField('ND_DECODERNAME').AsString;
          cells[3,nRow] := FindField('ND_DECODERIP').AsString;
          cells[4,nRow] := FindField('ND_DECODERCONTROLPORT').AsString;
          cells[5,nRow] := FindField('ND_DECODERDEVICEPORT').AsString;
          cells[6,nRow] := FindField('ND_DECODERSOCKTYPE').AsString;
          cells[7,nRow] := FindField('ND_DECORDERFTPPORT').AsString;

          if cells[1,nRow] = aCurrentCode then
          begin
            SelectRows(nRow,1);
          end;

          nRow := nRow + 1;
          Next;
        end;
        if aTopRow = 0 then
        begin
          if Row > (L_nPageListMaxCount - 1) then TopRow := Row - L_nPageListMaxCount;
        end else
        begin
          TopRow := aTopRow;
        end;
      end;

    end;
  Finally
    TempAdoQuery.EnableControls;
    TempAdoQuery.Free;
    CoUninitialize;
  End;
end;


procedure TfmServerManager.sg_ListCheckBoxClick(Sender: TObject; ACol,
  ARow: Integer; State: Boolean);
begin
  inherited;
  if ARow = 0 then //전체선택 또는 해제
  begin
    if State then L_nCheckCount := (Sender as TAdvStringGrid).RowCount - 1
    else L_nCheckCount := 0;
    AdvStrinGridSetAllCheck(Sender,State);
  end else
  begin
    if State then L_nCheckCount := L_nCheckCount + 1
    else L_nCheckCount := L_nCheckCount - 1 ;
  end;
end;

procedure TfmServerManager.sg_ListDblClick(Sender: TObject);
var
  nIndex : integer;
begin
  inherited;
  L_stWork := 'UPDATE';
  with sg_List do
  begin
    if Not isDigit(cells[1,Row]) then Exit;
    ed_DecoderNo.Text := cells[1,Row];
    ed_ServerName.Text := cells[2,Row];
    if isDigit(cells[6,Row]) then
      cmb_SocketType.ItemIndex := strtoint(cells[6,Row]) - 1;
    ed_DecoderIP.Text := cells[3,Row];
    ed_MonitoringServerPort.Text := cells[4,Row];
    ed_ControlerServerPort.Text := cells[5,Row];
    ed_FTPPort.Text := cells[7,Row];

  end;
  lb_WorkType.Caption := L_stUpdateCaption;
  Add.Visible := True;

end;

procedure TfmServerManager.TimerProgressTimer(Sender: TObject);
begin
  inherited;
  L_nProgress := L_nProgress + 1;
  if L_nProgress > 10 then L_nProgress := 0;

  AdvSmoothProgressBar1.Maximum := 10;
  AdvSmoothProgressBar1.Position := L_nProgress;

end;

function TfmServerManager.UpdateWork: Boolean;
var
  stDecoderNo : string;
  stMessage : string;
  stDate : string;
begin
  inherited;
  stDecoderNo := ed_DecoderNo.Text;

  if dmDBFunction.CheckTB_Decoder_IP(ed_DecoderIP.Text,ed_MonitoringServerPort.Text,ed_DecoderNo.Text) = 1 then
  begin
    stMessage := dmFormMessage.GetMessage('DBDATADUP');
    Application.MessageBox(PChar(stMessage),'Error',MB_OK);
    Exit;
  end;
  if dmDBFunction.CheckTB_Decoder_IP(ed_DecoderIP.Text,ed_ControlerServerPort.Text,ed_DecoderNo.Text) = 1 then
  begin
    stMessage := dmFormMessage.GetMessage('DBDATADUP');
    Application.MessageBox(PChar(stMessage),'Error',MB_OK);
    Exit;
  end;
  if dmDBFunction.CheckTB_Decoder_IP(ed_DecoderIP.Text,ed_FTPPort.Text,ed_DecoderNo.Text) = 1 then
  begin
    stMessage := dmFormMessage.GetMessage('DBDATADUP');
    Application.MessageBox(PChar(stMessage),'Error',MB_OK);
    Exit;
  end;

  if Not dmDBUpdate.UpdateTB_Decoder_Value(stDecoderNo,ed_ServerName.Text,inttostr(cmb_SocketType.ItemIndex + 1),ed_DecoderIP.Text,ed_MonitoringServerPort.Text,ed_ControlerServerPort.Text,ed_FTPPort.Text) then
  begin
    stMessage := stringReplace(dmFormMessage.GetMessage('DBSAVEERROR'),'$WORK',btn_Save.Caption,[rfReplaceAll]);
    Application.MessageBox(PChar(stMessage),'Error',MB_OK);
    Exit;
  end;

  stDate := FormatDateTime('yyyymmddhhnnss',now);
  dmDBInsert.InsertIntoTB_ADMINWORKLOG_All(copy(stDate,1,8), copy(stDate,9,6), GetLocalIPAddr, G_stAdminUserID,L_stMenuID, '1', stDecoderNo, '00', '0', '0', '','Server Update');

end;

initialization
  RegisterClass(TfmServerManager);
Finalization
  UnRegisterClass(TfmServerManager);

end.

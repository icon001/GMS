unit uAttendReport;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, W7Classes, W7Panels, AdvOfficeTabSet,
  AdvOfficeTabSetStylers, AdvSmoothPanel, Vcl.ExtCtrls, AdvSmoothLabel,
  Vcl.StdCtrls, AdvEdit, Vcl.Buttons, Vcl.Grids, AdvObj, BaseGrid, AdvGrid,
  AdvToolBtn,ADODB,ActiveX, uSubForm, CommandArray, AdvCombo, AdvGroupBox,
  Vcl.Mask, AdvSpin, AdvOfficeButtons, AdvPanel, Vcl.ComCtrls, AdvListV,
  Vcl.ImgList, Vcl.Menus, AdvMenus, AdvExplorerTreeview, paramtreeview,
  System.iniFiles, Vcl.Samples.Gauges,
  AdvSmoothTabPager, AdvGlassButton, AdvEdBtn, AdvToolBar, AdvToolBarStylers,
  Vcl.Imaging.pngimage, AdvGlowButton, AdvOfficePager, AdvOfficePagerStylers,
  AdvAppStyler,Vcl.Clipbrd;


const
  con_LocalCompanyImageIndex = 0;
  con_LocalEmployeeImageIndex = 1;
  con_LocalBuildingImageIndex = 2;

type
  TfmAttendReport = class(TfmASubForm)
    Image1: TImage;
    BodyPanel: TAdvSmoothPanel;
    lb_SearchETCName: TAdvSmoothLabel;
    ImageList1: TImageList;
    pop_PermitAdd: TAdvPopupMenu;
    mn_addpermitListDelete: TMenuItem;
    toolslist: TImageList;
    ed_name: TAdvEdit;
    SaveDialog1: TSaveDialog;
    AdvSmoothLabel2: TAdvSmoothLabel;
    dt_endDate: TDateTimePicker;
    dt_StartDate: TDateTimePicker;
    cmb_Posi: TAdvComboBox;
    cmb_EmpGubun: TAdvComboBox;
    lb_EtcSearch: TAdvSmoothLabel;
    cmb_ETC: TAdvComboBox;
    eb_CompanyName: TAdvEditBtn;
    ed_CompanyCode: TAdvEdit;
    ed_BuildingCode: TAdvEdit;
    AdvOfficePager1: TAdvOfficePager;
    AdvOfficePage1: TAdvOfficePage;
    btn_minimize: TAdvGlowButton;
    btn_Close: TAdvGlowButton;
    sg_report: TAdvStringGrid;
    pan_gauge: TPanel;
    Label1: TLabel;
    Gauge1: TGauge;
    tv_AddCompanyCode: TTreeView;
    MenuImageList16: TImageList;
    lb_SearchDate: TAdvSmoothLabel;
    lb_CompanyName: TAdvSmoothLabel;
    lb_PosiName: TAdvSmoothLabel;
    lb_empType: TAdvSmoothLabel;
    btn_Search: TAdvGlowButton;
    btn_Option: TAdvGlowButton;
    btn_Print: TAdvGlowButton;
    btn_Excel: TAdvGlowButton;
    pan_Option: TAdvSmoothPanel;
    lb_SearchOption: TLabel;
    gb_SearchOption: TAdvOfficeCheckGroup;
    btn_OptionSave: TAdvGlowButton;
    btn_OptionCancel: TAdvGlowButton;
    tv_AddCompanyName: TTreeView;
    AdvFormStyler1: TAdvFormStyler;
    AdvOfficePagerOfficeStyler1: TAdvOfficePagerOfficeStyler;
    AdvOfficeTabSetOfficeStyler1: TAdvOfficeTabSetOfficeStyler;
    lb_list: TAdvSmoothLabel;
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure FormCreate(Sender: TObject);
    procedure FormShow(Sender: TObject);
    procedure ed_AddNameKeyPress(Sender: TObject; var Key: Char);
    procedure FormActivate(Sender: TObject);
    procedure ed_nameKeyPress(Sender: TObject; var Key: Char);
    procedure btn_ExcelClick(Sender: TObject);
    procedure btn_PrintClick(Sender: TObject);
    procedure cmb_ETCChange(Sender: TObject);
    procedure FormResize(Sender: TObject);
    procedure btn_OptionClick(Sender: TObject);
    procedure btn_OptionCancelClick(Sender: TObject);
    procedure btn_OptionSaveClick(Sender: TObject);
    procedure sg_reportColumnMoved(Sender: TObject; FromIndex,
      ToIndex: Integer);
    procedure btn_SearchClick(Sender: TObject);
    procedure eb_CompanyNameClickBtn(Sender: TObject);
    procedure tv_AddCompanyNameDblClick(Sender: TObject);
    procedure btn_minimizeClick(Sender: TObject);
    procedure btn_CloseClick(Sender: TObject);
    procedure sg_reportKeyDown(Sender: TObject; var Key: Word;
      Shift: TShiftState);
  private
    L_stMenuID : string;
    L_stCloseCaption : string;
    L_stAllName : string;
    BuildingCodeList : TStringList;
    CardStateList : TStringList;
    CompanyCodeList : TStringList;
    DoorCodeList : TStringList;
    PosiCodeList : TStringList;
    EmployeeGubunCodeList : TStringList;
    ReportHeaderNameList : TStringList;
    ReportFieldNameList : TStringList;
    L_nMaxReportColCount : integer;
    L_nShowCount : integer;
    L_arrAttendReportIndexArray:Array of integer; //출입이벤트 리스트 순서 배열
    L_arrRelAttendReportIndexArray:Array of integer; //출입이벤트 실제 위치
    L_arrAttendReportShowTable : Array of integer;  //출입이벤트 조회 항목테이블
    L_arrAttendReportSizeTable : Array of integer;  //출입이벤트 Cell Size
    { Private declarations }
    function AttendReportHeaderNameSetting(aList: TAdvStringGrid):Boolean;
    function AttendReportFieldNameSetting:Boolean;
    procedure ChangeAttendReportIndex(FromIndex,ToIndex:integer);
    Function FormComboBoxInitialize:Boolean;
    Function FormGridInitialize:Boolean;
    Function FormNameSetting:Boolean;
    procedure FontSetting;
    Function MemoryCreate : Boolean;
    Function MemoryFree:Boolean;
    Function SearchReport:Boolean;
    function ReportCellHide(aList:TAdvStringGrid):Boolean;
    function ReportConfigRead:Boolean;
    function ReportHeaderNameSetting:Boolean;
    function WriteIniConfig:Boolean;

  public
    { Public declarations }
    procedure FormChangeEvent(aFormName:integer);
    procedure FormGradeRefresh;
    procedure FormIDSetting(aID:string);
  end;

var
  fmAttendReport: TfmAttendReport;

implementation
uses
  uCommonFunction,
  uCommonVariable,
  uComboBoxCodeLoad,
  uDataBase,
  uDBFunction,
  uDBSelect,
  uFormFunction,
  uFormVariable,
  uFormUtil,
  uDBFormMessage,
  uMain;

{$R *.dfm}


function TfmAttendReport.AttendReportFieldNameSetting: Boolean;
begin
  ReportFieldNameList.Clear;
  ReportFieldNameList.Add('AT_DATE');
  ReportFieldNameList.Add('COMPANYNAME1');
  ReportFieldNameList.Add('COMPANYNAME2');
  ReportFieldNameList.Add('COMPANYNAME3');
  ReportFieldNameList.Add('PO_POSICODENAME');
  ReportFieldNameList.Add('EM_CODE');
  ReportFieldNameList.Add('EM_NAME');
  ReportFieldNameList.Add('AW_NAME');
  ReportFieldNameList.Add('AT_CODENAME');
  ReportFieldNameList.Add('AE_ATINTIME');
  ReportFieldNameList.Add('AE_ATWORKOUTTIME');
  ReportFieldNameList.Add('AE_ATWORKINTIME');
  ReportFieldNameList.Add('AE_ATOUTTIME');
  ReportFieldNameList.Add('AT_INRESULT');
  ReportFieldNameList.Add('AT_OUTRESULT');
  ReportFieldNameList.Add('AE_WORKMM');
  ReportFieldNameList.Add('AE_EXTENDWORKMM');
  ReportFieldNameList.Add('AE_NIGHTWORKMM');
end;

function TfmAttendReport.AttendReportHeaderNameSetting(
  aList: TAdvStringGrid): Boolean;
var
  i : integer;
begin
  aList.ColCount := ReportHeaderNameList.Count;
  for i := LOW(L_arrAttendReportIndexArray) to HIGH(L_arrAttendReportIndexArray) do
  begin
    if (aList.ColCount - 1) < i then Exit;
    if (ReportHeaderNameList.Count - 1) < i then Exit;

    aList.cells[L_arrAttendReportIndexArray[i],0] := ReportHeaderNameList[i];
  end;

end;

procedure TfmAttendReport.btn_CloseClick(Sender: TObject);
begin
  inherited;
  Close;
end;

procedure TfmAttendReport.btn_ExcelClick(Sender: TObject);
var
  stRefFileName,stSaveFileName:String;
  stPrintRefPath : string;
  nExcelRowStart:integer;
  ini_fun : TiniFile;
  aFileName : string;
  stTitle : string;
begin
  btn_Excel.Enabled := False;
  aFileName:=dmFormFunction.GetFormName('2','1','BM4_017');
  SaveDialog1.FileName := aFileName;
  if SaveDialog1.Execute then
  begin
    stSaveFileName := SaveDialog1.FileName;

    if SaveDialog1.FileName <> '' then
    begin
      //sg_Report.SaveToXLS(stSaveFileName,True);
      if fileexists(stSaveFileName) then
        deletefile(stSaveFileName);
      sg_Report.SaveToXLS(stSaveFileName);
//      advgridexcelio1.XLSExport(stSaveFileName);
    end;
  end;
  btn_Excel.Enabled := True;

end;

procedure TfmAttendReport.btn_minimizeClick(Sender: TObject);
begin
  inherited;
  windowState := wsNormal;
end;

procedure TfmAttendReport.btn_OptionCancelClick(Sender: TObject);
begin
  inherited;
  Pan_Option.Visible := False;
end;

procedure TfmAttendReport.btn_OptionClick(Sender: TObject);
var
  i : integer;
begin
  inherited;
  for i := LOW(L_arrAttendReportShowTable) to HIGH(L_arrAttendReportShowTable) do
  begin
    if i < gb_SearchOption.Items.Count then
    begin
      if L_arrAttendReportShowTable[i] = 1 then gb_SearchOption.Checked[i] := True
      else gb_SearchOption.Checked[i] := False;
    end;
  end;
  Pan_Option.Visible := True;
end;

procedure TfmAttendReport.btn_OptionSaveClick(Sender: TObject);
var
  ini_fun : TiniFile;
  i : integer;
begin
  Try
    ini_fun := TiniFile.Create(G_stExeFolder + '\AttendReport.INI');
    with ini_fun do
    begin
      for i := 0 to gb_SearchOption.Items.Count - 1 do
      begin
        if gb_SearchOption.Checked[i] then
        begin
          L_arrAttendReportShowTable[i] := 1;
          WriteInteger('ATTENDREPORT','RelAccessShowArray'+inttostr(i),1);
        end else
        begin
          L_arrAttendReportShowTable[i] := 0;
          WriteInteger('ATTENDREPORT','RelAccessShowArray'+inttostr(i),0);
        end;
      end;
    end;
  Finally
    ini_fun.Free;
  End;
  Pan_Option.Visible := False;
  ReportCellHide(sg_Report);
end;

procedure TfmAttendReport.btn_PrintClick(Sender: TObject);
begin
  sg_Report.Print;
end;

procedure TfmAttendReport.btn_SearchClick(Sender: TObject);
begin
  inherited;
  SearchReport;
end;

procedure TfmAttendReport.ChangeAttendReportIndex(FromIndex, ToIndex: integer);
var
  i : integer;
  nChangData : integer;
begin
  nChangData := L_arrRelAttendReportIndexArray[FromIndex];
  if FromIndex > ToIndex then   //뒤에 있는 놈이 앞으로 오는 경우
  begin
    for i := FromIndex downto ToIndex + 1 do
    begin
      L_arrRelAttendReportIndexArray[i] := L_arrRelAttendReportIndexArray[i - 1];
    end;
    L_arrRelAttendReportIndexArray[ToIndex] := nChangData;
  end else   //앞에 있는 놈이 뒤로 가는 경우
  begin
    for i := FromIndex to ToIndex - 1 do
    begin
      L_arrRelAttendReportIndexArray[i] := L_arrRelAttendReportIndexArray[i + 1];
    end;
    L_arrRelAttendReportIndexArray[ToIndex] := nChangData;
  end;

  for i := LOW(L_arrRelAttendReportIndexArray) to HIGH(L_arrRelAttendReportIndexArray) do
  begin
    L_arrAttendReportIndexArray[L_arrRelAttendReportIndexArray[i]] := i;
  end;

end;

procedure TfmAttendReport.cmb_ETCChange(Sender: TObject);
begin
  inherited;
  lb_SearchETCName.Caption.Text := cmb_ETC.Text;
end;

procedure TfmAttendReport.eb_CompanyNameClickBtn(Sender: TObject);
begin
  inherited;
  tv_AddCompanyName.Visible := True;
  tv_AddCompanyName.Top := eb_CompanyName.Top + eb_CompanyName.Height;
  tv_AddCompanyName.Left := eb_CompanyName.Left;

end;

procedure TfmAttendReport.ed_AddNameKeyPress(Sender: TObject;
  var Key: Char);
begin
  inherited;
  if Key = #13 then
  begin
    Perform(WM_NEXTDLGCTL,0,0);
  end;
end;

procedure TfmAttendReport.ed_nameKeyPress(Sender: TObject; var Key: Char);
begin
  inherited;
  if Key = #13 then
  begin
    Key := #0;
  end;

end;

procedure TfmAttendReport.FontSetting;
begin
(*  dmFormUtil.TravelFormFontSetting(self,G_stFontName,inttostr(G_nFontSize));
  dmFormUtil.TravelAdvOfficeTabSetOfficeStylerFontSetting(AdvOfficeTabSetOfficeStyler1, G_stFontName,inttostr(G_nFontSize));
  dmFormUtil.FormAdvOfficeTabSetOfficeStylerSetting(AdvOfficeTabSetOfficeStyler1,G_stFormStyle);
  dmFormUtil.FormAdvToolBarOfficeStylerSetting(AdvToolBarOfficeStyler1,G_stFormStyle);
  dmFormUtil.FormStyleSetting(self,AdvToolBarOfficeStyler1);
  *)
end;

procedure TfmAttendReport.FormActivate(Sender: TObject);
begin
  inherited;
  WindowState := wsMaximized;
end;

procedure TfmAttendReport.FormChangeEvent(aFormName: integer);
begin
end;

procedure TfmAttendReport.FormClose(Sender: TObject;
  var Action: TCloseAction);
begin
  WriteIniConfig;

  fmMain.FORMENABLE(con_FormBMOSATREPORT,'FALSE');

  MemoryFree;
  Action := caFree;
end;

function TfmAttendReport.FormComboBoxInitialize: Boolean;
var
  stBuildingCode : string;
  stFloorCode : string;
  stAreaCode : string;
  stCompanyCode : string;
  stJijumCode : string;
  stDepartCode : string;
begin
  stCompanyCode := copy(ed_CompanyCode.Text,1,1 + G_nCompanyCodeLength);
  LoadPosiCode(stCompanyCode,PosiCodeList,TComboBox(cmb_Posi),True,L_stAllName);
  LoadEmployeeGubunCode(EmployeeGubunCodeList,TComboBox(cmb_EmpGubun),True,L_stAllName);
  LoadSearchETC(cmb_ETC);

  cmb_ETC.ItemIndex := 0;
  lb_SearchETCName.Caption.Text := cmb_ETC.Text;

end;

procedure TfmAttendReport.FormCreate(Sender: TObject);
begin

  dt_StartDate.Date := Now;
  dt_endDate.Date := now;

  MemoryCreate;
  FontSetting;
end;


procedure TfmAttendReport.FormGradeRefresh;
begin

end;

function TfmAttendReport.FormGridInitialize: Boolean;
begin
  GridInitialize(sg_Report);
  ReportCellHide(sg_Report);
end;

procedure TfmAttendReport.FormIDSetting(aID: string);
begin
  L_stMenuID := aID;
end;

function TfmAttendReport.FormNameSetting: Boolean;
var
  i : integer;
begin
  ReportHeaderNameSetting;

  AdvOfficePage1.Caption := dmFormFunction.GetFormName('0','2','COMMONREPORT');
  lb_List.Caption := dmFormFunction.GetFormName('2','1','BM4_017');
  lb_SearchDate.Caption.Text := dmFormFunction.GetFormName('0','2','COMMONSEARCHDATE');

  lb_CompanyName.Caption.Text := dmFormFunction.GetFormName('0','2','COMMONCOMPANYNAME');
  lb_PosiName.Caption.Text := dmFormFunction.GetFormName('0','2','COMMONEMPLOYEEPOSINAME');
  lb_empType.Caption.Text := dmFormFunction.GetFormName('0','2','COMMONEMPLOYEEGUBUN');
  lb_EtcSearch.Caption.Text := dmFormFunction.GetFormName('0','2','COMMONETCNAME');

  L_stCloseCaption := dmFormFunction.GetFormName('0','2','BUTTONMENU001');
  L_stAllName := dmFormFunction.GetFormName('0','2','COMMONALLNAME');

  btn_Search.Caption := dmFormFunction.GetFormName('0','2','BUTTONSEARCH001');
  btn_Option.Caption := dmFormFunction.GetFormName('0','2','BUTTONSEARCHOPTION');
  lb_SearchOption.Caption := dmFormFunction.GetFormName('0','2','BUTTONSEARCHOPTION');
  btn_Print.Caption := dmFormFunction.GetFormName('0','2','COMMONPRINT');
  btn_Excel.Caption := dmFormFunction.GetFormName('0','2','BUTTONFILESAVE002');
  btn_OptionSave.Caption := dmFormFunction.GetFormName('0','2','BUTTONSAVE001');
  btn_OptionCancel.Caption := dmFormFunction.GetFormName('0','2','BUTTONCANCEL001');

  gb_SearchOption.Items.Clear;

  for i := 0 to ReportHeaderNameList.Count - 1 do
  begin
    gb_SearchOption.Items.Add(ReportHeaderNameList.Strings[i]);
  end;
end;

procedure TfmAttendReport.FormResize(Sender: TObject);
begin
  inherited;
  pan_Option.Left := (width div 2) - (pan_Option.Width div 2);
  pan_Option.Top := (Height div 2) - (pan_Option.Height div 2);

  btn_OptionSave.Left := pan_Option.Width div 2 - btn_OptionSave.Width  - 5;
  btn_OptionCancel.Left := pan_Option.Width div 2 + 5;

  sg_report.Height := BodyPanel.Height - (btn_Search.Top + btn_Search.Height + 10);
  sg_report.Left := 5;
  sg_report.Width := BodyPanel.Width - (sg_report.Left * 2);
  sg_report.Top := btn_Search.Top + btn_Search.Height + 10;

  btn_Close.Left := AdvOfficePager1.Width - btn_Close.Width - 10;
  btn_minimize.Left := btn_Close.Left - btn_minimize.Width - 2;

  if Windowstate = wsMaximized then
  begin
    btn_minimize.Visible := True;
    btn_Close.Visible := True;
  end else
  begin
    btn_minimize.Visible := False;
    btn_Close.Visible := False;
  end;
end;

procedure TfmAttendReport.FormShow(Sender: TObject);
begin
  fmMain.FORMENABLE(con_FormBMOSATREPORT,'TRUE');

  FormNameSetting;
  FormComboBoxInitialize;
  ReportConfigRead;
  FormGridInitialize;
  AttendReportHeaderNameSetting(sg_Report);
  AttendReportFieldNameSetting;
  LoadCompanyTreeView('',tv_AddCompanyName,tv_AddCompanyCode,con_LocalCompanyImageIndex);
  tv_AddCompanyNameDblClick(Self);
  if Not FileExists(G_stExeFolder + '\Excel-d.png') then
  begin
    ExcelDisImage.Picture.SaveToFile(G_stExeFolder + '\Excel-d.png');
  end;
  btn_Excel.Picture.LoadFromFile(G_stExeFolder + '\Excel-d.png');

end;


function TfmAttendReport.MemoryCreate: Boolean;
begin
  L_nMaxReportColCount := 30;
  L_nShowCount := 0;

  BuildingCodeList := TStringList.Create;
  CardStateList := TStringList.Create;
  CompanyCodeList := TStringList.Create;
  DoorCodeList := TStringList.Create;
  PosiCodeList := TStringList.Create;
  EmployeeGubunCodeList := TStringList.Create;
  ReportHeaderNameList := TStringList.Create;
  ReportFieldNameList := TStringList.Create;

  SetLength(L_arrAttendReportIndexArray,L_nMaxReportColCount + 1);
  SetLength(L_arrRelAttendReportIndexArray,L_nMaxReportColCount + 1);
  SetLength(L_arrAttendReportShowTable,L_nMaxReportColCount + 1);
  SetLength(L_arrAttendReportSizeTable,L_nMaxReportColCount + 1);
end;

function TfmAttendReport.MemoryFree: Boolean;
begin
  BuildingCodeList.Free;
  CardStateList.Free;
  CompanyCodeList.Free;
  DoorCodeList.Free;
  PosiCodeList.Free;
  EmployeeGubunCodeList.Free;
  ReportHeaderNameList.Free;
  ReportFieldNameList.Free;

  L_arrAttendReportIndexArray := nil;
  Finalize(L_arrAttendReportIndexArray);
  L_arrRelAttendReportIndexArray := nil;
  Finalize(L_arrRelAttendReportIndexArray);
  L_arrAttendReportShowTable := nil;
  Finalize(L_arrAttendReportShowTable);
  L_arrAttendReportSizeTable := nil;
  Finalize(L_arrAttendReportSizeTable);
end;

function TfmAttendReport.ReportCellHide(aList: TAdvStringGrid): Boolean;
var
  i : integer;
begin
  for i := 0 to aList.ColCount - 1 do
  begin
    if L_arrAttendReportShowTable[i] = 0 then
    begin
      aList.ColWidths[L_arrAttendReportIndexArray[i]] := 0;
    end else
    begin
      if L_arrAttendReportSizeTable[L_arrAttendReportIndexArray[i]] <> 0 then aList.ColWidths[L_arrAttendReportIndexArray[i]] := L_arrAttendReportSizeTable[L_arrAttendReportIndexArray[i]]
      else aList.ColWidths[L_arrAttendReportIndexArray[i]] := 90;
    end;
  end;
end;

function TfmAttendReport.ReportConfigRead: Boolean;
var
  ini_fun : TiniFile;
  nShowCount : integer;
  nSize : integer;
  i : integer;
begin
  L_nShowCount := 0;
  ini_fun := TiniFile.Create(G_stExeFolder + '\ATTENDREPORT.INI');
  Try
    with ini_fun do
    begin
      for i := LOW(L_arrAttendReportIndexArray) to HIGH(L_arrAttendReportIndexArray) do
      begin
        L_arrAttendReportIndexArray[i] := ReadInteger('ATTENDREPORT','AccessIndexArray'+inttostr(i),i);
      end;
      for i := LOW(L_arrRelAttendReportIndexArray) to HIGH(L_arrRelAttendReportIndexArray) do
      begin
        L_arrRelAttendReportIndexArray[i] := ReadInteger('ATTENDREPORT','RelAccessIndexArray'+inttostr(i),i);
      end;
      for i := LOW(L_arrAttendReportShowTable) to HIGH(L_arrAttendReportShowTable) do
      begin
        L_arrAttendReportShowTable[i] := ReadInteger('ATTENDREPORT','RelAccessShowArray'+inttostr(i),1);
        L_nShowCount := L_nShowCount + L_arrAttendReportShowTable[i];
      end;
      nSize := 90;
      for i := LOW(L_arrAttendReportSizeTable) to HIGH(L_arrAttendReportSizeTable) do
      begin
        L_arrAttendReportSizeTable[i] := ReadInteger('ATTENDREPORT','RelAccessSizeArray'+inttostr(i),nSize);
      end;
    end;
  Finally
    ini_fun.Free;
  End;

end;

function TfmAttendReport.ReportHeaderNameSetting: Boolean;
begin

  ReportHeaderNameList.Clear;
  ReportHeaderNameList.Add(dmFormFunction.GetFormName('0','2','COMMONATTENDDATE'));         //근태날짜
  ReportHeaderNameList.Add(dmFormFunction.GetFormName('0','2','COMMONCOMPANYNAME') + '1');  //소속1
  ReportHeaderNameList.Add(dmFormFunction.GetFormName('0','2','COMMONCOMPANYNAME') + '2');  //소속2
  ReportHeaderNameList.Add(dmFormFunction.GetFormName('0','2','COMMONCOMPANYNAME') + '3');  //소속3
  ReportHeaderNameList.Add(dmFormFunction.GetFormName('0','2','COMMONEMPLOYEEPOSINAME'));   //직위
  ReportHeaderNameList.Add(dmFormFunction.GetFormName('0','2','COMMONEMPLOYEECODE'));       //사번
  ReportHeaderNameList.Add(dmFormFunction.GetFormName('0','2','COMMONEMPLOYEENAME'));       //이름
  ReportHeaderNameList.Add(dmFormFunction.GetFormName('0','2','COMMONATTENDTYPE'));         //근태타입
  ReportHeaderNameList.Add(dmFormFunction.GetFormName('0','2','COMMONATTENDCODE'));         //근태코드
  ReportHeaderNameList.Add(dmFormFunction.GetFormName('0','2','COMMONATINTIME'));           //출근시간
  ReportHeaderNameList.Add(dmFormFunction.GetFormName('0','2','COMMONATWORKOUTTIME'));      //외출시간
  ReportHeaderNameList.Add(dmFormFunction.GetFormName('0','2','COMMONATWORKINTIME'));       //복귀시간
  ReportHeaderNameList.Add(dmFormFunction.GetFormName('0','2','COMMONATOUTTIME'));          //퇴근시간
  ReportHeaderNameList.Add(dmFormFunction.GetFormName('0','2','COMMONATINRESULT'));         //출근상태
  ReportHeaderNameList.Add(dmFormFunction.GetFormName('0','2','COMMONATOUTRESULT'));        //퇴근상태
  ReportHeaderNameList.Add(dmFormFunction.GetFormName('0','2','COMMONATWORKEDTIME'));       //근무시간
  ReportHeaderNameList.Add(dmFormFunction.GetFormName('0','2','COMMONATWORKEDEXTIME'));       //근무시간
  ReportHeaderNameList.Add(dmFormFunction.GetFormName('0','2','COMMONATWORKEDNHTIME'));     //연장근무시간

  result := True;

end;

function TfmAttendReport.SearchReport: Boolean;
var
  stStartDate : string;
  stEndDate : string;
  stCompanyCode : string;
  stPosiCode : string;
  stEmpGubun : string;
  stEtcType : string;
  stEtcName : string;
  stSql : string;
  TempAdoQuery : TADOQuery;
  nRow : integer;
  i : integer;
  stTemp : string;
begin
  stStartDate := FormatDateTime('yyyymmdd',dt_StartDate.Date);
  stEndDate := FormatDateTime('yyyymmdd',dt_EndDate.Date);
  stCompanyCode := ed_CompanyCode.Text;
  if cmb_Posi.ItemIndex > 0 then stPosiCode := PosiCodeList.Strings[cmb_Posi.ItemIndex]
  else stPosiCode := '';
  stEmpGubun := '';
  if cmb_EmpGubun.ItemIndex > 0 then stEmpGubun := EmployeeGubunCodeList.Strings[cmb_EmpGubun.ItemIndex];
  stEtcType := '0';
  if cmb_ETC.ItemIndex > 0 then stEtcType := inttostr(cmb_ETC.ItemIndex);
  stEtcName := Trim(ed_name.Text);
  stSql :=  dmDBSelect.SelectTB_ATTENDEVENT_AttendReport(stStartDate,stEndDate, stCompanyCode,
            stPosiCode, stEmpGubun, stEtcType, stEtcName);

//  memo1.Text := stSql;
 
  btn_Excel.Enabled := False;
  if Not FileExists(G_stExeFolder + '\Excel-d.png') then
  begin
    ExcelDisImage.Picture.SaveToFile(G_stExeFolder + '\Excel-d.png');
  end;
  btn_Excel.Picture.LoadFromFile(G_stExeFolder + '\Excel-d.png');
  btn_Print.Enabled := False;
  GridInitialize(sg_Report);
  Try
    CoInitialize(nil);
    TempAdoQuery := TADOQuery.Create(nil);
    TempAdoQuery.Connection := dmDataBase.ADOConnection;
    TempAdoQuery.DisableControls;

    with TempAdoQuery do
    begin
      Close;
      sql.Text := stSql;
      Try
        Open;
      Except
        Exit;
      End;
      if recordcount < 1 then Exit;
      btn_Excel.Enabled := True;
      if Not FileExists(G_stExeFolder + '\Excel-a.png') then
      begin
        ExcelEnImage.Picture.SaveToFile(G_stExeFolder + '\Excel-a.png');
      end;
      btn_Excel.Picture.LoadFromFile(G_stExeFolder + '\Excel-a.png');
      btn_Print.Enabled := True;
      with sg_Report do
      begin
        nRow := 1;
        RowCount := RecordCount + 1;
        while Not Eof do
        begin
          for i := 0 to ReportFieldNameList.Count - 1 do
          begin
            stTemp := FindField(ReportFieldNameList.Strings[i]).AsString;
            if ReportFieldNameList.Strings[i] = 'AT_DATE' then stTemp := MakeDatetimeStr(stTemp)
            else if (ReportFieldNameList.Strings[i] = 'AE_ATINTIME') or
              (ReportFieldNameList.Strings[i] = 'AE_ATWORKOUTTIME') or
              (ReportFieldNameList.Strings[i] = 'AE_ATWORKINTIME') or
              (ReportFieldNameList.Strings[i] = 'AE_ATOUTTIME')
            then
            begin
              if Length(stTemp) > 8 then System.Delete(stTemp,1,8);
              stTemp := MaketimeStr(stTemp);
            end
            else if (ReportFieldNameList.Strings[i] = 'AE_WORKMM') or
              (ReportFieldNameList.Strings[i] = 'AE_EXTENDWORKMM') or
              (ReportFieldNameList.Strings[i] = 'AE_NIGHTWORKMM') then
            begin
              if stTemp = '0' then stTemp := '';
              if isDigit(stTemp) then stTemp := MinuteToString(strtoint(stTemp));
            end;
            cells[L_arrAttendReportIndexArray[i],nRow] := stTemp;
          end;
          nRow := nRow + 1;
          Next;
        end;
      end;
    end;
  Finally
    TempAdoQuery.EnableControls;
    TempAdoQuery.Free;
    CoUninitialize;
  End;

  result := True;
end;

procedure TfmAttendReport.sg_reportColumnMoved(Sender: TObject; FromIndex,
  ToIndex: Integer);
begin
  inherited;
  ChangeAttendReportIndex(FromIndex,ToIndex);

end;

procedure TfmAttendReport.sg_reportKeyDown(Sender: TObject; var Key: Word;
  Shift: TShiftState);
var
  stTemp: string;
  stMessage : string;
begin
  if key = 17 then Exit;
  if (Key = 67) and (Shift = [ssCtrl]) 	then
  begin
    with Sender as TAdvStringGrid do
    begin
      stTemp:= Cells[Col,Row];

      if stTemp <> '' then ClipBoard.SetTextBuf(PChar(stTemp));
      stMessage := dmFormMessage.GetMessage('CLIPDATACOPY');
      stMessage := stringReplace(stMessage,'$DATA',stTemp,[rfReplaceAll]);
      fmMain.FORMSTATUSMSG(2,stMessage);
      //showmessage(stTemp + ' 가 ClipBoard에 복사 되었습니다.');
    end;
  end;
end;

procedure TfmAttendReport.tv_AddCompanyNameDblClick(Sender: TObject);
begin
  inherited;
  Try
    if tv_AddCompanyName.Selected = nil then tv_AddCompanyName.Items[0].Selected := True;

    ed_CompanyCode.Text := tv_AddCompanyCode.Items.Item[tv_AddCompanyName.Selected.AbsoluteIndex].Text;
    eb_CompanyName.Text := tv_AddCompanyName.Selected.Text;
    tv_AddCompanyName.Visible := False;
    LoadPosiCode(copy(ed_CompanyCode.Text,1,1+G_nCompanyCodeLength),PosiCodeList,TComboBox(cmb_Posi),True,L_stAllName);
  Except
    Exit;
  End;
end;

function TfmAttendReport.WriteIniConfig: Boolean;
var
  ini_fun : TiniFile;
  i : integer;
begin
  ini_fun := TiniFile.Create(G_stExeFolder + '\ATTENDREPORT.INI');
  Try
    with ini_fun do
    begin
      for i := LOW(L_arrAttendReportIndexArray) to HIGH(L_arrAttendReportIndexArray) do
      begin
        WriteInteger('ATTENDREPORT','AccessIndexArray'+inttostr(i),L_arrAttendReportIndexArray[i]);
      end;
      for i := LOW(L_arrRelAttendReportIndexArray) to HIGH(L_arrRelAttendReportIndexArray) do
      begin
        WriteInteger('ATTENDREPORT','RelAccessIndexArray'+inttostr(i),L_arrRelAttendReportIndexArray[i]);
      end;
      for i := 0 to sg_Report.ColCount - 1 do
      begin
        if i > HIGH(L_arrAttendReportSizeTable) then break;

        L_arrAttendReportSizeTable[i] := sg_Report.ColWidths[i];
        WriteInteger('ATTENDREPORT','RelAccessSizeArray' + inttostr(i),sg_Report.ColWidths[i]);
      end;
    end;
  Finally
    ini_fun.Free;
  End;
end;

initialization
  RegisterClass(TfmAttendReport);
Finalization
  UnRegisterClass(TfmAttendReport);

end.

unit uClientConfig;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, StdCtrls, Buttons,  ComCtrls, DB, ADODB,WinSpool, ExtCtrls,ActiveX, uSubForm, CommandArray,
  System.IniFiles, AdvPanel, FindFile, AdvCombo, Vcl.MPlayer, AdvToolBar,
  AdvToolBarStylers, AdvOfficeTabSet, AdvOfficeTabSetStylers, AdvOfficeButtons,
  AdvAppStyler,AdvStyleIF, Vcl.Imaging.pngimage, AdvGlowButton, AdvGroupBox;

type
  TfmClientConfig = class(TfmASubForm)
    RzOpenDialog1: TOpenDialog;
    PageControl1: TPageControl;
    fdmsADOQuery: TADOQuery;
    tab_regPort: TTabSheet;
    lb_cardPort: TLabel;
    cmb_Comport: TComboBox;
    FindFile: TFindFile;
    MediaPlayer1: TMediaPlayer;
    lb_RegCardType: TLabel;
    cmb_RegType: TComboBox;
    ed_FingerIP: TEdit;
    AdvOfficeTabSetOfficeStyler1: TAdvOfficeTabSetOfficeStyler;
    AdvToolBarOfficeStyler1: TAdvToolBarOfficeStyler;
    TabSheet1: TTabSheet;
    AdvFormStyler1: TAdvFormStyler;
    Label6: TLabel;
    cmb_FormStyle: TComboBox;
    btn_Save: TAdvGlowButton;
    btn_Close: TAdvGlowButton;
    ed_FingerPort: TEdit;
    Label19: TLabel;
    lb_FingerIP: TLabel;
    ed_shFingerIP: TEdit;
    cmb_shFingerType: TComboBox;
    ed_shFingerPort: TEdit;
    lb_shFingerid: TLabel;
    ed_shFingerReaderID: TEdit;
    procedure btn_CloseClick(Sender: TObject);
    procedure btn_SaveClick(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure FormActivate(Sender: TObject);
    procedure cmb_RegTypeChange(Sender: TObject);
    procedure cmb_FormStyleClick(Sender: TObject);
    procedure cmb_shFingerTypeChange(Sender: TObject);
  private
    L_bActive : Boolean;
    EmpTypeCodeList : TStringList;
    ComPortList : TStringList;
    { Private declarations }
    function GetSerialPortList(List : TStringList; const doOpenTest : Boolean = True) : LongWord;
    function EncodeCommportName(PortNum : WORD) : String;
    function DecodeCommportName(PortName : String) : WORD;

    procedure FontSetting;
    procedure FormNameSetting;
  public
    { Public declarations }
  end;

var
  fmClientConfig: TfmClientConfig;

implementation
uses
  uCommonFunction,
  uCommonVariable,
  uDBUpdate,
  uFormFunction,
  uFormVariable,
  uFormUtil,
  uMain;

{$R *.dfm}


procedure TfmClientConfig.btn_CloseClick(Sender: TObject);
begin
  Close;
end;

procedure TfmClientConfig.btn_SaveClick(Sender: TObject);
var
  nComPort : integer;
  stWorkStartTime : string;
  stWorkEndTime : string;
  chkBox : TCheckBox;
  i : integer;
  ini_fun : TiniFile;
  nCount : integer;
begin
  nComPort := 0;
  Try
    ini_fun := TiniFile.Create(G_stExeFolder + '\MIAMS.INI');
    with ini_fun do
    begin
      WriteInteger('Config','CardRegType',cmb_RegType.ItemIndex);
      WriteString('Config','CardRegIP',ed_FingerIP.Text);
      WriteString('Config','CardFingerRegPort',ed_FingerPort.Text);
      if ComPortList.Count > 0 then
      begin
        if cmb_ComPort.ItemIndex > -1 then
        begin
          if cmb_ComPort.ItemIndex = 0 then nComPort := 0
          else
          begin
            nComPort := Integer(ComPortList.Objects[cmb_ComPort.ItemIndex - 1]);
          end;
          WriteInteger('Config','CardRegPort',nComPort);
          G_nCardRegisterPort := nComPort;
        end;
      end;
      G_stShFingerRegDeviceIP := ed_shFingerIP.Text;
      G_nShFingerRegDevicePort := strtoint(ed_shFingerPort.Text);
      G_nShFingerRegDeviceID := strtoint(ed_shFingerReaderID.Text);
      G_nShFingerRegType := cmb_shFingerType.ItemIndex;

      WriteString('Config','SHCardFingerRegIP',G_stShFingerRegDeviceIP);
      WriteInteger('Config','SHCardFingerRegPort',G_nShFingerRegDevicePort);
      WriteInteger('Config','SHCardFingerRegID',G_nShFingerRegDeviceID);
      WriteInteger('Config','SHCardFingerRegType',G_nShFingerRegType);

    end;
  Finally
    ini_fun.free;
  End;

  Close;
end;

procedure TfmClientConfig.cmb_FormStyleClick(Sender: TObject);
begin
  inherited;
  case cmb_FormStyle.ItemIndex of
    0 : begin
      fmMain.AdvFormStyler1.Style := TTMSStyle(tsOffice2010Blue);
    end;
    1 : begin
      fmMain.AdvFormStyler1.Style := TTMSStyle(tsOffice2010Silver);
    end;
    2 : begin
      fmMain.AdvFormStyler1.Style := TTMSStyle(tsOffice2010Black);
    end;
    3 : begin
      fmMain.AdvFormStyler1.Style := TTMSStyle(tsOffice2013Gray);
    end;
    4 : begin
      fmMain.AdvFormStyler1.Style := TTMSStyle(tsOffice2013LightGray);
    end;
    5 : begin
      fmMain.AdvFormStyler1.Style := TTMSStyle(tsOffice2013White);
    end;
  end;
end;

procedure TfmClientConfig.cmb_RegTypeChange(Sender: TObject);
begin
  inherited;
  if cmb_RegType.ItemIndex = 0 then
  begin
    lb_cardPort.Caption := dmFormFunction.GetFormName('0','2','COMCONFIGCARDPORT');
    cmb_Comport.Visible := True;
    ed_FingerIP.Visible := False;
    ed_FingerPort.Visible := False;
    Label19.Visible := True;
    cmb_shFingerType.Visible := True;
    cmb_shFingerTypeChange(cmb_shFingerType);
  end else if cmb_RegType.ItemIndex = 1 then
  begin
    lb_cardPort.Caption := dmFormFunction.GetFormName('0','2','COMCONFIGCARDIP');
    cmb_Comport.Visible := False;
    ed_FingerIP.Visible := True;
    ed_FingerPort.Visible := True;
    ed_FingerIP.Left := cmb_Comport.Left;
    Label19.Visible := False;
    cmb_shFingerType.Visible := False;
    lb_FingerIP.Visible := False;
    ed_shFingerIP.Visible := False;
    ed_shFingerPort.Visible := False;
    lb_shFingerid.Visible := False;
    ed_shFingerReaderID.Visible := False;
  end;
end;

procedure TfmClientConfig.cmb_shFingerTypeChange(Sender: TObject);
begin
  inherited;
  if cmb_shFingerType.ItemIndex = 0 then
  begin
    lb_FingerIP.Visible := False;
    ed_shFingerIP.Visible := False;
    ed_shFingerPort.Visible := False;
    lb_shFingerid.Visible := False;
    ed_shFingerReaderID.Visible := False;
  end else if cmb_shFingerType.ItemIndex = 1 then
  begin
    lb_FingerIP.Visible := True;
    ed_shFingerIP.Visible := True;
    ed_shFingerPort.Visible := True;
    lb_shFingerid.Visible := True;
    ed_shFingerReaderID.Visible := True;
  end;

end;

procedure TfmClientConfig.FormCreate(Sender: TObject);
var
  nCount : integer;
  i : integer;
  stComPort : string;
  nIndex : integer;
  chkBox : TCheckBox;
  ini_fun : TiniFile;
begin

  EmpTypeCodeList := TStringList.Create;
  FormNameSetting;

  cmb_RegType.ItemIndex := G_nCardRegisterType;
  cmb_RegTypeChange(self);
  ed_FingerIP.Text := G_stCardRegisterIP;
  ed_shFingerIP.Text := G_stShFingerRegDeviceIP;
  ed_shFingerPort.Text := inttostr(G_nShFingerRegDevicePort);
  ed_shFingerReaderID.Text := inttostr(G_nShFingerRegDeviceID);
  cmb_shFingerType.ItemIndex := G_nShFingerRegType;
  cmb_shFingerTypeChange(cmb_shFingerType);

  ed_FingerPort.Text := G_stCardRegisterFingerPort;

  ComPortList := TStringList.Create;
  ComPortList.Clear;

  FontSetting;
end;

procedure TfmClientConfig.FormNameSetting;
begin
  Caption := dmFormFunction.GetFormName('2','1','BM6_02');
  lb_RegCardType.Caption := dmFormFunction.GetFormName('0','2','COMCONFIGCARDTYPE');
  lb_cardPort.Caption := dmFormFunction.GetFormName('0','2','COMCONFIGCARDPORT');


  tab_regPort.Caption := dmFormFunction.GetFormName('0','2','COMCONFIGREGPORTSET');

  btn_Save.Caption := dmFormFunction.GetFormName('0','2','BUTTONSAVE001');
  btn_Close.Caption := dmFormFunction.GetFormName('0','2','BUTTONMENU001');
end;

procedure TfmClientConfig.FontSetting;
begin
end;

procedure TfmClientConfig.FormActivate(Sender: TObject);
begin
  inherited;
  if L_bActive then Exit;
  L_bActive := True;

  PageControl1.ActivePageIndex := 1;
end;

procedure TfmClientConfig.FormClose(Sender: TObject;
  var Action: TCloseAction);
begin
  EmpTypeCodeList.Free;
  ComPortList.Free;
end;

function TfmClientConfig.DecodeCommportName(PortName: String): WORD;
var
 Pt : Integer;
begin
 PortName := UpperCase(PortName);
 if (Copy(PortName, 1, 3) = 'COM') then begin
    Delete(PortName, 1, 3);
    Pt := Pos(':', PortName);
    if Pt = 0 then Result := 0
       else Result := StrToInt(Copy(PortName, 1, Pt-1));
 end
 else if (Copy(PortName, 1, 7) = '\\.\COM') then begin
    Delete(PortName, 1, 7);
    Result := StrToInt(PortName);
 end
 else Result := 0;

end;

function TfmClientConfig.EncodeCommportName(PortNum: WORD): String;
begin
 if PortNum < 10
    then Result := 'COM' + IntToStr(PortNum) + ':'
    else Result := '\\.\COM'+IntToStr(PortNum);

end;

function TfmClientConfig.GetSerialPortList(List: TStringList;
  const doOpenTest: Boolean): LongWord;
type
 TArrayPORT_INFO_1 = array[0..0] Of PORT_INFO_1;
 PArrayPORT_INFO_1 = ^TArrayPORT_INFO_1;
var
{$IF USE_ENUMPORTS_API}
 PL : PArrayPORT_INFO_1;
 TotalSize, ReturnCount : LongWord;
 Buf : String;
 CommNum : WORD;
{$IFEND}
 I : LongWord;
 CHandle : THandle;
begin
 List.Clear;
{$IF USE_ENUMPORTS_API}
 EnumPorts(nil, 1, nil, 0, TotalSize, ReturnCount);
 if TotalSize < 1 then begin
    Result := 0;
    Exit;
    end;
 GetMem(PL, TotalSize);
 EnumPorts(nil, 1, PL, TotalSize, TotalSize, Result);

 if Result < 1 then begin
    FreeMem(PL);
    Exit;
    end;

 for I:=0 to Result-1 do begin
    Buf := UpperCase(PL^[I].pName);
    CommNum := DecodeCommportName(PL^[I].pName);
    if CommNum = 0 then Continue;
    List.AddObject(EncodeCommportName(CommNum), Pointer(CommNum));
    end;
{$ELSE}
 for I:=1 to 255 do List.AddObject(EncodeCommportName(I), Pointer(I));
{$IFEND}
 // Open Test
 if List.Count > 0 then for I := List.Count-1 downto 0 do begin
    CHandle := CreateFile(PChar(List[I]), GENERIC_WRITE or GENERIC_READ,
     0, nil, OPEN_EXISTING,
     FILE_ATTRIBUTE_NORMAL,
     0);
    if CHandle = INVALID_HANDLE_VALUE then begin
if doOpenTest or (GetLastError() <> ERROR_ACCESS_DENIED) then List.Delete(I);
Continue;
end;
    CloseHandle(CHandle);
    end;

 Result := List.Count;
{$IF USE_ENUMPORTS_API}
 if Assigned(PL) then FreeMem(PL);
{$IFEND}

end;


end.

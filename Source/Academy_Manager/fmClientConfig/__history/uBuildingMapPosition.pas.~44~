unit uBuildingMapPosition;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.ExtCtrls, AdvPanel, Vcl.Buttons,
  JvExControls, JvAnimatedImage, JvGIFCtrl, Vcl.StdCtrls,ADODB,ActiveX;

type
  TfmBuildingMapPosition = class(TForm)
    AdvPanel1: TAdvPanel;
    btn_Save: TSpeedButton;
    btn_Close: TSpeedButton;
    MapImage: TImage;
    JvGIFAnimator1: TJvGIFAnimator;
    Edit1: TEdit;
    procedure btn_CloseClick(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure FormActivate(Sender: TObject);
    procedure FormResize(Sender: TObject);
    procedure btn_SaveClick(Sender: TObject);
  private
    MouseDowning : Boolean;
    DragOrigin : TPoint;
    BuildingImageList : TStringList;
    { Private declarations }
    procedure LoadingBuilding;
    procedure MapPositionChange;
  public
    BuildingICONWidth : string;
    BuildingICONHeight : string;
    BuildingMapFile : string;
    { Public declarations }
  end;

var
  fmBuildingMapPosition: TfmBuildingMapPosition;

implementation
uses
  uCommonFunction,
  uCommonVariable,
  uDBFunction,
  uDBSql,
  uDataBase,
  uMapBuilding;
{$R *.dfm}

procedure TfmBuildingMapPosition.btn_CloseClick(Sender: TObject);
begin
  Close;
end;

procedure TfmBuildingMapPosition.btn_SaveClick(Sender: TObject);
var
  i : integer;
begin
  if BuildingImageList.Count < 1 then Exit;
  for i := 0 to BuildingImageList.Count - 1 do
  begin
    dmDBFunction.UpdateTB_LOCATION_BuildingPosition(TMapBuilding(BuildingImageList.Objects[i]).BuildingCode,inttostr(MapImage.Width),inttostr(MapImage.Height),
                                                    inttostr(TMapBuilding(BuildingImageList.Objects[i]).Left),inttostr(TMapBuilding(BuildingImageList.Objects[i]).top));
  end;
  Close;
end;

procedure TfmBuildingMapPosition.FormActivate(Sender: TObject);
begin
  if FileExists(BuildingMapFile) then MapImage.Picture.LoadFromFile(BuildingMapFile);
  LoadingBuilding;
  WindowState := wsMaximized;
end;

procedure TfmBuildingMapPosition.FormClose(Sender: TObject;
  var Action: TCloseAction);
begin
  BuildingImageList.Free;
end;

procedure TfmBuildingMapPosition.FormCreate(Sender: TObject);
begin
  BuildingImageList := TStringList.Create;
end;


procedure TfmBuildingMapPosition.FormResize(Sender: TObject);
begin
  if BuildingImageList.Count < 1 then Exit;
  MapPositionChange;
end;

procedure TfmBuildingMapPosition.LoadingBuilding;
var
  i : integer;
  MapBuildingImage : TMapBuilding;
  stSql : string;
  TempAdoQuery : TADOQuery;
  nIconHeight : integer;
  nIconWidth : integer;
  nCurTotWidth,nCurTotHeight : integer;
  nCurXPosition,nCurYPosition : integer;
begin
  if BuildingImageList.Count > 0 then
    for i := 0 to BuildingImageList.Count - 1 do TJvGIFAnimator(BuildingImageList.Objects[i]).Free;

  BuildingImageList.Clear;
  nIconHeight := 50;
  nIconWidth := 50;
  if isDigit(BuildingICONWidth) then nIconWidth := strtoint(BuildingICONWidth);
  if isDigit(BuildingICONHeight) then nIconHeight := strtoint(BuildingICONHeight);
  nCurTotWidth := MapImage.Width;
  nCurTotHeight := MapImage.Height;

  stSql := dmDBSql.GetTB_LOCATION_BuildingName(G_stGroupCode,'');
  Try
    CoInitialize(nil);
    TempAdoQuery := TADOQuery.Create(nil);
    TempAdoQuery.Connection := dmDataBase.ADOConnection;
    TempAdoQuery.DisableControls;

    with TempAdoQuery do
    begin
      Close;
      Sql.Clear;
      Sql.Text := stSql;

      Try
        Open;
      Except
        Exit;
      End;
      if RecordCount < 1 then Exit;
      First;
      i:=0;

      While Not Eof do
      begin
        MapBuildingImage := TMapBuilding.Create(nil);
        MapBuildingImage.Parent := JvGIFAnimator1.Parent;
        MapBuildingImage.Height := nIconHeight;
        MapBuildingImage.Width := nIconWidth;
        MapBuildingImage.ParentImageHeight := nCurTotHeight;
        MapBuildingImage.ParentImageWidth := nCurTotWidth;
        MapBuildingImage.CurX := FindField('LO_CURX').AsInteger;
        MapBuildingImage.CurY := FindField('LO_CURY').AsInteger;
        MapBuildingImage.TotH := FindField('LO_TOTHEIGHT').AsInteger;
        MapBuildingImage.TotW := FindField('LO_TOTWIDTH').AsInteger;
        nCurXPosition := 0;
        nCurYPosition := 0;
        if (MapBuildingImage.CurX * nCurTotWidth) > 0 then
           nCurXPosition := (MapBuildingImage.CurX * nCurTotWidth) div MapBuildingImage.TotW;
        if (MapBuildingImage.CurX * nCurTotWidth) > 0 then
          nCurYPosition := (MapBuildingImage.CurY * nCurTotHeight) div MapBuildingImage.TotH;
        MapBuildingImage.Left := nCurXPosition;
        MapBuildingImage.top := nCurYPosition;
        MapBuildingImage.ImageFile := G_stExeFolder + '\mapdisarm.gif';
        MapBuildingImage.Animate := True;
        MapBuildingImage.NameVisible := True;
        MapBuildingImage.BuildingName := FindField('LO_NAME').AsString;
        MapBuildingImage.BuildingCode := FindField('LO_DONGCODE').AsString;
        MapBuildingImage.DragOn := True;
        BuildingImageList.AddObject(FindField('LO_DONGCODE').AsString,MapBuildingImage);
        inc(i);
        Application.ProcessMessages;
        Next;
      end;
    end;
  Finally
    TempAdoQuery.EnableControls;
    TempAdoQuery.Free;
    CoUninitialize;
  End;
end;

procedure TfmBuildingMapPosition.MapPositionChange;
var
  i : integer;
  nCurTotWidth,nCurTotHeight : integer;
  nCurXPosition,nCurYPosition : integer;
begin
  if BuildingImageList.Count < 1 then Exit;

  nCurTotWidth := MapImage.Width;
  nCurTotHeight := MapImage.Height;
  for i := 0 to BuildingImageList.Count - 1 do
  begin
    nCurXPosition := 0;
    nCurYPosition := 0;
    if (TMapBuilding(BuildingImageList.Objects[i]).CurX * nCurTotWidth) > 0 then
       nCurXPosition := (TMapBuilding(BuildingImageList.Objects[i]).CurX * nCurTotWidth) div TMapBuilding(BuildingImageList.Objects[i]).TotW;
    if (TMapBuilding(BuildingImageList.Objects[i]).CurX * nCurTotWidth) > 0 then
      nCurYPosition := (TMapBuilding(BuildingImageList.Objects[i]).CurY * nCurTotHeight) div TMapBuilding(BuildingImageList.Objects[i]).TotH;
    TMapBuilding(BuildingImageList.Objects[i]).Left := nCurXPosition;
    TMapBuilding(BuildingImageList.Objects[i]).top := nCurYPosition;

  end;

end;

end.

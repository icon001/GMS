unit uAttendReport;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, uSubForm, CommandArray, AdvGlassButton,
  Vcl.Grids, AdvObj, BaseGrid, AdvGrid, Vcl.StdCtrls, AdvEdit, AdvSmoothLabel,
  AdvSmoothPanel, AdvOfficeTabSet, W7Classes, W7Panels,ActiveX,ADODB,
  Vcl.ComCtrls, Vcl.Menus, Vcl.ExtCtrls, AdvSplitter, AdvPanel, Vcl.ImgList,
  AdvOfficeButtons, AdvGroupBox,Data.DB,Vcl.Imaging.jpeg, AdvSmoothTabPager,
  ToolPanels, AdvOfficeTabSetStylers, AdvToolBar, AdvToolBarStylers,
  AdvGlowButton, AdvOfficePager, AdvAppStyler, AdvOfficePagerStylers,
  Vcl.Imaging.pngimage,DateUtils, AdvProgressBar,Winapi.ShellAPI, AdvCombo;

const
  con_LocalCompanyImageIndex = 0;
  con_LocalEmployeeImageIndex = 1;
  con_LocalBuildingImageIndex = 2;

type
  TfmAttendReport = class(TfmASubForm)
    BodyPanel: TW7Panel;
    pm_Work: TPopupMenu;
    AdvSmoothPanel1: TAdvSmoothPanel;
    pan_EmployeeList: TAdvSmoothPanel;
    AdvSmoothPanel2: TAdvSmoothPanel;
    sg_EmployeeList: TAdvStringGrid;
    MenuImageList16: TImageList;
    pm_EmployeeAdd: TMenuItem;
    OpenDialog1: TOpenDialog;
    ed_SearchName: TAdvEdit;
    lb_EtcDetail: TAdvSmoothLabel;
    pm_Employee: TPopupMenu;
    pm_EmUpdate: TMenuItem;
    pm_EmDelete: TMenuItem;
    ed_SerchSelectLectureCode: TAdvEdit;
    AdvOfficePager1: TAdvOfficePager;
    AdvOfficePage1: TAdvOfficePage;
    btn_minimize: TAdvGlowButton;
    btn_Close: TAdvGlowButton;
    AdvOfficePagerOfficeStyler1: TAdvOfficePagerOfficeStyler;
    AdvFormStyler1: TAdvFormStyler;
    AdvOfficeTabSetOfficeStyler1: TAdvOfficeTabSetOfficeStyler;
    lb_Search: TLabel;
    lb_SearchCount1: TAdvSmoothLabel;
    lb_SearchCount: TAdvSmoothLabel;
    lb_Count1: TAdvSmoothLabel;
    SaveDialog1: TSaveDialog;
    ProgressBar2: TProgressBar;
    pan_Message: TAdvSmoothPanel;
    AdvSmoothLabel2: TAdvSmoothLabel;
    AdvProgressBar1: TAdvProgressBar;
    btn_AccessConfirm: TAdvGlassButton;
    SearchTimer: TTimer;
    AdvSmoothLabel1: TAdvSmoothLabel;
    ed_SearchPhone: TAdvEdit;
    dt_FromDate: TDateTimePicker;
    AdvSmoothLabel3: TAdvSmoothLabel;
    dt_ToDate: TDateTimePicker;
    AdvSmoothLabel4: TAdvSmoothLabel;
    AdvSmoothLabel5: TAdvSmoothLabel;
    cmb_State: TAdvComboBox;
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure FormShow(Sender: TObject);
    procedure ed_CompanyNameKeyPress(Sender: TObject; var Key: Char);
    procedure FormCreate(Sender: TObject);
    procedure pan_EmployeeListResize(Sender: TObject);
    procedure FormResize(Sender: TObject);
    procedure btn_SaveMouseEnter(Sender: TObject);
    procedure btn_SaveMouseLeave(Sender: TObject);
    procedure sg_CardCanEditCell(Sender: TObject; ARow, ACol: Integer;
      var CanEdit: Boolean);
    procedure dt_IndateChange(Sender: TObject);
    procedure dt_OutDateChange(Sender: TObject);
    procedure sg_EmployeeListResize(Sender: TObject);
    procedure Pan_EmcodeMouseDown(Sender: TObject; Button: TMouseButton;
      Shift: TShiftState; X, Y: Integer);
    procedure Pan_EmcodeMouseUp(Sender: TObject; Button: TMouseButton;
      Shift: TShiftState; X, Y: Integer);
    procedure Pan_EmcodeMouseMove(Sender: TObject; Shift: TShiftState; X,
      Y: Integer);
    procedure sg_EmployeeListCheckBoxClick(Sender: TObject; ACol, ARow: Integer;
      State: Boolean);
    procedure btn_CloseClick(Sender: TObject);
    procedure btn_minimizeClick(Sender: TObject);
    procedure pan_FingerMouseDown(Sender: TObject; Button: TMouseButton;
      Shift: TShiftState; X, Y: Integer);
    procedure pan_emPermitAdminMouseDown(Sender: TObject; Button: TMouseButton;
      Shift: TShiftState; X, Y: Integer);
    procedure pan_PositionInfoMouseDown(Sender: TObject; Button: TMouseButton;
      Shift: TShiftState; X, Y: Integer);
    procedure btn_AccessConfirmClick(Sender: TObject);
    procedure SearchTimerTimer(Sender: TObject);
    procedure sg_LectureCodeCheckBoxClick(Sender: TObject; ACol, ARow: Integer;
      State: Boolean);
    procedure btn_LectureCompleteClick(Sender: TObject);
    procedure btn_LectureCancelClick(Sender: TObject);
    procedure pan_employeeMouseMove(Sender: TObject; Shift: TShiftState; X,
      Y: Integer);
    procedure sg_LectureEmployeeListCheckBoxClick(Sender: TObject; ACol,
      ARow: Integer; State: Boolean);
    procedure ed_SearchNameKeyUp(Sender: TObject; var Key: Word;
      Shift: TShiftState);
    procedure cmb_StateChange(Sender: TObject);
  private
    DragOrigin: TPoint;
    MouseDowning : BOOLEAN;
  private
    L_stMenuID : string;
    L_stAllName : string;
    L_stButtonCloseCaption : string;
    L_stDeleteCaption : string;
    L_stEmCodeCaption : string;
    L_stEmCompanyPhoneCaption : string;
    L_stEmEtcCaption : string;
    L_stEmHandPhoneCaption : string;
    L_stEmNameCaption : string;
    L_stCardNoCaption : string;
    L_stFingerTemplate1_1 : string;
    L_stFingerTemplate1_2 : string;
    L_stWork : string;
    L_nSelectCol : integer;
    L_nPageListMaxCount : integer;
    L_nBuildingNotPermitDoorCount : integer;     //빌딩별 미등록 권한 출입문
    L_nBuildingPermitDoorCount : integer;        //빌딩별 등록 권한 출입문
    L_nBuildingNotPermitArmAreaCount : integer;  //빌딩별 미등록 권한 방범구역
    L_nBuildingPermitArmAreaCount : integer;
    L_nUpdateEmStateIndex : integer;
    L_nPermitArmAreaCheckCount : integer;           //삭제시 방범구역 선택 갯수
    L_nLectureCodeCheckCount : integer;
    L_nNotPermitArmAreaCheckCount : integer;        //등록시 방범구역 선택 갯수
    L_nPermitDoorCheckCount : integer;           //삭제시 출입문 선택 갯수
    L_nNotPermitDoorCheckCount : integer;        //등록시 출입문 선택 갯수
    L_nEmployeeCheckCount : integer;             //
    L_bVisitEditMode : Boolean;
    L_bEmployeeGradeChange : Boolean;
    L_bFingerImageUpdate : Boolean;
    L_bFingerUse : Boolean;
    CardGubunCodeList :TStringList;
    CardSearchStateCodeList :TStringList;
    CardStateCodeList :TStringList;
    EmployeeGubunCodeList : TStringList;
    EmployeeGubunSearchCodeList : TStringList;
    EmployeeStateCodeList : TStringList;
    PosiCodeList : TStringList;
    PosiSearchCodeList : TStringList;
    WorkCardGubunCodeList :TStringList;
    WorkCardStateCodeList :TStringList;
    AddCardNoList : TStringList; //추가되는 카드번호 리스트를 가지고 있자
    ChangeCardNoList : TStringList; //변경되는 카드번호 리스트를 가지고 있자
    DeleteCardNoList : TStringList; //삭제 카드 리스트를 가지고 있자
    BuildingArmAreaCodeList : TStringList; //빌딩별 방범구역 코드 리스트를 가지고 있자.
    BuildingDoorCodeList : TStringList; //빌딩별 출입문 코드 리스트를 가지고 있자.
    TuitionOffCodeList : TStringList;
    procedure FormNameSetting;
    procedure SearchEmployeeList(aCode:string;aTopRow:integer = 0);
  private
    L_bFormClose : Boolean;
    L_bSearchBreak : Boolean;
    L_bSearchEnd : Boolean;
    FFingerDeviceType: Boolean;
    FFingerDeviceID: integer;
    FFingerUserID: String;
    FFingerEMSeq: integer;
    FFingerDeviceSeq: integer;
    FFingerDeviceIP: string;
    { Private declarations }

    function JpegStartsInBlob(PicField:TBlobField):integer;
    procedure AdvStrinGridSetAllCheck(Sender: TObject;bchkState:Boolean);
  public
    { Public declarations }
    procedure FormSearchEnable(aEnabled:Boolean);
    procedure Form_Close;
    procedure FontSetting;
    procedure FormChangeEvent(aNumber:integer);
    procedure FormGradeRefresh;
    procedure FormIDSetting(aID:string);
    procedure CardRegistEvent(aCardNo:string);
  public
    property FingerDeviceID : integer read FFingerDeviceID write FFingerDeviceID;
    property FingerDeviceSeq : integer read FFingerDeviceSeq write FFingerDeviceSeq;
    property FingerDeviceIP : string read FFingerDeviceIP write FFingerDeviceIP;
    property FingerUserID : String read FFingerUserID write FFingerUserID;
    property FingerEMSeq : integer read FFingerEMSeq write FFingerEMSeq;
  end;

var
  fmAttendReport: TfmAttendReport;

implementation
uses
  uComboBoxCodeLoad,
  uCommonFunction,
  uCommonVariable,
  uEmployeeRelay,
  uFormFunction,
  uFormVariable,
  uDataBase,
  uDBFormMessage,
  uDBFunction,
  uDBInsert,
  uDBUpdate,
  uDBDelete,
  uDBCardPermit,
  uDBSelect,
  uSupremaFinger,
  uFingerVariable,
  uFormUtil,
  uMain;
{$R *.dfm}

procedure TfmAttendReport.AdvStrinGridSetAllCheck(Sender: TObject;
  bchkState: Boolean);
var
  i : integer;
begin
    for i:= 1 to (Sender as TAdvStringGrid).RowCount - 1  do
    begin
      (Sender as TAdvStringGrid).SetCheckBoxState(0,i,bchkState);
    end;
end;

procedure TfmAttendReport.btn_AccessConfirmClick(Sender: TObject);
begin
  inherited;
  L_bSearchBreak := True;
  Pan_Message.Visible := False;

end;

procedure TfmAttendReport.btn_CloseClick(Sender: TObject);
begin
  inherited;
  Close;
end;

procedure TfmAttendReport.btn_LectureCancelClick(Sender: TObject);
var
  i : integer;
  bCheckState : Boolean;
  stLectureSeq : string;
  stEmSeq : string;
begin
  inherited;
  if L_nEmployeeCheckCount < 1 then
  begin
    showmessage(dmFormMessage.GetMessage('NOTSELECTEMPLOYEE'));
    Exit;
  end;
  Try
    with sg_EmployeeList do
    begin
      for i := 1 to RowCount - 1 do
      begin
        GetCheckBoxState(0,i, bCheckState);
        if bCheckState then
        begin
          stEmSeq := cells[5,i];
          stLectureSeq := cells[6,i];
          dmDBUpdate.UpdateTB_EMPLOYEELecture_Field_IntValue(stEmSeq,stLectureSeq,'EL_STATE','2');
          dmDBUpdate.UpdateTB_EMPLOYEELecture_Field_StringValue(stEmSeq,stLectureSeq,'EL_ENDDATE',formatDateTime('yyyymmdd',now));
          dmDBInsert.InsertIntoTB_EMPLOYEELectureHIS_Value(stEmSeq,stLectureSeq,Cells[7,i],'','2',FormatDateTime('yyyymmdd',now),'');
        end;
        Application.ProcessMessages;
      end;
    end;
  Finally
  End;
end;

procedure TfmAttendReport.btn_LectureCompleteClick(Sender: TObject);
var
  i : integer;
  bCheckState : Boolean;
  stLectureSeq : string;
  stEmSeq : string;
begin
  inherited;
  if L_nEmployeeCheckCount < 1 then
  begin
    showmessage(dmFormMessage.GetMessage('NOTSELECTEMPLOYEE'));
    Exit;
  end;
  Try
    with sg_EmployeeList do
    begin
      for i := 1 to RowCount - 1 do
      begin
        GetCheckBoxState(0,i, bCheckState);
        if bCheckState then
        begin
          stEmSeq := cells[5,i];
          stLectureSeq := cells[6,i];
          dmDBUpdate.UpdateTB_EMPLOYEELecture_Field_IntValue(stEmSeq,stLectureSeq,'EL_STATE','3');
          dmDBUpdate.UpdateTB_EMPLOYEELecture_Field_StringValue(stEmSeq,stLectureSeq,'EL_ENDDATE',formatDateTime('yyyymmdd',now));
          dmDBInsert.InsertIntoTB_EMPLOYEELectureHIS_Value(stEmSeq,stLectureSeq,Cells[7,i],'','3',FormatDateTime('yyyymmdd',now),'');
        end;
        Application.ProcessMessages;
      end;
    end;
  Finally
  End;

end;

procedure TfmAttendReport.btn_minimizeClick(Sender: TObject);
begin
  inherited;
  windowState := wsNormal;

end;

procedure TfmAttendReport.btn_SaveMouseEnter(Sender: TObject);
begin
  inherited;
  TAdvGlassButton(Sender).ShineColor := clYellow;
end;

procedure TfmAttendReport.btn_SaveMouseLeave(Sender: TObject);
begin
  inherited;
  TAdvGlassButton(Sender).ShineColor := clGray;
end;

procedure TfmAttendReport.CardRegistEvent(aCardNo: string);
begin

end;


procedure TfmAttendReport.cmb_StateChange(Sender: TObject);
begin
  inherited;
  SearchEmployeeList('');
end;

procedure TfmAttendReport.dt_IndateChange(Sender: TObject);
begin
  inherited;
  L_bEmployeeGradeChange := True;  //유효기간 변경시 카드데이터 재전송
end;

procedure TfmAttendReport.dt_OutDateChange(Sender: TObject);
begin
  inherited;
  L_bEmployeeGradeChange := True; //유효기간 변경시 카드데이터 재전송
end;

procedure TfmAttendReport.ed_CompanyNameKeyPress(Sender: TObject; var Key: Char);
begin
  inherited;
  if Key = #13 then
  begin
    Key := #0;
  end;
end;

procedure TfmAttendReport.ed_SearchNameKeyUp(Sender: TObject; var Key: Word;
  Shift: TShiftState);
begin
  inherited;
  SearchEmployeeList('');
end;

procedure TfmAttendReport.FontSetting;
begin
(*  dmFormUtil.TravelFormFontSetting(self,G_stFontName,inttostr(G_nFontSize));
  dmFormUtil.TravelAdvOfficeTabSetOfficeStylerFontSetting(AdvOfficeTabSetOfficeStyler1, G_stFontName,inttostr(G_nFontSize));
  dmFormUtil.FormAdvOfficeTabSetOfficeStylerSetting(AdvOfficeTabSetOfficeStyler1,G_stFormStyle);
  dmFormUtil.FormAdvToolBarOfficeStylerSetting(AdvToolBarOfficeStyler1,G_stFormStyle);
  dmFormUtil.FormStyleSetting(self,AdvToolBarOfficeStyler1);
*)
end;

procedure TfmAttendReport.FormChangeEvent(aNumber: integer);
var
  stSelectCode1 : string;
  stSelectCode2 : string;
  nIndex : integer;
begin
  case aNumber of
    con_FormBMOSCOMPANYCODE : begin
    end;
    con_FormBMOSBUILDINGCODE : begin
//      LoadBuildingTreeView('',tv_buildingName,tv_buildingCode,con_LocalBuildingImageIndex);
    end;
    con_FormBMOSPOSICODE : begin

    end;
    con_FormBMOSEMPLOYEEGUBUN : begin
    end;

  end;
end;

procedure TfmAttendReport.FormClose(Sender: TObject; var Action: TCloseAction);
begin
  inherited;
  if dmSupremaFinger.Connected then
  begin
    dmSupremaFinger.SocketOPEN := False;
  end;
  //dmSupremaFinger.Free;
  L_bFormClose := True;
  L_bSearchBreak := True;
  Delay(1000);

  PosiCodeList.Free;
  PosiSearchCodeList.Free;
  EmployeeGubunCodeList.Free;
  EmployeeGubunSearchCodeList.Free;
  EmployeeStateCodeList.Free;
  CardGubunCodeList.Free;
  WorkCardGubunCodeList.Free;
  WorkCardStateCodeList.Free;
  AddCardNoList.Free;
  ChangeCardNoList.Free;
  CardStateCodeList.Free;
  CardSearchStateCodeList.Free;
  DeleteCardNoList.Free;
  BuildingDoorCodeList.Free;
  BuildingArmAreaCodeList.Free;
  TuitionOffCodeList.Free;

  fmMain.FORMENABLE(con_FormBMOSEMPLOYEE,'FALSE');

  Action := caFree;
end;

procedure TfmAttendReport.FormCreate(Sender: TObject);
begin
  inherited;
  PosiCodeList := TStringList.Create;
  PosiSearchCodeList := TStringList.Create;
  EmployeeGubunCodeList:= TStringList.Create;
  EmployeeGubunSearchCodeList := TStringList.Create;
  EmployeeStateCodeList := TStringList.Create;
  CardGubunCodeList := TStringList.Create;
  WorkCardGubunCodeList := TStringList.Create;
  WorkCardStateCodeList := TStringList.Create;
  AddCardNoList := TStringList.Create;
  ChangeCardNoList:= TStringList.Create;
  CardStateCodeList := TStringList.Create;
  CardSearchStateCodeList := TStringList.Create;
  DeleteCardNoList := TStringList.Create;
  BuildingDoorCodeList := TStringList.Create;
  BuildingArmAreaCodeList := TStringList.Create;

  TuitionOffCodeList := TStringList.Create;
  FontSetting;
  L_bSearchEnd := True;

  dt_FromDate.Date := Now - 30;
  dt_ToDate.Date := Now ;
  //dmSupremaFinger := TdmSupremaFinger.Create(nil);

end;

procedure TfmAttendReport.FormGradeRefresh;
begin
  if IsUpdateGrade or IsDeleteGrade then sg_EmployeeList.PopupMenu := pm_Employee
  else sg_EmployeeList.PopupMenu := nil;
  pm_EmployeeAdd.Enabled := IsInsertGrade;
  pm_EmDelete.Enabled := IsDeleteGrade;
  pm_EmUpdate.Enabled := IsUpdateGrade;
end;

procedure TfmAttendReport.FormIDSetting(aID: string);
begin
  L_stMenuID := aID;
end;

procedure TfmAttendReport.FormNameSetting;
begin
  AdvOfficePage1.Caption := dmFormFunction.GetFormName('0','2','BUTTONMENU002');


  L_stDeleteCaption := dmFormFunction.GetFormName('0','2','BUTTONDEL001');
  L_stButtonCloseCaption := dmFormFunction.GetFormName('0','2','BUTTONMENU001');
  L_stCardNoCaption := dmFormFunction.GetFormName('0','2','COMMONCARDNUMBER');
  pm_EmUpdate.Caption := dmFormFunction.GetFormName('0','2','COMMONUPDATE');
  L_stAllName := dmFormFunction.GetFormName('0','2','COMMONALLNAME');

  L_stEmCodeCaption := dmFormFunction.GetFormName('0','2','COMMONEMPLOYEECODE');
  L_stEmNameCaption:= dmFormFunction.GetFormName('0','2','COMMONEMPLOYEENAME');
  L_stEmHandPhoneCaption:= dmFormFunction.GetFormName('0','2','COMMONEMPLOYEEHANDPHONE');
  L_stEmCompanyPhoneCaption:= dmFormFunction.GetFormName('0','2','COMMONEMPLOYEECOMPANYPHONE');
  L_stEmEtcCaption:= dmFormFunction.GetFormName('0','2','COMMONEMPLOYEEETCINFO');
  lb_Count1.Caption.Text := dmFormFunction.GetFormName('0','2','COMMONCOUNT');
  lb_SearchCount1.Caption.Text := dmFormFunction.GetFormName('0','2','COMMONSEARCHCOUNT01');
end;

procedure TfmAttendReport.FormResize(Sender: TObject);
begin
  inherited;

  btn_Close.Left := AdvOfficePager1.Width - btn_Close.Width - 10;
  btn_minimize.Left := btn_Close.Left - btn_minimize.Width - 2;

  if Windowstate = wsMaximized then
  begin
    btn_minimize.Visible := False;
    btn_Close.Visible := True;
  end else
  begin
    btn_minimize.Visible := False;
    btn_Close.Visible := False;
  end;

  pan_Message.Left := (Width div 2) - (pan_Message.Width div 2);
  pan_Message.Top := (Height div 2) - (pan_Message.Height div 2);

  pan_EmployeeListResize(pan_EmployeeList);

end;

procedure TfmAttendReport.FormSearchEnable(aEnabled: Boolean);
begin
end;

procedure TfmAttendReport.FormShow(Sender: TObject);
begin
  inherited;
  WindowState := wsMaximized;

  FormNameSetting;
  fmMain.FORMENABLE(con_FormBMOSEMPLOYEE,'TRUE');

  if L_bFormClose or G_bApplicationTerminate then Exit;

  L_bVisitEditMode := True;

  SearchEmployeeList('');  //tv_ListClick 에서 먼저 조회 함
end;

procedure TfmAttendReport.Form_Close;
begin
  Close;
end;

function TfmAttendReport.JpegStartsInBlob(PicField: TBlobField): integer;
var
  bS : TADOBlobStream;
  buffer : Word;
  hx : string;
begin
  Result := -1;
  bS := TADOBlobStream.Create(PicField, bmRead);
  try
    while (Result = -1) and
      (bS.Position + 1 < bS.Size) do
    begin
      bS.ReadBuffer(buffer, 1);
      hx:=IntToHex(buffer, 2);
      if hx = 'FF' then begin
        bS.ReadBuffer(buffer, 1);
        hx:=IntToHex(buffer, 2);
        if hx = 'D8' then Result := bS.Position - 2
        else if hx = 'FF' then
        bS.Position := bS.Position-1;
      end; //if
    end; //while
  finally
    bS.Free
  end; //try
end;

procedure TfmAttendReport.Pan_EmcodeMouseDown(Sender: TObject; Button: TMouseButton;
  Shift: TShiftState; X, Y: Integer);
begin
  inherited;
(*    if (Button = mbLeft) and (MouseDowning = False) then
    begin
        // DRAG POINT 저장
        DragOrigin := Point (X,Y);
        // MOUSE DOWN = TRUE 설정
        MouseDowning := True;
    end;
*)
end;

procedure TfmAttendReport.Pan_EmcodeMouseMove(Sender: TObject; Shift: TShiftState;
  X, Y: Integer);
const
 SC_DragMove = $F012;
begin
 ReleaseCapture;
 (sender as TWinControl).perform(WM_SysCommand, SC_DragMove,0);
(*  inherited;
    // MOUSE DOWN = TRUE CHECK
    if (MouseDowning = True) then
    begin
        // IMAGE TOP 위치 설정
        (Sender as TAdvSmoothPanel).Top := (Sender as TAdvSmoothPanel).Top + Y - DragOrigin.Y;
        // IMAGE LEFT 위치 설정
        (Sender as TAdvSmoothPanel).Left := (Sender as TAdvSmoothPanel).Left + X - DragOrigin.X;
    end;
 *)
end;

procedure TfmAttendReport.Pan_EmcodeMouseUp(Sender: TObject; Button: TMouseButton;
  Shift: TShiftState; X, Y: Integer);
begin
  inherited;
    // MOUSE DOWN = FALSE 설정
//    MouseDowning := False;
end;

procedure TfmAttendReport.pan_emPermitAdminMouseDown(Sender: TObject;
  Button: TMouseButton; Shift: TShiftState; X, Y: Integer);
const
 SC_DragMove = $F012;
begin
 ReleaseCapture;
 (sender as TWinControl).perform(WM_SysCommand, SC_DragMove,0);

end;

procedure TfmAttendReport.pan_EmployeeListResize(Sender: TObject);
begin
  inherited;
  sg_EmployeeList.Width := pan_EmployeeList.Width - sg_EmployeeList.Left - 20;
  sg_EmployeeList.Height := pan_EmployeeList.Height - sg_EmployeeList.Top - 50;

end;

procedure TfmAttendReport.pan_employeeMouseMove(Sender: TObject;
  Shift: TShiftState; X, Y: Integer);
const
 SC_DragMove = $F012;
begin
 ReleaseCapture;
 (sender as TWinControl).perform(WM_SysCommand, SC_DragMove,0);

end;

procedure TfmAttendReport.pan_FingerMouseDown(Sender: TObject; Button: TMouseButton;
  Shift: TShiftState; X, Y: Integer);
const
 SC_DragMove = $F012;
begin
 ReleaseCapture;
 (sender as TWinControl).perform(WM_SysCommand, SC_DragMove,0);
end;

procedure TfmAttendReport.pan_PositionInfoMouseDown(Sender: TObject;
  Button: TMouseButton; Shift: TShiftState; X, Y: Integer);
const
 SC_DragMove = $F012;
begin
(* ReleaseCapture;
 (sender as TWinControl).perform(WM_SysCommand, SC_DragMove,0);
 *)
end;




procedure TfmAttendReport.SearchEmployeeList(aCode: string; aTopRow: integer);
var
  stSql : string;
  TempAdoQuery : TADOQuery;
  nRow : integer;
  stTemp : string;
begin

  GridInit(sg_EmployeeList,5,2,False);

  stSql := ' Select a.*,b.EM_NAME,b.EM_BIRTHDAY,b.EM_REGDATE,b.EM_COMPANYPHONE,b.EM_SCHOOL ';
  stSql := stSql + ' from TB_ACademyAttendSummary a ';
  stSql := stSql + ' inner Join TB_EMPLOYEE b ';
  stSql := stSql + ' ON (a.EM_SEQ = b.EM_SEQ ) ';
  stSql := stSql + ' Where a.GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND a.AS_DATE BETWEEN ''' + formatDateTime('yyyymmdd',dt_FromDate.Date) + ''' and ''' + formatDateTime('yyyymmdd',dt_ToDate.Date) + '''';
  stSql := stSql + ' AND a.AS_ATTYPE > -1 ';
  if cmb_State.ItemIndex > 0 then
    stSql := stSql +  ' AND a.AS_ATTYPE = ' + inttostr(cmb_State.ItemIndex) + ' ';
  if ed_SearchName.Text <> '' then
    stSql := stSql + ' AND b.EM_NAME Like N''%' + ed_SearchName.Text + '%'' ';
  if ed_SearchPhone.Text <> '' then
    stSql := stSql + ' AND (b.EM_HANDPHONE Like ''%' + ed_SearchPhone.Text + '%'' OR b.EM_COMPANYPHONE Like ''%' + ed_SearchPhone.Text + '%'' ) ';
  stSql := stSql + ' Order by a.AS_DATE,b.EM_NAME ';

  Try
    if (G_nFormEnable = 1) then FormSearchEnable(False);
    CoInitialize(nil);
    TempAdoQuery := TADOQuery.Create(nil);
    TempAdoQuery.Connection := dmDataBase.ADOConnection;

    with TempAdoQuery do
    begin
      Close;
      sql.Text := stSql;
      Try
        Open;
      Except
        dmDataBase.DBConnected := False;
        Exit;
      End;
      lb_SearchCount.Caption.Text := FormatFloat('#,##0',recordCount);
      if recordcount < 1 then Exit;

       pan_Message.Visible := G_bDataLoadingView;
      AdvProgressBar1.Max := recordcount;
      AdvProgressBar1.Position := 0;
      with sg_EmployeeList do
      begin
        nRow := 1;
        RowCount := RecordCount + 1;
        while Not Eof do
        begin
          if L_bSearchBreak then
          begin
            Exit;
          end;
          if L_bFormClose or G_bApplicationTerminate then Exit;

(*
날짜
이름
등원상태
등원시간
하원시간
*)
          cells[0,nRow] := MakeDateTimeStr(FindField('AS_DATE').AsString);        //날짜
          cells[1,nRow] := FindField('EM_NAME').AsString;        //학생명

          case FindField('AS_ATTYPE').AsInteger of
            0 : begin
              cells[2,nRow] := '미등원';
            end;
            1 : begin
              cells[2,nRow] := '등원';
            end;
            2 : begin
              cells[2,nRow] := '보강중';
            end;
            3 : begin
              cells[2,nRow] := '보강완료';
            end;
          end;
          cells[3,nRow] := MakeDatetimeStr(FindField('AS_INTIME').AsString);    //등원시간
          cells[4,nRow] := MakeDatetimeStr(FindField('AS_OUTTIME').AsString);    //하원시간
          cells[5,nRow] := FindField('AS_DATE').AsString;
          cells[6,nRow] := FindField('EM_SEQ').AsString;

          nRow := nRow + 1;
          Application.ProcessMessages;
          Next;
        end;
      end;

    end;
  Finally
    L_bSearchEnd := True;
    FormSearchEnable(True);
    pan_Message.Visible := False;
    TempAdoQuery.Free;
    CoUninitialize;
  End;

end;


procedure TfmAttendReport.SearchTimerTimer(Sender: TObject);
begin
  inherited;
  SearchTimer.Enabled := False;
end;


procedure TfmAttendReport.sg_CardCanEditCell(Sender: TObject; ARow, ACol: Integer;
  var CanEdit: Boolean);
begin
  if Not L_bVisitEditMode then Exit;
  if ACol = 0 then canEDIT := True
  else  canEDIT := False;

end;

procedure TfmAttendReport.sg_EmployeeListCheckBoxClick(Sender: TObject; ACol,
  ARow: Integer; State: Boolean);
var
  stOperator : string;
  stInstate,stOutstate : string;
  stSMSMessage : string;
  stPhoneNum : string;
begin
  inherited;
  if ACol = 6 then //출석
  begin
    if Not State then //출석을 해제 하는 경우
    begin
      //stOperator := dmDBFunction.GetTB_ACademyAttend_InOperator(FormatDateTime('yyyymmdd',now),sg_EmployeeList.Cells[10,ARow]);
      if stOperator = 'SYSTEM' then
      begin
        showmessage('지문으로 찍은 데이터는 출결 처리 할 수 없습니다.');
        sg_EmployeeList.SetCheckBoxState(ACol,ARow,True);
        Exit;
      end;
      if Not G_bIsMaster and (stOperator <> G_stAdminUserID) then
      begin
        showmessage('다른 사용자가 관리한 데이터는 출결 처리 할 수 없습니다.');
        sg_EmployeeList.SetCheckBoxState(ACol,ARow,True);
        Exit;
      end;
      dmDBUpdate.UpdateTB_ACademyAttend_Field_StringValue(FormatDateTime('yyyymmdd',now),sg_EmployeeList.Cells[10,ARow],'AA_INTIME','');
      dmDBUpdate.UpdateTB_ACademyAttend_Field_StringValue(FormatDateTime('yyyymmdd',now),sg_EmployeeList.Cells[10,ARow],'AA_INOPERATOR',G_stAdminUserID);
      if dmDBFunction.CheckTB_AcademySMSSend_SendComplete(FormatDateTime('yyyymmdd',now),sg_EmployeeList.Cells[10,ARow],'1','1') = 1 then
      begin
        showmessage('이미 학부모님에게 문자 전송이 완료 되었습니다. 등원취소 문자를 전송하시기 바랍니다.');
      end else
      begin
        //여기에서 SMS 전송하는거 중지하자.
        dmDBDelete.DeleteTB_AcademySMSSend_EMSEQ(FormatDateTime('yyyymmdd',now),sg_EmployeeList.Cells[10,ARow],'1','1');
      end;
    end else  //출석을 체크 하는 경우
    begin
      if dmDBFunction.CheckTB_ACademyAttend_Key(FormatDateTime('yyyymmdd',now),sg_EmployeeList.Cells[10,ARow],stInstate,stOutstate) = 1 then
      begin
        if stInstate = '' then  //혹시라도 지문리더로 찍었는데 여기서 표시 안되는 경우를 대비해서...
        begin
          dmDBUpdate.UpdateTB_ACademyAttend_Field_StringValue(FormatDateTime('yyyymmdd',now),sg_EmployeeList.Cells[10,ARow],'AA_INTIME',FormatDateTime('hhnnss',now));
          dmDBUpdate.UpdateTB_ACademyAttend_Field_StringValue(FormatDateTime('yyyymmdd',now),sg_EmployeeList.Cells[10,ARow],'AA_INOPERATOR',G_stAdminUserID);
        end;
      end else
      begin
        dmDBInsert.InsertIntoTB_ACademyAttend_Value(FormatDateTime('yyyymmdd',now),sg_EmployeeList.Cells[10,ARow],FormatDateTime('hhnnss',now),'',G_stAdminUserID,'');
      end;
      if dmDBFunction.CheckTB_AcademySMSSend_EmSeq(FormatDateTime('yyyymmdd',now),sg_EmployeeList.Cells[10,ARow],'1','1') <> 1 then //한번 전송한 경우에는 전송하지 말자.
      begin
        stSMSMessage := dmDBFunction.GetTB_AcademySMSMessage_Message('1','1');
        stSMSMessage := stringReplace(stSMSMessage,'$NAME',sg_EmployeeList.Cells[2,ARow],[rfReplaceAll]);
        stPhoneNum := dmDBFunction.GetTB_EMPLOYEE_CompanyPhone(sg_EmployeeList.Cells[10,ARow]);
        if (stSMSMessage <> '') and (stPhoneNum <> '') then
        begin
          dmDBInsert.InsertIntoTB_ACademySMSSend_Value(FormatDateTime('yyyymmdd',now),sg_EmployeeList.Cells[10,ARow],'1','1',stPhoneNum,stSMSMessage,'N',FormatDateTime('yyyymmddhhnnsszzz',now));
        end;
      end;
    end;
  end else if ACol = 7 then  //퇴실
  begin
    if Not State then //퇴실을 해제 하는 경우
    begin
      stOperator := dmDBFunction.GetTB_ACademyAttend_OutOperator(FormatDateTime('yyyymmdd',now),sg_EmployeeList.Cells[10,ARow]);
      if stOperator = 'SYSTEM' then
      begin
        showmessage('지문으로 찍은 데이터는 출결 처리 할 수 없습니다.');
        sg_EmployeeList.SetCheckBoxState(ACol,ARow,True);
        Exit;
      end;
      if Not G_bIsMaster and (stOperator <> G_stAdminUserID) then
      begin
        showmessage('다른 사용자가 관리한 데이터는 출결 처리 할 수 없습니다.');
        sg_EmployeeList.SetCheckBoxState(ACol,ARow,True);
        Exit;
      end;
      dmDBUpdate.UpdateTB_ACademyAttend_Field_StringValue(FormatDateTime('yyyymmdd',now),sg_EmployeeList.Cells[10,ARow],'AA_OUTTIME','');
      dmDBUpdate.UpdateTB_ACademyAttend_Field_StringValue(FormatDateTime('yyyymmdd',now),sg_EmployeeList.Cells[10,ARow],'AA_OUTOPERATOR',G_stAdminUserID);
      if dmDBFunction.CheckTB_AcademySMSSend_SendComplete(FormatDateTime('yyyymmdd',now),sg_EmployeeList.Cells[10,ARow],'1','2') = 1 then
      begin
        showmessage('이미 학부모님에게 문자 전송이 완료 되었습니다. 하원취소 문자를 전송하시기 바랍니다.');
      end else
      begin
        //여기에서 SMS 전송하는거 중지하자.
        dmDBDelete.DeleteTB_AcademySMSSend_EMSEQ(FormatDateTime('yyyymmdd',now),sg_EmployeeList.Cells[10,ARow],'1','2');
      end;
    end else  //하원을 체크 하는 경우
    begin
      if dmDBFunction.CheckTB_ACademyAttend_Key(FormatDateTime('yyyymmdd',now),sg_EmployeeList.Cells[10,ARow],stInstate,stOutstate) = 1 then
      begin
        if stInstate = '' then
        begin
          sg_EmployeeList.SetCheckBoxState(ACol,ARow,False);
          showmessage('등원하지 않은 학생을 하원처리 할 수 없습니다.');
          Exit;
        end;
        //if stOutstate = '' then  //혹시라도 지문리더로 찍었는데 여기서 표시 안되는 경우를 대비해서...  하원시에는 마지막 입력시간을 가져가자.
        begin
          dmDBUpdate.UpdateTB_ACademyAttend_Field_StringValue(FormatDateTime('yyyymmdd',now),sg_EmployeeList.Cells[10,ARow],'AA_OUTTIME',FormatDateTime('hhnnss',now));
          dmDBUpdate.UpdateTB_ACademyAttend_Field_StringValue(FormatDateTime('yyyymmdd',now),sg_EmployeeList.Cells[10,ARow],'AA_OUTOPERATOR',G_stAdminUserID);
        end;
      end else
      begin
        sg_EmployeeList.SetCheckBoxState(ACol,ARow,False);
        showmessage('등원하지 않은 학생을 하원처리 할 수 없습니다.');
        Exit;
        //dmDBInsert.InsertIntoTB_ACademyAttend_Value(FormatDateTime('yyyymmdd',now),sg_EmployeeList.Cells[10,ARow],'',FormatDateTime('hhnnss',now),G_stAdminUserID,'');
      end;
      if dmDBFunction.CheckTB_AcademySMSSend_EmSeq(FormatDateTime('yyyymmdd',now),sg_EmployeeList.Cells[10,ARow],'1','2') <> 1 then //한번 전송한 경우에는 전송하지 말자.
      begin
        stSMSMessage := dmDBFunction.GetTB_AcademySMSMessage_Message('1','2');
        stSMSMessage := stringReplace(stSMSMessage,'$NAME',sg_EmployeeList.Cells[2,ARow],[rfReplaceAll]);
        stPhoneNum := dmDBFunction.GetTB_EMPLOYEE_CompanyPhone(sg_EmployeeList.Cells[10,ARow]);
        if (stSMSMessage <> '') and (stPhoneNum <> '') then
        begin
          dmDBInsert.InsertIntoTB_ACademySMSSend_Value(FormatDateTime('yyyymmdd',now),sg_EmployeeList.Cells[10,ARow],'1','2',stPhoneNum,stSMSMessage,'N',FormatDateTime('yyyymmddhhnnsszzz',now));
        end;
      end;
    end;
  end;

end;

procedure TfmAttendReport.sg_EmployeeListResize(Sender: TObject);
begin
  inherited;
  L_nPageListMaxCount := sg_EmployeeList.Height div sg_EmployeeList.DefaultRowHeight;
end;

procedure TfmAttendReport.sg_LectureCodeCheckBoxClick(Sender: TObject; ACol,
  ARow: Integer; State: Boolean);
begin
  inherited;
  if ARow = 0 then //전체선택 또는 해제
  begin
    if State then L_nLectureCodeCheckCount := (Sender as TAdvStringGrid).RowCount - 1
    else L_nLectureCodeCheckCount := 0;
    AdvStrinGridSetAllCheck(Sender,State);
  end else
  begin
    if State then L_nLectureCodeCheckCount := L_nLectureCodeCheckCount + 1
    else L_nLectureCodeCheckCount := L_nLectureCodeCheckCount - 1 ;
  end;

end;

procedure TfmAttendReport.sg_LectureEmployeeListCheckBoxClick(Sender: TObject;
  ACol, ARow: Integer; State: Boolean);
begin
  inherited;
  if ARow = 0 then //전체선택 또는 해제
  begin
    if State then L_nLectureCodeCheckCount := (Sender as TAdvStringGrid).RowCount - 1
    else L_nLectureCodeCheckCount := 0;
    AdvStrinGridSetAllCheck(Sender,State);
  end else
  begin
    if State then L_nLectureCodeCheckCount := L_nLectureCodeCheckCount + 1
    else L_nLectureCodeCheckCount := L_nLectureCodeCheckCount - 1 ;
  end;

end;

initialization
  RegisterClass(TfmAttendReport);
Finalization
  UnRegisterClass(TfmAttendReport);

end.

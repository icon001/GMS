unit uLectureManager;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, uSubForm, CommandArray, AdvGlassButton,
  Vcl.Grids, AdvObj, BaseGrid, AdvGrid, Vcl.StdCtrls, AdvEdit, AdvSmoothLabel,
  AdvSmoothPanel, AdvOfficeTabSet, W7Classes, W7Panels,ActiveX,ADODB,
  Vcl.ComCtrls, Vcl.Menus, Vcl.ExtCtrls, AdvSplitter, AdvPanel, Vcl.ImgList,
  AdvOfficeButtons, AdvGroupBox,Data.DB,Vcl.Imaging.jpeg, AdvSmoothTabPager,
  ToolPanels, AdvOfficeTabSetStylers, AdvToolBar, AdvToolBarStylers,
  AdvGlowButton, AdvOfficePager, AdvAppStyler, AdvOfficePagerStylers,
  Vcl.Imaging.pngimage,DateUtils, AdvProgressBar,Winapi.ShellAPI, AdvCombo;

const
  con_LocalCompanyImageIndex = 0;
  con_LocalEmployeeImageIndex = 1;
  con_LocalBuildingImageIndex = 2;

type
  TfmLectureManager = class(TfmASubForm)
    BodyPanel: TW7Panel;
    List: TAdvSmoothPanel;
    pm_Work: TPopupMenu;
    AdvSplitter1: TAdvSplitter;
    AdvSmoothPanel1: TAdvSmoothPanel;
    pan_EmployeeList: TAdvSmoothPanel;
    AdvSmoothPanel2: TAdvSmoothPanel;
    sg_EmployeeList: TAdvStringGrid;
    MenuImageList16: TImageList;
    pm_EmployeeAdd: TMenuItem;
    OpenDialog1: TOpenDialog;
    ed_SearchName: TAdvEdit;
    lb_EtcDetail: TAdvSmoothLabel;
    pm_Employee: TPopupMenu;
    pm_EmUpdate: TMenuItem;
    pm_EmDelete: TMenuItem;
    ed_SerchSelectLectureCode: TAdvEdit;
    AdvOfficePager1: TAdvOfficePager;
    AdvOfficePage1: TAdvOfficePage;
    btn_minimize: TAdvGlowButton;
    btn_Close: TAdvGlowButton;
    lb_List: TLabel;
    AdvOfficePagerOfficeStyler1: TAdvOfficePagerOfficeStyler;
    AdvFormStyler1: TAdvFormStyler;
    AdvOfficeTabSetOfficeStyler1: TAdvOfficeTabSetOfficeStyler;
    lb_LectureName: TLabel;
    btn_LectureRegist: TAdvGlowButton;
    btn_LectureComplete: TAdvGlowButton;
    lb_SearchCount1: TAdvSmoothLabel;
    lb_SearchCount: TAdvSmoothLabel;
    lb_Count1: TAdvSmoothLabel;
    SaveDialog1: TSaveDialog;
    ProgressBar2: TProgressBar;
    pan_Message: TAdvSmoothPanel;
    AdvSmoothLabel2: TAdvSmoothLabel;
    AdvProgressBar1: TAdvProgressBar;
    btn_AccessConfirm: TAdvGlassButton;
    btn_LectureCancel: TAdvGlowButton;
    SearchTimer: TTimer;
    AdvSmoothLabel1: TAdvSmoothLabel;
    ed_SearchPhone: TAdvEdit;
    ed_SearchLeactureClassName: TAdvEdit;
    btn_LectureClassSelect: TAdvGlowButton;
    Label3: TLabel;
    sg_LectureCode: TAdvStringGrid;
    tv_LectureClassName: TTreeView;
    tv_LectureClassCode: TTreeView;
    ed_SerchSelectLectureClassCode: TAdvEdit;
    pan_employee: TAdvSmoothPanel;
    lb_EmployeeClass: TLabel;
    ed_SearchEmployeeClassName: TAdvEdit;
    btn_EmployeeClassSelect: TAdvGlowButton;
    AdvSmoothLabel3: TAdvSmoothLabel;
    ed_LecturePhone: TAdvEdit;
    AdvSmoothLabel4: TAdvSmoothLabel;
    ed_LectureName: TAdvEdit;
    sg_LectureEmployeeList: TAdvStringGrid;
    tv_EmployeeClassCode: TTreeView;
    tv_EmployeeClassList: TTreeView;
    btn_LectureSave: TAdvGlowButton;
    ed_SerchSelectCompanyCode: TAdvEdit;
    btn_LectureClose: TAdvGlowButton;
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure FormShow(Sender: TObject);
    procedure ed_CompanyNameKeyPress(Sender: TObject; var Key: Char);
    procedure FormCreate(Sender: TObject);
    procedure pan_EmployeeListResize(Sender: TObject);
    procedure FormResize(Sender: TObject);
    procedure btn_SaveMouseEnter(Sender: TObject);
    procedure btn_SaveMouseLeave(Sender: TObject);
    procedure sg_CardCanEditCell(Sender: TObject; ARow, ACol: Integer;
      var CanEdit: Boolean);
    procedure dt_IndateChange(Sender: TObject);
    procedure dt_OutDateChange(Sender: TObject);
    procedure sg_EmployeeListResize(Sender: TObject);
    procedure Pan_EmcodeMouseDown(Sender: TObject; Button: TMouseButton;
      Shift: TShiftState; X, Y: Integer);
    procedure Pan_EmcodeMouseUp(Sender: TObject; Button: TMouseButton;
      Shift: TShiftState; X, Y: Integer);
    procedure Pan_EmcodeMouseMove(Sender: TObject; Shift: TShiftState; X,
      Y: Integer);
    procedure sg_EmployeeListCheckBoxClick(Sender: TObject; ACol, ARow: Integer;
      State: Boolean);
    procedure btn_CloseClick(Sender: TObject);
    procedure btn_minimizeClick(Sender: TObject);
    procedure pan_FingerMouseDown(Sender: TObject; Button: TMouseButton;
      Shift: TShiftState; X, Y: Integer);
    procedure pan_emPermitAdminMouseDown(Sender: TObject; Button: TMouseButton;
      Shift: TShiftState; X, Y: Integer);
    procedure pan_PositionInfoMouseDown(Sender: TObject; Button: TMouseButton;
      Shift: TShiftState; X, Y: Integer);
    procedure btn_AccessConfirmClick(Sender: TObject);
    procedure SearchTimerTimer(Sender: TObject);
    procedure ed_SearchNameKeyUp(Sender: TObject; var Key: Word;
      Shift: TShiftState);
    procedure sg_LectureCodeCheckBoxClick(Sender: TObject; ACol, ARow: Integer;
      State: Boolean);
    procedure btn_LectureClassSelectClick(Sender: TObject);
    procedure tv_LectureClassNameDblClick(Sender: TObject);
    procedure sg_LectureCodeClick(Sender: TObject);
    procedure btn_LectureCompleteClick(Sender: TObject);
    procedure btn_LectureCancelClick(Sender: TObject);
    procedure btn_LectureRegistClick(Sender: TObject);
    procedure pan_employeeMouseMove(Sender: TObject; Shift: TShiftState; X,
      Y: Integer);
    procedure tv_EmployeeClassListDblClick(Sender: TObject);
    procedure ed_LecturePhoneKeyUp(Sender: TObject; var Key: Word;
      Shift: TShiftState);
    procedure btn_EmployeeClassSelectClick(Sender: TObject);
    procedure btn_LectureCloseClick(Sender: TObject);
    procedure sg_LectureEmployeeListCheckBoxClick(Sender: TObject; ACol,
      ARow: Integer; State: Boolean);
    procedure btn_LectureSaveClick(Sender: TObject);
  private
    DragOrigin: TPoint;
    MouseDowning : BOOLEAN;
  private
    L_stMenuID : string;
    L_stAllName : string;
    L_stButtonCloseCaption : string;
    L_stDeleteCaption : string;
    L_stEmCodeCaption : string;
    L_stEmCompanyPhoneCaption : string;
    L_stEmEtcCaption : string;
    L_stEmHandPhoneCaption : string;
    L_stEmNameCaption : string;
    L_stCardNoCaption : string;
    L_stFingerTemplate1_1 : string;
    L_stFingerTemplate1_2 : string;
    L_stWork : string;
    L_nSelectCol : integer;
    L_nPageListMaxCount : integer;
    L_nBuildingNotPermitDoorCount : integer;     //빌딩별 미등록 권한 출입문
    L_nBuildingPermitDoorCount : integer;        //빌딩별 등록 권한 출입문
    L_nBuildingNotPermitArmAreaCount : integer;  //빌딩별 미등록 권한 방범구역
    L_nBuildingPermitArmAreaCount : integer;
    L_nUpdateEmStateIndex : integer;
    L_nPermitArmAreaCheckCount : integer;           //삭제시 방범구역 선택 갯수
    L_nLectureCodeCheckCount : integer;
    L_nNotPermitArmAreaCheckCount : integer;        //등록시 방범구역 선택 갯수
    L_nPermitDoorCheckCount : integer;           //삭제시 출입문 선택 갯수
    L_nNotPermitDoorCheckCount : integer;        //등록시 출입문 선택 갯수
    L_nEmployeeCheckCount : integer;             //
    L_bVisitEditMode : Boolean;
    L_bEmployeeGradeChange : Boolean;
    L_bFingerImageUpdate : Boolean;
    L_bFingerUse : Boolean;
    CardGubunCodeList :TStringList;
    CardSearchStateCodeList :TStringList;
    CardStateCodeList :TStringList;
    EmployeeGubunCodeList : TStringList;
    EmployeeGubunSearchCodeList : TStringList;
    EmployeeStateCodeList : TStringList;
    PosiCodeList : TStringList;
    PosiSearchCodeList : TStringList;
    WorkCardGubunCodeList :TStringList;
    WorkCardStateCodeList :TStringList;
    AddCardNoList : TStringList; //추가되는 카드번호 리스트를 가지고 있자
    ChangeCardNoList : TStringList; //변경되는 카드번호 리스트를 가지고 있자
    DeleteCardNoList : TStringList; //삭제 카드 리스트를 가지고 있자
    BuildingArmAreaCodeList : TStringList; //빌딩별 방범구역 코드 리스트를 가지고 있자.
    BuildingDoorCodeList : TStringList; //빌딩별 출입문 코드 리스트를 가지고 있자.
    TuitionOffCodeList : TStringList;
    procedure FormNameSetting;
    procedure SearchEmployeeList(aCode:string;aTopRow:integer = 0);
    procedure SearchEmployeeLectureList(aCode:string;aTopRow:integer = 0);
    procedure SearchLectureList(aCode:string;aTopRow:integer = 0);
  private
    L_bFormClose : Boolean;
    L_bSearchBreak : Boolean;
    L_bSearchEnd : Boolean;
    FFingerDeviceType: Boolean;
    FFingerDeviceID: integer;
    FFingerUserID: String;
    FFingerEMSeq: integer;
    FFingerDeviceSeq: integer;
    FFingerDeviceIP: string;
    { Private declarations }

    function JpegStartsInBlob(PicField:TBlobField):integer;
    procedure AdvStrinGridSetAllCheck(Sender: TObject;bchkState:Boolean);
  public
    { Public declarations }
    procedure FormSearchEnable(aEnabled:Boolean);
    procedure Form_Close;
    procedure FontSetting;
    procedure FormChangeEvent(aNumber:integer);
    procedure FormGradeRefresh;
    procedure FormIDSetting(aID:string);
    procedure CardRegistEvent(aCardNo:string);
  public
    property FingerDeviceID : integer read FFingerDeviceID write FFingerDeviceID;
    property FingerDeviceSeq : integer read FFingerDeviceSeq write FFingerDeviceSeq;
    property FingerDeviceIP : string read FFingerDeviceIP write FFingerDeviceIP;
    property FingerUserID : String read FFingerUserID write FFingerUserID;
    property FingerEMSeq : integer read FFingerEMSeq write FFingerEMSeq;
  end;

var
  fmLectureManager: TfmLectureManager;

implementation
uses
  uComboBoxCodeLoad,
  uCommonFunction,
  uCommonVariable,
  uEmployeeRelay,
  uFormFunction,
  uFormVariable,
  uDataBase,
  uDBFormMessage,
  uDBFunction,
  uDBInsert,
  uDBUpdate,
  uDBDelete,
  uDBCardPermit,
  uDBSelect,
  uSupremaFinger,
  uFingerVariable,
  uFormUtil,
  uMain;
{$R *.dfm}

procedure TfmLectureManager.AdvStrinGridSetAllCheck(Sender: TObject;
  bchkState: Boolean);
var
  i : integer;
begin
    for i:= 1 to (Sender as TAdvStringGrid).RowCount - 1  do
    begin
      (Sender as TAdvStringGrid).SetCheckBoxState(0,i,bchkState);
    end;
end;

procedure TfmLectureManager.btn_AccessConfirmClick(Sender: TObject);
begin
  inherited;
  L_bSearchBreak := True;
  Pan_Message.Visible := False;

end;

procedure TfmLectureManager.btn_CloseClick(Sender: TObject);
begin
  inherited;
  Close;
end;

procedure TfmLectureManager.btn_EmployeeClassSelectClick(Sender: TObject);
begin
  inherited;
  tv_EmployeeClassList.Visible := Not tv_EmployeeClassList.Visible;
  tv_EmployeeClassList.Top := btn_EmployeeClassSelect.Top + btn_EmployeeClassSelect.Height;
  tv_EmployeeClassList.Left := btn_EmployeeClassSelect.Left + btn_EmployeeClassSelect.Width - tv_EmployeeClassList.Width;

end;

procedure TfmLectureManager.btn_LectureCancelClick(Sender: TObject);
var
  i : integer;
  bCheckState : Boolean;
  stLectureSeq : string;
  stEmSeq : string;
begin
  inherited;
  if L_nEmployeeCheckCount < 1 then
  begin
    showmessage(dmFormMessage.GetMessage('NOTSELECTEMPLOYEE'));
    Exit;
  end;
  Try
    with sg_EmployeeList do
    begin
      for i := 1 to RowCount - 1 do
      begin
        GetCheckBoxState(0,i, bCheckState);
        if bCheckState then
        begin
          stEmSeq := cells[5,i];
          stLectureSeq := cells[6,i];
          dmDBUpdate.UpdateTB_EMPLOYEELecture_Field_IntValue(stEmSeq,stLectureSeq,'EL_STATE','2');
          dmDBUpdate.UpdateTB_EMPLOYEELecture_Field_StringValue(stEmSeq,stLectureSeq,'EL_ENDDATE',formatDateTime('yyyymmdd',now));
          dmDBInsert.InsertIntoTB_EMPLOYEELectureHIS_Value(stEmSeq,stLectureSeq,Cells[7,i],'','2',FormatDateTime('yyyymmdd',now),'');
        end;
        Application.ProcessMessages;
      end;
    end;
  Finally
  End;
  SearchEmployeeLectureList('');
end;

procedure TfmLectureManager.btn_LectureClassSelectClick(Sender: TObject);
begin
  inherited;
  tv_LectureClassName.Visible := Not tv_LectureClassName.Visible;
  tv_LectureClassName.Top := btn_LectureClassSelect.Top + btn_LectureClassSelect.Height;
  tv_LectureClassName.Left := btn_LectureClassSelect.Left + btn_LectureClassSelect.Width - tv_LectureClassName.Width;
end;

procedure TfmLectureManager.btn_LectureCloseClick(Sender: TObject);
begin
  inherited;
  pan_employee.Visible := False;
end;

procedure TfmLectureManager.btn_LectureCompleteClick(Sender: TObject);
var
  i : integer;
  bCheckState : Boolean;
  stLectureSeq : string;
  stEmSeq : string;
begin
  inherited;
  if L_nEmployeeCheckCount < 1 then
  begin
    showmessage(dmFormMessage.GetMessage('NOTSELECTEMPLOYEE'));
    Exit;
  end;
  Try
    with sg_EmployeeList do
    begin
      for i := 1 to RowCount - 1 do
      begin
        GetCheckBoxState(0,i, bCheckState);
        if bCheckState then
        begin
          stEmSeq := cells[5,i];
          stLectureSeq := cells[6,i];
          dmDBUpdate.UpdateTB_EMPLOYEELecture_Field_IntValue(stEmSeq,stLectureSeq,'EL_STATE','3');
          dmDBUpdate.UpdateTB_EMPLOYEELecture_Field_StringValue(stEmSeq,stLectureSeq,'EL_ENDDATE',formatDateTime('yyyymmdd',now));
          dmDBInsert.InsertIntoTB_EMPLOYEELectureHIS_Value(stEmSeq,stLectureSeq,Cells[7,i],'','3',FormatDateTime('yyyymmdd',now),'');
        end;
        Application.ProcessMessages;
      end;
    end;
  Finally
  End;
  SearchEmployeeLectureList('');

end;

procedure TfmLectureManager.btn_LectureRegistClick(Sender: TObject);
begin
  inherited;
  LoadCompanyTreeView('',tv_EmployeeClassList,tv_EmployeeClassCode,con_LocalCompanyImageIndex,'',True);
  tv_EmployeeClassListDblClick(tv_EmployeeClassList);
  pan_employee.Visible := True;
end;

procedure TfmLectureManager.btn_LectureSaveClick(Sender: TObject);
var
  i,j:integer;
  bCheckState : Boolean;
  stEmSeq : string;
  stLectureSeq : string;
  stRegType : string;
begin
  inherited;
  if L_nLectureCodeCheckCount < 1 then
  begin
    showmessage('수강신청 강의를 선택하여 주세요.');
    Exit;
  end;
  stLectureSeq := ed_SerchSelectLectureCode.Text;
  Try
    with sg_LectureEmployeeList do
    begin
      for i := 1 to RowCount - 1 do
      begin
        GetCheckBoxState(0,i, bCheckState);
        if bCheckState then
        begin
          stEmSeq :=  cells[4,i];
          if dmDBFunction.CheckTB_EMPLOYEELecture_Key(stEmSeq,stLectureSeq,stRegType)=1 then
          begin
            if (stRegType <> '1') then
            begin
              dmDBUpdate.UpdateTB_EMPLOYEELecture_Field_IntValue(stEmSeq,stLectureSeq,'EL_STATE','1');
              dmDBUpdate.UpdateTB_EMPLOYEELecture_Field_StringValue(stEmSeq,stLectureSeq,'EL_REGDATE',formatDateTime('yyyymmdd',now));
              dmDBUpdate.UpdateTB_EMPLOYEELecture_Field_StringValue(stEmSeq,stLectureSeq,'EL_PAYDATE',formatDateTime('dd',now));
              dmDBInsert.InsertIntoTB_EMPLOYEELectureHIS_Value(stEmSeq,stLectureSeq,formatDateTime('yyyymmdd',now),formatDateTime('dd',now),'1','','');
            end;
          end else
          begin
            dmDBInsert.InsertIntoTB_EMPLOYEELecture_Value(stEmSeq,stLectureSeq,formatDateTime('yyyymmdd',now),formatDateTime('dd',now),'1','','');
            dmDBInsert.InsertIntoTB_EMPLOYEELectureHIS_Value(stEmSeq,stLectureSeq,formatDateTime('yyyymmdd',now),formatDateTime('dd',now),'1','','');
          end;

        end;
        Application.ProcessMessages;
      end;
    end;
  Finally
  End;
  pan_employee.Visible := False;
  SearchEmployeeList('');
end;

procedure TfmLectureManager.btn_minimizeClick(Sender: TObject);
begin
  inherited;
  windowState := wsNormal;

end;

procedure TfmLectureManager.btn_SaveMouseEnter(Sender: TObject);
begin
  inherited;
  TAdvGlassButton(Sender).ShineColor := clYellow;
end;

procedure TfmLectureManager.btn_SaveMouseLeave(Sender: TObject);
begin
  inherited;
  TAdvGlassButton(Sender).ShineColor := clGray;
end;

procedure TfmLectureManager.CardRegistEvent(aCardNo: string);
begin

end;


procedure TfmLectureManager.dt_IndateChange(Sender: TObject);
begin
  inherited;
  L_bEmployeeGradeChange := True;  //유효기간 변경시 카드데이터 재전송
end;

procedure TfmLectureManager.dt_OutDateChange(Sender: TObject);
begin
  inherited;
  L_bEmployeeGradeChange := True; //유효기간 변경시 카드데이터 재전송
end;

procedure TfmLectureManager.ed_CompanyNameKeyPress(Sender: TObject; var Key: Char);
begin
  inherited;
  if Key = #13 then
  begin
    Key := #0;
  end;
end;

procedure TfmLectureManager.ed_LecturePhoneKeyUp(Sender: TObject; var Key: Word;
  Shift: TShiftState);
begin
  inherited;
  SearchEmployeeList('');

end;

procedure TfmLectureManager.ed_SearchNameKeyUp(Sender: TObject; var Key: Word;
  Shift: TShiftState);
begin
  inherited;
  SearchEmployeeLectureList('');
end;




procedure TfmLectureManager.FontSetting;
begin
(*  dmFormUtil.TravelFormFontSetting(self,G_stFontName,inttostr(G_nFontSize));
  dmFormUtil.TravelAdvOfficeTabSetOfficeStylerFontSetting(AdvOfficeTabSetOfficeStyler1, G_stFontName,inttostr(G_nFontSize));
  dmFormUtil.FormAdvOfficeTabSetOfficeStylerSetting(AdvOfficeTabSetOfficeStyler1,G_stFormStyle);
  dmFormUtil.FormAdvToolBarOfficeStylerSetting(AdvToolBarOfficeStyler1,G_stFormStyle);
  dmFormUtil.FormStyleSetting(self,AdvToolBarOfficeStyler1);
*)
end;

procedure TfmLectureManager.FormChangeEvent(aNumber: integer);
var
  stSelectCode1 : string;
  stSelectCode2 : string;
  nIndex : integer;
begin
  case aNumber of
    con_FormBMOSCOMPANYCODE : begin
    end;
    con_FormBMOSBUILDINGCODE : begin
//      LoadBuildingTreeView('',tv_buildingName,tv_buildingCode,con_LocalBuildingImageIndex);
    end;
    con_FormBMOSPOSICODE : begin

    end;
    con_FormBMOSEMPLOYEEGUBUN : begin
    end;

  end;
end;

procedure TfmLectureManager.FormClose(Sender: TObject; var Action: TCloseAction);
begin
  inherited;
  if dmSupremaFinger.Connected then
  begin
    dmSupremaFinger.SocketOPEN := False;
  end;
  //dmSupremaFinger.Free;
  L_bFormClose := True;
  L_bSearchBreak := True;
  Delay(1000);

  PosiCodeList.Free;
  PosiSearchCodeList.Free;
  EmployeeGubunCodeList.Free;
  EmployeeGubunSearchCodeList.Free;
  EmployeeStateCodeList.Free;
  CardGubunCodeList.Free;
  WorkCardGubunCodeList.Free;
  WorkCardStateCodeList.Free;
  AddCardNoList.Free;
  ChangeCardNoList.Free;
  CardStateCodeList.Free;
  CardSearchStateCodeList.Free;
  DeleteCardNoList.Free;
  BuildingDoorCodeList.Free;
  BuildingArmAreaCodeList.Free;
  TuitionOffCodeList.Free;

  fmMain.FORMENABLE(con_FormBMOSEMPLOYEE,'FALSE');

  Action := caFree;
end;

procedure TfmLectureManager.FormCreate(Sender: TObject);
begin
  inherited;
  PosiCodeList := TStringList.Create;
  PosiSearchCodeList := TStringList.Create;
  EmployeeGubunCodeList:= TStringList.Create;
  EmployeeGubunSearchCodeList := TStringList.Create;
  EmployeeStateCodeList := TStringList.Create;
  CardGubunCodeList := TStringList.Create;
  WorkCardGubunCodeList := TStringList.Create;
  WorkCardStateCodeList := TStringList.Create;
  AddCardNoList := TStringList.Create;
  ChangeCardNoList:= TStringList.Create;
  CardStateCodeList := TStringList.Create;
  CardSearchStateCodeList := TStringList.Create;
  DeleteCardNoList := TStringList.Create;
  BuildingDoorCodeList := TStringList.Create;
  BuildingArmAreaCodeList := TStringList.Create;

  TuitionOffCodeList := TStringList.Create;
  FontSetting;
  L_bSearchEnd := True;
  //dmSupremaFinger := TdmSupremaFinger.Create(nil);

end;

procedure TfmLectureManager.FormGradeRefresh;
begin
  if IsUpdateGrade or IsDeleteGrade then sg_EmployeeList.PopupMenu := pm_Employee
  else sg_EmployeeList.PopupMenu := nil;
  pm_EmployeeAdd.Enabled := IsInsertGrade;
  pm_EmDelete.Enabled := IsDeleteGrade;
  pm_EmUpdate.Enabled := IsUpdateGrade;
end;

procedure TfmLectureManager.FormIDSetting(aID: string);
begin
  L_stMenuID := aID;
end;

procedure TfmLectureManager.FormNameSetting;
begin
  AdvOfficePage1.Caption := dmFormFunction.GetFormName('0','2','BUTTONMENU002');


  L_stDeleteCaption := dmFormFunction.GetFormName('0','2','BUTTONDEL001');
  L_stButtonCloseCaption := dmFormFunction.GetFormName('0','2','BUTTONMENU001');
  L_stCardNoCaption := dmFormFunction.GetFormName('0','2','COMMONCARDNUMBER');
  pm_EmUpdate.Caption := dmFormFunction.GetFormName('0','2','COMMONUPDATE');
  L_stAllName := dmFormFunction.GetFormName('0','2','COMMONALLNAME');

  L_stEmCodeCaption := dmFormFunction.GetFormName('0','2','COMMONEMPLOYEECODE');
  L_stEmNameCaption:= dmFormFunction.GetFormName('0','2','COMMONEMPLOYEENAME');
  L_stEmHandPhoneCaption:= dmFormFunction.GetFormName('0','2','COMMONEMPLOYEEHANDPHONE');
  L_stEmCompanyPhoneCaption:= dmFormFunction.GetFormName('0','2','COMMONEMPLOYEECOMPANYPHONE');
  L_stEmEtcCaption:= dmFormFunction.GetFormName('0','2','COMMONEMPLOYEEETCINFO');
  lb_Count1.Caption.Text := dmFormFunction.GetFormName('0','2','COMMONCOUNT');
  lb_SearchCount1.Caption.Text := dmFormFunction.GetFormName('0','2','COMMONSEARCHCOUNT01');
end;

procedure TfmLectureManager.FormResize(Sender: TObject);
begin
  inherited;

  btn_Close.Left := AdvOfficePager1.Width - btn_Close.Width - 10;
  btn_minimize.Left := btn_Close.Left - btn_minimize.Width - 2;

  if Windowstate = wsMaximized then
  begin
    btn_minimize.Visible := False;
    btn_Close.Visible := True;
  end else
  begin
    btn_minimize.Visible := False;
    btn_Close.Visible := False;
  end;

  pan_Message.Left := (Width div 2) - (pan_Message.Width div 2);
  pan_Message.Top := (Height div 2) - (pan_Message.Height div 2);

  pan_employee.Left := (Width div 2) - (pan_employee.Width div 2);
  pan_employee.Top := (Height div 2) - (pan_employee.Height div 2);


  pan_EmployeeListResize(pan_EmployeeList);

end;

procedure TfmLectureManager.FormSearchEnable(aEnabled: Boolean);
begin
end;

procedure TfmLectureManager.FormShow(Sender: TObject);
begin
  inherited;
  WindowState := wsMaximized;

  FormNameSetting;
  fmMain.FORMENABLE(con_FormBMOSEMPLOYEE,'TRUE');


  LoadLectureClassTreeView('',tv_LectureClassName,tv_LectureClassCode,con_LocalCompanyImageIndex);
  tv_LectureClassName.Items[0].Selected := True;
  tv_LectureClassNameDblClick(self);


  if L_bFormClose or G_bApplicationTerminate then Exit;


  L_bVisitEditMode := True;




  if Not FileExists(G_stExeFolder + '\Excel-d.png') then
  begin
    ExcelDisImage.Picture.SaveToFile(G_stExeFolder + '\Excel-d.png');
  end;
//  if G_nReportSearchType = 1 then SearchEmployeeList('');  //tv_ListClick 에서 먼저 조회 함
end;

procedure TfmLectureManager.Form_Close;
begin
  Close;
end;

function TfmLectureManager.JpegStartsInBlob(PicField: TBlobField): integer;
var
  bS : TADOBlobStream;
  buffer : Word;
  hx : string;
begin
  Result := -1;
  bS := TADOBlobStream.Create(PicField, bmRead);
  try
    while (Result = -1) and
      (bS.Position + 1 < bS.Size) do
    begin
      bS.ReadBuffer(buffer, 1);
      hx:=IntToHex(buffer, 2);
      if hx = 'FF' then begin
        bS.ReadBuffer(buffer, 1);
        hx:=IntToHex(buffer, 2);
        if hx = 'D8' then Result := bS.Position - 2
        else if hx = 'FF' then
        bS.Position := bS.Position-1;
      end; //if
    end; //while
  finally
    bS.Free
  end; //try
end;

procedure TfmLectureManager.Pan_EmcodeMouseDown(Sender: TObject; Button: TMouseButton;
  Shift: TShiftState; X, Y: Integer);
begin
  inherited;
(*    if (Button = mbLeft) and (MouseDowning = False) then
    begin
        // DRAG POINT 저장
        DragOrigin := Point (X,Y);
        // MOUSE DOWN = TRUE 설정
        MouseDowning := True;
    end;
*)
end;

procedure TfmLectureManager.Pan_EmcodeMouseMove(Sender: TObject; Shift: TShiftState;
  X, Y: Integer);
const
 SC_DragMove = $F012;
begin
 ReleaseCapture;
 (sender as TWinControl).perform(WM_SysCommand, SC_DragMove,0);
(*  inherited;
    // MOUSE DOWN = TRUE CHECK
    if (MouseDowning = True) then
    begin
        // IMAGE TOP 위치 설정
        (Sender as TAdvSmoothPanel).Top := (Sender as TAdvSmoothPanel).Top + Y - DragOrigin.Y;
        // IMAGE LEFT 위치 설정
        (Sender as TAdvSmoothPanel).Left := (Sender as TAdvSmoothPanel).Left + X - DragOrigin.X;
    end;
 *)
end;

procedure TfmLectureManager.Pan_EmcodeMouseUp(Sender: TObject; Button: TMouseButton;
  Shift: TShiftState; X, Y: Integer);
begin
  inherited;
    // MOUSE DOWN = FALSE 설정
//    MouseDowning := False;
end;

procedure TfmLectureManager.pan_emPermitAdminMouseDown(Sender: TObject;
  Button: TMouseButton; Shift: TShiftState; X, Y: Integer);
const
 SC_DragMove = $F012;
begin
 ReleaseCapture;
 (sender as TWinControl).perform(WM_SysCommand, SC_DragMove,0);

end;

procedure TfmLectureManager.pan_EmployeeListResize(Sender: TObject);
begin
  inherited;
  sg_EmployeeList.Width := pan_EmployeeList.Width - sg_EmployeeList.Left - 20;
  sg_EmployeeList.Height := pan_EmployeeList.Height - sg_EmployeeList.Top - 50;
  sg_EmployeeList.ColWidths[4] := sg_EmployeeList.Width - sg_EmployeeList.ColWidths[0] - sg_EmployeeList.ColWidths[1] - sg_EmployeeList.ColWidths[2] - sg_EmployeeList.ColWidths[3] - 10;
  if sg_EmployeeList.ColWidths[4] < 100 then sg_EmployeeList.ColWidths[4] := 100;

end;

procedure TfmLectureManager.pan_employeeMouseMove(Sender: TObject;
  Shift: TShiftState; X, Y: Integer);
const
 SC_DragMove = $F012;
begin
 ReleaseCapture;
 (sender as TWinControl).perform(WM_SysCommand, SC_DragMove,0);

end;

procedure TfmLectureManager.pan_FingerMouseDown(Sender: TObject; Button: TMouseButton;
  Shift: TShiftState; X, Y: Integer);
const
 SC_DragMove = $F012;
begin
 ReleaseCapture;
 (sender as TWinControl).perform(WM_SysCommand, SC_DragMove,0);
end;

procedure TfmLectureManager.pan_PositionInfoMouseDown(Sender: TObject;
  Button: TMouseButton; Shift: TShiftState; X, Y: Integer);
const
 SC_DragMove = $F012;
begin
(* ReleaseCapture;
 (sender as TWinControl).perform(WM_SysCommand, SC_DragMove,0);
 *)
end;



procedure TfmLectureManager.SearchEmployeeLectureList(aCode: string; aTopRow: integer);
var
  stSql : string;
  TempAdoQuery : TADOQuery;
  nRow : integer;
  stLectureCode : string;
  stTemp : string;
begin
  L_nEmployeeCheckCount := 0;
  L_bSearchBreak := True;
  FingerUserID := '';

  while Not L_bSearchEnd do
  begin
    SearchTimer.Enabled := True;
    Exit;
  end;
  L_bSearchBreak := False;
  L_bSearchEnd := False;

  GridInit(sg_EmployeeList,5,2,True);

  stLectureCode := ed_SerchSelectLectureCode.Text;
  if Not isDigit(stLectureCode) then Exit;

  stSql := ' Select a.*,b.EM_NAME,b.EM_BIRTHDAY,b.EM_REGDATE,c.CO_COMPANYNAME,d.CC_MONTH from TB_EMPLOYEELecture a ';
  stSql := stSql + ' Left Join TB_EMPLOYEE b ';
  stSql := stSql + ' ON (a.EM_SEQ = b.EM_SEQ ) ';
  stSql := stSql + ' Left Join TB_COMPANYCODE c ';
  stSql := stSql + ' ON (b.GROUP_CODE = c.GROUP_CODE ';
  stSql := stSql + ' AND b.CO_COMPANYCODE = c.CO_COMPANYCODE ) ';
  stSql := stSql + ' Left Join TB_CurriculumCode d ';
  stSql := stSql + ' ON (a.GROUP_CODE = d.GROUP_CODE ';
  stSql := stSql + ' AND a.CC_CODE = d.CC_CODE ) ';
  stSql := stSql + ' Where a.GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND a.CC_CODE = ' + stLectureCode + ' ';
  if ed_SearchName.Text <> '' then
    stSql := stSql + ' AND b.EM_NAME Like N''%' + ed_SearchName.Text + '%'' ';
  if ed_SearchPhone.Text <> '' then
    stSql := stSql + ' AND (b.EM_HANDPHONE Like ''%' + ed_SearchPhone.Text + '%'' OR b.EM_COMPANYPHONE Like ''%' + ed_SearchPhone.Text + '%'' ) ';
  stSql := stSql + ' AND a.EL_STATE = 1 ';

  Try
    if (G_nFormEnable = 1) then FormSearchEnable(False);
    CoInitialize(nil);
    TempAdoQuery := TADOQuery.Create(nil);
    TempAdoQuery.Connection := dmDataBase.ADOConnection;

    with TempAdoQuery do
    begin
      Close;
      sql.Text := stSql;
      Try
        Open;
      Except
        dmDataBase.DBConnected := False;
        Exit;
      End;
      lb_SearchCount.Caption.Text := FormatFloat('#,##0',recordCount);
      if recordcount < 1 then Exit;

       pan_Message.Visible := G_bDataLoadingView;
      AdvProgressBar1.Max := recordcount;
      AdvProgressBar1.Position := 0;
      with sg_EmployeeList do
      begin
        nRow := 1;
        RowCount := RecordCount + 1;
        while Not Eof do
        begin
          if L_bSearchBreak then
          begin
            Exit;
          end;
          if L_bFormClose or G_bApplicationTerminate then Exit;

          AddCheckBox(0,nRow,False,False);

          cells[1,nRow] := FindField('EM_NAME').AsString;        //학생 이름
          cells[2,nRow] := FindField('CO_COMPANYNAME').AsString; //학생 분류
          cells[3,nRow] := FindField('EM_BIRTHDAY').AsString;    //생년월일
          stTemp := FindField('EL_REGDATE').AsString;
          stTemp := MakeDatetimeStr(stTemp);
          cells[4,nRow] := stTemp + '~' + FormatDateTime('yyyy-mm-dd',IncMonth(strtodate(stTemp),FindField('CC_MONTH').AsInteger)); //등록기간
          cells[5,nRow] := FindField('EM_SEQ').AsString;
          cells[6,nRow] := FindField('CC_CODE').AsString;
          cells[7,nRow] := FindField('EM_REGDATE').AsString;

          nRow := nRow + 1;
          if G_bDataLoadingView then AdvProgressBar1.Position := nRow;
          Application.ProcessMessages;
          Next;
        end;
        if aTopRow = 0 then
        begin
          if Row > (L_nPageListMaxCount - 1) then TopRow := Row - L_nPageListMaxCount;
        end else
        begin
          TopRow := aTopRow;
        end;
      end;

    end;
  Finally
    L_bSearchEnd := True;
    FormSearchEnable(True);
    pan_Message.Visible := False;
    TempAdoQuery.Free;
    CoUninitialize;
  End;

end;

procedure TfmLectureManager.SearchEmployeeList(aCode: string; aTopRow: integer);
var
  stSql : string;
  TempAdoQuery : TADOQuery;
  nRow : integer;
  stCompanyCode : string;
  stPosiCode : string;
  stEmployeeGubun : string;
  stEmCode : string;
  stEmName : string;
  stEmHandPhone : string;
  stEmCompanyPhone : string;
  stEtcInfo : string;
  stCardNo : string;
  stCardState : string;
  stLectureCode : string;
begin
  L_nLectureCodeCheckCount := 0;

  GridInit(sg_LectureEmployeeList,5,2,True);

  stCompanyCode := ed_SerchSelectCompanyCode.Text;
  if stCompanyCode = '' then stCompanyCode := '0';
  stLectureCode := ed_SerchSelectLectureCode.Text;

  stSql := ' Select a.EM_FINGERUSE,a.EM_CARDUSE,a.EM_SEQ,a.EM_CODE,a.EM_NAME,a.CO_COMPANYCODE,a.PO_POSICODE,a.EM_EMAIL,a.Cg_Num,';
  stSql := stSql + ' a.EM_GUBUNCODE,a.EM_COMPANYPHONE,a.EM_HOMEPHONE,a.EM_HANDPHONE,a.EM_EMINFO,a.EM_BIRTHDAY,a.EM_SCHOOL,a.EM_PAYMENTDAY,';
  stSql := stSql + ' a.EM_REGDATE,a.EM_ENDDATE,a.EM_ACUSE,a.EM_ATUSE,a.EM_FDUSE,a.EM_GROUPCODE,a.EM_STATECODE,a.TO_CODE,a.EM_GRADE,';
  stSql := stSql + ' a.EM_GRADETYPE,a.AW_CODE,b.CO_COMPANYNAME ';
  stSql := stSql + ' From TB_EMPLOYEE a ';
  stSql := stSql + ' Left Join TB_COMPANYCODE b ';
  stSql := stSql + ' ON (a.GROUP_CODE = b.GROUP_CODE ';
  stSql := stSql + ' AND a.CO_COMPANYCODE = b.CO_COMPANYCODE ) ';
  stSql := stSql + ' Where a.GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND NOT EXISTS ( select CC_CODE From TB_EMPLOYEELecture c where a.EM_SEQ = c.EM_SEQ and c.CC_CODE = ' + stLectureCode + ' )';
  stSql := stSql + ' AND a.CO_COMPANYCODE Like ''' + stCompanyCode + '%'' ';
  if ed_LectureName.Text <> '' then
    stSql := stSql + ' AND a.EM_NAME Like N''%' + ed_LectureName.Text + '%'' ';
  if ed_LecturePhone.Text <> '' then
    stSql := stSql + ' AND (a.EM_HANDPHONE Like ''%' + ed_LecturePhone.Text + '%'' OR a.EM_COMPANYPHONE Like ''%' + ed_LecturePhone.Text + '%'' ) ';

  Try
    CoInitialize(nil);
    TempAdoQuery := TADOQuery.Create(nil);
    TempAdoQuery.Connection := dmDataBase.ADOConnection;

    with TempAdoQuery do
    begin
      Close;
      sql.Text := stSql;
      Try
        Open;
      Except
        dmDataBase.DBConnected := False;
        Exit;
      End;
      //lb_SearchCount.Caption.Text := FormatFloat('#,##0',recordCount);
      if recordcount < 1 then Exit;


      with sg_LectureEmployeeList do
      begin
        nRow := 1;
        RowCount := RecordCount + 1;
        while Not Eof do
        begin
          AddCheckBox(0,nRow,False,False);

          cells[1,nRow] := FindField('EM_NAME').AsString;        //학생 이름
          cells[2,nRow] := FindField('CO_COMPANYNAME').AsString; //학생 분류
          cells[3,nRow] := FindField('EM_BIRTHDAY').AsString;    //생년월일
          cells[4,nRow] := FindField('EM_SEQ').AsString;       //사원코드


          if FindField('EM_SEQ').AsString  = aCode then
          begin
            SelectRows(nRow,1);
          end;

          nRow := nRow + 1;
          Application.ProcessMessages;
          Next;
        end;
        if aTopRow = 0 then
        begin
        end else
        begin
          TopRow := aTopRow;
        end;
      end;

    end;
  Finally
    TempAdoQuery.Free;
    CoUninitialize;
  End;
end;

procedure TfmLectureManager.SearchLectureList(aCode: string; aTopRow: integer);
var
  stSql : string;
  TempAdoQuery : TADOQuery;
  nRow : integer;
  stLectureClassCode : string;
begin

  GridInit(sg_LectureCode,1,2,False);

  stLectureClassCode := ed_SerchSelectLectureClassCode.Text;
  if stLectureClassCode = '' then stLectureClassCode := '0';

  stSql := ' Select a.*,b.AD_USERNAME as MAINTEACHEAR,c.LC_CODENAME,d.AD_USERNAME as SUBTEACHEAR ';
  stSql := stSql + ' From TB_CurriculumCode a';
  stSql := stSql + ' Left Join TB_ADMIN b ';
  stSql := stSql + ' ON(a.AD_USERID = b.AD_USERID) ';
  stSql := stSql + ' Left Join TB_LectureClassCode c ';
  stSql := stSql + ' ON(a.LC_CODE = c.LC_CODE) ';
  stSql := stSql + ' Left Join TB_ADMIN d ';
  stSql := stSql + ' ON(a.AD_SUBUSERID = d.AD_USERID) ';
  stSql := stSql + ' Where a.GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND a.LC_CODE Like ''' + stLectureClassCode + '%'' ';


  Try
    CoInitialize(nil);
    TempAdoQuery := TADOQuery.Create(nil);
    TempAdoQuery.Connection := dmDataBase.ADOConnection;

    with TempAdoQuery do
    begin
      Close;
      sql.Text := stSql;
      Try
        Open;
      Except
        dmDataBase.DBConnected := False;
        Exit;
      End;
      if recordcount < 1 then Exit;

      with sg_LectureCode do
      begin
        nRow := 1;
        RowCount := RecordCount + 1;
        while Not Eof do
        begin
          if L_bSearchBreak then
          begin
            Exit;
          end;
          if L_bFormClose or G_bApplicationTerminate then Exit;

          cells[0,nRow] := FindField('CC_NAME').AsString;        //과정명
          cells[1,nRow] := FindField('LC_CODENAME').AsString;        //분류명
          cells[2,nRow] := FindField('CC_BOOKNAME').AsString; //사용교재
          cells[3,nRow] := FindField('CC_BOOKAMT').AsString;    //교재비
          cells[4,nRow] := FindField('CC_MONTH').AsString;   //교육개월수
          if FindField('CC_GUBUN').AsInteger = 0 then cells[5,nRow] := '일반'
          else if FindField('CC_GUBUN').AsInteger = 1 then cells[5,nRow] := '특강'
          else cells[5,nRow] := FindField('CC_GUBUN').AsString;//일반/특강
          cells[6,nRow] := FindField('MAINTEACHEAR').AsString;//강사
          cells[7,nRow] := FindField('SUBTEACHEAR').AsString;//보조강사
          cells[8,nRow] := FindField('CC_HH').AsString;//교육시간
          cells[9,nRow] := FindField('CC_WEEK').AsString;//요일
          cells[10,nRow] := FindField('CC_CODE').AsString;//과정코드
          cells[11,nRow] := FindField('LC_CODE').AsString;  //분류코드
          cells[12,nRow] := FindField('CC_GUBUN').AsString;  //일반/특강코드
          cells[13,nRow] := FindField('AD_USERID').AsString;  //주강사코드
          cells[14,nRow] := FindField('AD_SUBUSERID').AsString;  //보조강사코드
          if FindField('CC_CODE').AsString  = aCode then
          begin
            SelectRows(nRow,1);
          end;

          nRow := nRow + 1;
          if G_bDataLoadingView then AdvProgressBar1.Position := nRow;
          Application.ProcessMessages;
          Next;
        end;
        if aTopRow = 0 then
        begin
          if Row > (L_nPageListMaxCount - 1) then TopRow := Row - L_nPageListMaxCount;
        end else
        begin
          TopRow := aTopRow;
        end;
      end;

    end;
  Finally
    TempAdoQuery.Free;
    CoUninitialize;
  End;
  sg_LectureCodeClick(sg_LectureCode);
end;

procedure TfmLectureManager.SearchTimerTimer(Sender: TObject);
begin
  inherited;
  SearchTimer.Enabled := False;
end;


procedure TfmLectureManager.sg_CardCanEditCell(Sender: TObject; ARow, ACol: Integer;
  var CanEdit: Boolean);
begin
  if Not L_bVisitEditMode then Exit;
  if ACol = 0 then canEDIT := True
  else  canEDIT := False;

end;

procedure TfmLectureManager.sg_EmployeeListCheckBoxClick(Sender: TObject; ACol,
  ARow: Integer; State: Boolean);
begin
  inherited;
  if ARow = 0 then //전체선택 또는 해제
  begin
    if State then L_nEmployeeCheckCount := (Sender as TAdvStringGrid).RowCount - 1
    else L_nEmployeeCheckCount := 0;
    AdvStrinGridSetAllCheck(Sender,State);
  end else
  begin
    if State then L_nEmployeeCheckCount := L_nEmployeeCheckCount + 1
    else L_nEmployeeCheckCount := L_nEmployeeCheckCount - 1 ;
  end;

end;

procedure TfmLectureManager.sg_EmployeeListResize(Sender: TObject);
begin
  inherited;
  L_nPageListMaxCount := sg_EmployeeList.Height div sg_EmployeeList.DefaultRowHeight;
end;

procedure TfmLectureManager.sg_LectureCodeCheckBoxClick(Sender: TObject; ACol,
  ARow: Integer; State: Boolean);
begin
  inherited;
  if ARow = 0 then //전체선택 또는 해제
  begin
    if State then L_nLectureCodeCheckCount := (Sender as TAdvStringGrid).RowCount - 1
    else L_nLectureCodeCheckCount := 0;
    AdvStrinGridSetAllCheck(Sender,State);
  end else
  begin
    if State then L_nLectureCodeCheckCount := L_nLectureCodeCheckCount + 1
    else L_nLectureCodeCheckCount := L_nLectureCodeCheckCount - 1 ;
  end;

end;

procedure TfmLectureManager.sg_LectureCodeClick(Sender: TObject);
begin
  inherited;
  if sg_LectureCode.RowSelectCount = 0 then sg_LectureCode.SelectRows(1,1);

  lb_LectureName.Caption := sg_LectureCode.Cells[0,sg_LectureCode.Row];
  ed_SerchSelectLectureCode.Text := sg_LectureCode.Cells[10,sg_LectureCode.Row];
  SearchEmployeeLectureList('');
end;

procedure TfmLectureManager.sg_LectureEmployeeListCheckBoxClick(Sender: TObject;
  ACol, ARow: Integer; State: Boolean);
begin
  inherited;
  if ARow = 0 then //전체선택 또는 해제
  begin
    if State then L_nLectureCodeCheckCount := (Sender as TAdvStringGrid).RowCount - 1
    else L_nLectureCodeCheckCount := 0;
    AdvStrinGridSetAllCheck(Sender,State);
  end else
  begin
    if State then L_nLectureCodeCheckCount := L_nLectureCodeCheckCount + 1
    else L_nLectureCodeCheckCount := L_nLectureCodeCheckCount - 1 ;
  end;

end;

procedure TfmLectureManager.tv_EmployeeClassListDblClick(Sender: TObject);
var
  stCode : string;
begin
  inherited;
  if tv_EmployeeClassList.Selected = nil then tv_EmployeeClassList.Items[0].Selected := True;

  ed_SearchEmployeeClassName.Text := tv_EmployeeClassList.Selected.Text;
  stCode := tv_EmployeeClassCode.Items.Item[tv_EmployeeClassList.Selected.AbsoluteIndex].Text;

  ed_SerchSelectCompanyCode.Text := stCode;
  SearchEmployeeList('');
  tv_EmployeeClassList.Visible := False;

end;

procedure TfmLectureManager.tv_LectureClassNameDblClick(Sender: TObject);
var
  stCode : string;
begin
  inherited;
  if tv_LectureClassName.Selected = nil then tv_LectureClassName.Items[0].Selected := True;

  ed_SearchLeactureClassName.Text := tv_LectureClassName.Selected.Text;

  stCode := tv_LectureClassCode.Items.Item[tv_LectureClassName.Selected.AbsoluteIndex].Text;

  if ed_SerchSelectLectureClassCode.Text <> stCode then
  begin
    ed_SerchSelectLectureClassCode.Text := stCode;
    SearchLectureList('');
  end;
  tv_LectureClassName.Visible := False;
end;


initialization
  RegisterClass(TfmLectureManager);
Finalization
  UnRegisterClass(TfmLectureManager);

end.

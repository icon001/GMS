
//---------------------------------------------------------------------------

// This software is Copyright (c) 2011 Embarcadero Technologies, Inc. 
// You may only use this software if you are an authorized licensee
// of Delphi, C++Builder or RAD Studio (Embarcadero Products).
// This software is considered a Redistributable as defined under
// the software license agreement that comes with the Embarcadero Products
// and is subject to that software license agreement.

//---------------------------------------------------------------------------
unit uAccessMonitoringEvent;

interface

uses
  Windows, Messages, SysUtils, Classes, Graphics, Controls, Forms, Dialogs, Menus,
  ExtCtrls, StdCtrls, AppEvnts, Vcl.ComCtrls,uSubForm, W7Classes, W7Panels,
  Vcl.Grids, AdvObj, BaseGrid, AdvGrid,Clipbrd,System.IniFiles, AdvOfficeTabSet,
  AdvOfficeTabSetStylers, AdvToolBar, AdvToolBarStylers, CommandArray,
  AdvPageControl, AdvAppStyler;

type
  TfmAccessMonitorEvent = class(TfmASubForm)
    W7Panel1: TW7Panel;
    AdvToolBarOfficeStyler1: TAdvToolBarOfficeStyler;
    AdvOfficeTabSetOfficeStyler1: TAdvOfficeTabSetOfficeStyler;
    PopupMenu1: TPopupMenu;
    N1: TMenuItem;
    PageControl1: TAdvPageControl;
    tb_AccessEvent: TAdvTabSheet;
    tb_AccessAlarm: TAdvTabSheet;
    sg_AccessEvent: TAdvStringGrid;
    sg_AccessAlarmEvent: TAdvStringGrid;
    AdvFormStyler1: TAdvFormStyler;
    procedure FormDockOver(Sender: TObject; Source: TDragDockObject; X, Y: Integer; State: TDragState; var Accept: Boolean);
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure tb_AccessEventResize(Sender: TObject);
    procedure tb_AccessAlarmResize(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure sg_AccessEventKeyDown(Sender: TObject; var Key: Word;
      Shift: TShiftState);
    procedure N1Click(Sender: TObject);
  private
    FUndockedLeft: Integer;
    FUndockedTop: Integer;
    FFloatOnCloseDock: boolean;
    FfmParent: TfmASubForm;
    FDeviceAlarmView: Boolean;
    function  ComputeDockingRect(var DockRect: TRect; MousePos: TPoint): TAlign;   //도킹되어 있는 상태에서 다른 폼이 도킹을 시도하는 경우 발생
    procedure CMDockClient(var Message: TCMDockClient); message CM_DOCKCLIENT;
    procedure WMNCLButtonDown(var Msg: TMessage); message WM_NCLBUTTONDOWN;
    procedure FontSetting;
    procedure SetDeviceAlarmView(const Value: Boolean);
  public
    procedure DeviceCardAccessEvent(aTime,aNodeNo, aEcuID, aDoorNo,aReaderNo, aInOut,aInOutName, aCardMode, aDoorMode, aChangeState, aAccessResult,
                    aAccessPermitName,aDoorState, aATButton, aType, aArmAreaNo, aCardno, aCompanyCode,aCompanyName, aEmSeq,aEmCode, aEmName,aPosiCode,aPosiName:string);
    procedure DeviceAlarmEvent(aNodeNo, aECUID,aExtendID, aCmd,aMsgNo, aTime, aSubCLass, aSubAddr, aArmArea, aMode, aAlarmStateCode, aLoop,
                          aZoneState, aOper, aAlarmStateCodeName, aAlarmStatePCCode,aAlarmStatePCCodeName,aArmModeChange, aAlarmView, aAlarmSound, aAlarmColor:string);
  public
    property fmParent : TfmASubForm read FfmParent write FfmParent;
    property UndockedLeft: Integer read FUndockedLeft;
    property UndockedTop: Integer read FUndockedTop;
    property FloatOnCloseDock: boolean read FFloatOnCloseDock write FFloatOnCloseDock;
    property DeviceAlarmView : Boolean read FDeviceAlarmView write SetDeviceAlarmView;
  end;

implementation
{$R *.dfm}
uses
  uCommonFunction,
  uCommonVariable,
  uFormDeviceState,
  uFormVariable,
  uFormUtil;

procedure TfmAccessMonitorEvent.FormDockOver(Sender: TObject; Source: TDragDockObject;
  X, Y: Integer; State: TDragState; var Accept: Boolean);
var
  ARect: TRect;
begin
  Accept := (Source.Control is Tform);
  //Draw dock preview depending on where the cursor is relative to our client area
  if Accept and (ComputeDockingRect(ARect, Point(X, Y)) <> alNone) then
  begin
    ComputeDockingRect(ARect, Point(X, Y));
    Source.DockRect := ARect;
  end;
end;

procedure TfmAccessMonitorEvent.N1Click(Sender: TObject);
var
  stTemp : string;
begin
  inherited;
    with sg_AccessEvent do
    begin
      stTemp:= Cells[2,Row];

      if stTemp <> '' then ClipBoard.SetTextBuf(PChar(stTemp));
      fmMain.FORMSTATUSMSG(2,stTemp + ' 가 ClipBoard에 복사 되었습니다.');
      //showmessage(stTemp + ' 가 ClipBoard에 복사 되었습니다.');
    end;

end;

procedure TfmAccessMonitorEvent.SetDeviceAlarmView(const Value: Boolean);
begin
  FDeviceAlarmView := Value;
  tb_AccessAlarm.TabVisible := Value;
end;

procedure TfmAccessMonitorEvent.sg_AccessEventKeyDown(Sender: TObject;
  var Key: Word; Shift: TShiftState);
var
  stTemp: string;
begin
  if key = 17 then Exit;
  if (Key = 67) and (Shift = [ssCtrl]) 	then
  begin
    with Sender as TAdvStringGrid do
    begin
      stTemp:= Cells[Col,Row];

      if stTemp <> '' then ClipBoard.SetTextBuf(PChar(stTemp));
      fmMain.FORMSTATUSMSG(2,stTemp + ' 가 ClipBoard에 복사 되었습니다.');
      //showmessage(stTemp + ' 가 ClipBoard에 복사 되었습니다.');
    end;
  end;
end;

procedure TfmAccessMonitorEvent.tb_AccessEventResize(Sender: TObject);
begin
  sg_AccessEvent.Top := 3;
  sg_AccessEvent.Left := 3;
  sg_AccessEvent.Width := tb_AccessEvent.Width - 6;
  sg_AccessEvent.Height := tb_AccessEvent.Height - 6;
end;

procedure TfmAccessMonitorEvent.tb_AccessAlarmResize(Sender: TObject);
begin
  sg_AccessAlarmEvent.Top := 3;
  sg_AccessAlarmEvent.Left := 3;
  sg_AccessAlarmEvent.Width := tb_AccessAlarm.Width - 6;
  sg_AccessAlarmEvent.Height := tb_AccessAlarm.Height - 6;
end;

function TfmAccessMonitorEvent.ComputeDockingRect(var DockRect: TRect; MousePos: TPoint): TAlign;
var
  DockTopRect,
  DockLeftRect,
  DockBottomRect,
  DockRightRect,
  DockCenterRect: TRect;
begin
  Result := alNone;
  //divide form up into docking "Zones"
  DockLeftRect.TopLeft := Point(0, 0);
  DockLeftRect.BottomRight := Point(ClientWidth div 5, ClientHeight);

  DockTopRect.TopLeft := Point(ClientWidth div 5, 0);
  DockTopRect.BottomRight := Point(ClientWidth div 5 * 4, ClientHeight div 5);

  DockRightRect.TopLeft := Point(ClientWidth div 5 * 4, 0);
  DockRightRect.BottomRight := Point(ClientWidth, ClientHeight);

  DockBottomRect.TopLeft := Point(ClientWidth div 5, ClientHeight div 5 * 4);
  DockBottomRect.BottomRight := Point(ClientWidth div 5 * 4, ClientHeight);

  DockCenterRect.TopLeft := Point(ClientWidth div 5, ClientHeight div 5);
  DockCenterRect.BottomRight := Point(ClientWidth div 5 * 4, ClientHeight div 5 * 4);

  //Find out where the mouse cursor is, to decide where to draw dock preview.
  if PtInRect(DockLeftRect, MousePos) then
  begin
    Result := alLeft;
    DockRect := DockLeftRect;
    DockRect.Right := ClientWidth div 2;
  end
  else
  if PtInRect(DockTopRect, MousePos) then
  begin
    Result := alTop;
    DockRect := DockTopRect;
    DockRect.Left := 0;
    DockRect.Right := ClientWidth;
    DockRect.Bottom := ClientHeight div 2;
  end
  else
  if PtInRect(DockRightRect, MousePos) then
  begin
    Result := alRight;
    DockRect := DockRightRect;
    DockRect.Left := ClientWidth div 2;
  end
  else
  if PtInRect(DockBottomRect, MousePos) then
  begin
    Result := alBottom;
    DockRect := DockBottomRect;
    DockRect.Left := 0;
    DockRect.Right := ClientWidth;
    DockRect.Top := ClientHeight div 2;
 end
  else
  if PtInRect(DockCenterRect, MousePos) then
  begin
    Result := alClient;
    DockRect := DockCenterRect;
  end;
  if Result = alNone then Exit;

  //DockRect is in screen coordinates.
  DockRect.TopLeft := ClientToScreen(DockRect.TopLeft);
  DockRect.BottomRight := ClientToScreen(DockRect.BottomRight);
end;

procedure TfmAccessMonitorEvent.DeviceAlarmEvent(aNodeNo, aECUID, aExtendID,
  aCmd, aMsgNo, aTime, aSubCLass, aSubAddr, aArmArea, aMode, aAlarmStateCode,
  aLoop, aZoneState, aOper, aAlarmStateCodeName, aAlarmStatePCCode,
  aAlarmStatePCCodeName, aArmModeChange, aAlarmView, aAlarmSound,
  aAlarmColor: string);
var
  nIndex : integer;
  stNodename : string;
  stDoorName : string;
begin
  if Not DeviceAlarmView then Exit;
  if (aAlarmStateCode = G_stLongTimeStateCode) or
     (aAlarmStateCode = G_stFireStateCode) or
     (aAlarmStateCode = 'AF') or
     (aAlarmStateCode = 'AN') or
     (aAlarmStateCode = 'CO') or
     (aAlarmStateCode = 'CC') or
     (aAlarmStateCode = 'NF') or
     (aAlarmStateCode = 'NR')
  then
  begin
    //PageControl1.ActivePage := tb_AccessAlarm;
    nIndex := G_MonitoringNodeList.Indexof(FillZeroNumber(strtoint(aNodeNo),G_nNodeCodeLength));
    if nIndex > -1 then
    begin
      stNodename := TMonitoringNode(G_MonitoringNodeList.Objects[nIndex]).NodeName;
      stDoorName := '';
      if aAlarmStateCode = G_stLongTimeStateCode then
      begin
        stDoorName := TMonitoringNode(G_MonitoringNodeList.Objects[nIndex]).GetDeviceToDoorName(aEcuID,aSubCLass[2]);
      end;
    end;
    with sg_AccessAlarmEvent do
    begin
      if Cells[0,1] <> '' then InsertRows(1,1);
      Cells[0,1] := MakeDatetimeStr(aTime);
      Cells[1,1] := stNodename;
      Cells[2,1] := aECUID;
      Cells[3,1] := stDoorName;
      Cells[4,1] := aAlarmStatePCCodeName;

      if (aAlarmStatePCCode = '000FI001') or   //화재발생
        (aAlarmStateCode = 'AF') or
        (aAlarmStateCode = 'CO') or
        (aAlarmStateCode = 'NF')
      then
      begin
        RowColor[1] := clWebDarkOrange;
      end;
      if RowCount > 1000 then RowCount := 1000;
    end;
  end;


end;

procedure TfmAccessMonitorEvent.DeviceCardAccessEvent(aTime,aNodeNo, aEcuID, aDoorNo,
  aReaderNo, aInOut,aInOutName, aCardMode, aDoorMode, aChangeState, aAccessResult,aAccessPermitName,
  aDoorState, aATButton, aType, aArmAreaNo, aCardno, aCompanyCode,aCompanyName, aEmSeq,
  aEmCode, aEmName,aPosiCode,aPosiName: string);
var
  nIndex : integer;
  stDoorName : string;
begin
  nIndex := G_MonitoringNodeList.Indexof(FillZeroNumber(strtoint(aNodeNo),G_nNodeCodeLength));
  if nIndex > -1 then
  begin
    stDoorName := TMonitoringNode(G_MonitoringNodeList.Objects[nIndex]).GetDeviceToDoorName(aEcuID,aDoorNo);
  end;
  with sg_AccessEvent do
  begin
    if Cells[0,1] <> '' then InsertRows(1,1);
    Cells[0,1] := MakeDatetimeStr(aTime);
    Cells[1,1] := stDoorName;
    if aType = 'B' then
    begin
      case aChangeState[1] of
        'R' : Cells[2,1] := '원격제어';
        'P' : Cells[2,1] := '전화';
        'B' : Cells[2,1] := '퇴실버튼';
        'S' : Cells[2,1] := '스케줄';
        'F' : Cells[2,1] := '화재발생';
        'f' : Cells[2,1] := '원격화재';
      end;
    end else Cells[2,1] := aCardno;
    Cells[3,1] := aEmName;
    Cells[4,1] := aCompanyName;
    Cells[5,1] := aEmCode;
    Cells[6,1] := aReaderNo;
    Cells[7,1] := aInOutName;
    Cells[8,1] := aAccessPermitName;
    Cells[9,1] := aATButton;

    case aAccessResult[1] of
      '1','2' : begin  //출입승인

      end;
      '3','4' : begin  //방범승인

      end;
      'A' : begin       //미등록 카드
        RowColor[1] := clFuchsia;
      end;
      'B' : begin       //출입조작 권한 불가
        RowColor[1] := clFuchsia;
      end;
      'C' : begin       //방범조작 권한 불가
        RowColor[1] := clFuchsia;
      end;
      'D' : begin       //경계모드 출입 불가
        RowColor[1] := clFuchsia;
      end;
      'E' : begin       //출입 제한 시간
        RowColor[1] := clFuchsia;
      end;
      'F' : begin       //유효기간 만료
        RowColor[1] := clFuchsia;
      end;
      'G' : begin       //근태
        RowColor[1] := clYellow;
      end;
    end;

    if RowCount > 1000 then RowCount := 1000;

  end;
end;

procedure TfmAccessMonitorEvent.FontSetting;
begin
  dmFormUtil.TravelFormFontSetting(self,G_stFontName,inttostr(G_nFontSize));
  dmFormUtil.TravelAdvOfficeTabSetOfficeStylerFontSetting(AdvOfficeTabSetOfficeStyler1, G_stFontName,inttostr(G_nFontSize));
  dmFormUtil.FormAdvOfficeTabSetOfficeStylerSetting(AdvOfficeTabSetOfficeStyler1,G_stFormStyle);
  dmFormUtil.FormAdvToolBarOfficeStylerSetting(AdvToolBarOfficeStyler1,G_stFormStyle);
  dmFormUtil.FormStyleSetting(self,AdvToolBarOfficeStyler1);

end;

procedure TfmAccessMonitorEvent.FormClose(Sender: TObject;
  var Action: TCloseAction);
var
  ini_fun : TiniFile;
  i : integer;
begin
  Try
    ini_fun := TiniFile.Create(G_stExeFolder + '\AccessMonitorEvent.INI');
    with ini_fun do
    begin
      for i := 0 to sg_AccessEvent.ColCount - 1 do
        WriteInteger('EVENT','CELL' + inttostr(i),sg_AccessEvent.ColWidths[i]);
      for i := 0 to sg_AccessAlarmEvent.ColCount - 1 do
        WriteInteger('ALARM','CELL' + inttostr(i),sg_AccessAlarmEvent.ColWidths[i]);
    end;
  Finally
    ini_fun.Free;
  End;

  //the action taken depends on how the form is docked.

  //if docked to a panel, tell the panel to hide itself. If there are other
  //visible dock clients on the panel, it ShowDockPanel won't allow it to
  //be hidden
  if (HostDockSite is TPanel) then
    fmParent.ShowDockPanel(HostDockSite as TPanel, False, nil);

  Action := caHide;

  if not Floating and FloatOnCloseDock then
  begin
    // Float when close docked window
    Hide;
    ManualFloat(Rect(FUndockedLeft, FUndockedTop, FUndockedLeft + UndockWidth,
      FUndockedTop + UndockHeight));
  end;
end;

procedure TfmAccessMonitorEvent.FormCreate(Sender: TObject);
var
  ini_fun : TiniFile;
  i : integer;
begin
  Try
    ini_fun := TiniFile.Create(G_stExeFolder + '\AccessMonitorEvent.INI');
    with ini_fun do
    begin
      for i := 0 to sg_AccessEvent.ColCount - 1 do
        sg_AccessEvent.ColWidths[i] := ReadInteger('EVENT','CELL' + inttostr(i),200);
      for i := 0 to sg_AccessAlarmEvent.ColCount - 1 do
        sg_AccessAlarmEvent.ColWidths[i] := ReadInteger('ALARM','CELL' + inttostr(i),200);
    end;
  Finally
    ini_fun.Free;
  End;
  sg_AccessEvent.RowCount := 2;
  sg_AccessAlarmEvent.RowCount := 2;
  PageControl1.ActivePageIndex := 0;
  FontSetting;
end;

procedure TfmAccessMonitorEvent.CMDockClient(var Message: TCMDockClient);
var
  ARect: TRect;
  DockType: TAlign;
  Host: TForm;
  Pt: TPoint;
begin
  //Overriding this message allows the dock form to create host forms
  //depending on the mouse position when docking occurs. If we don't override
  //this message, the form will use VCL's default DockManager.

  //NOTE: the only time ManualDock can be safely called during a drag
  //operation is we override processing of CM_DOCKCLIENT.
  if Message.DockSource.Control is Tform then
  begin
    //Find out how to dock (Using a TAlign as the result of ComputeDockingRect)
    Pt.X := Message.MousePos.X;
    Pt.Y := Message.MousePos.Y;
    DockType := ComputeDockingRect(ARect, Pt);

    //if we are over a dockable form docked to a panel in the
    //main window, manually dock the dragged form to the panel with
    //the correct orientation.
    if (HostDockSite is TPanel) then
    begin
      Message.DockSource.Control.ManualDock(HostDockSite, nil, DockType);
      Exit;
    end;
  end;
end;

procedure TfmAccessMonitorEvent.WMNCLButtonDown(var Msg: TMessage);
begin
  inherited;
  // This event happen when mouse click in caption
  // save initial window position
  FUndockedLeft:= Left;
  FUndockedTop:= Top;
end;

end.

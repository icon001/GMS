unit uEmployeeRelay;

interface

uses
  System.SysUtils, System.Classes;

type
  TdmEmployeeRelay = class(TDataModule)
  private
    { Private declarations }
  public
    { Public declarations }
    procedure ChungnamEmployeeDataProcess(aCompanyName,aEmCode,aEmName,aCardNo,aJijumName,aParentName,aDepartName,aEmStateName,aEmGroupName:string);
  end;

var
  dmEmployeeRelay: TdmEmployeeRelay;

implementation
uses
  uCommonFunction,
  uCommonVariable,
  uDBCardPermit,
  uDBFunction,
  uDBInsert,
  uDBUpdate;

{%CLASSGROUP 'System.Classes.TPersistent'}

{$R *.dfm}

{ TdmEmployeeRelay }

procedure TdmEmployeeRelay.ChungnamEmployeeDataProcess(aCompanyName, aEmCode,
  aEmName, aCardNo, aJijumName, aParentName, aDepartName, aEmStateName,
  aEmGroupName: string);
var
  stParentCode,stChildCode : string;
  stDeepSeq : string;
  stViewSeq : string;
  stTemp : string;
  stEmGroupCode : string;
  stCompanyCode : string;
  stEmStateCode : string;
  stEmSeq,stACType,stATType,stFDType,stEmName : string;
  stCardType,stEmCode,stPositionNum,stRelayID : string;
begin
  aEmName := Trim(aEmName);
  aCompanyName := Trim(aCompanyName);
  aJijumName := Trim(aJijumName);
  aParentName := Trim(aParentName);
  aDepartName := Trim(aDepartName);
  aEmStateName := Trim(aEmStateName);
  aEmGroupName := Trim(aEmGroupName);
  aEmName := StringReplace(aEmName,'''','',[rfReplaceAll]);
  aCompanyName := StringReplace(aCompanyName,'''','',[rfReplaceAll]);
  aJijumName := StringReplace(aJijumName,'''','',[rfReplaceAll]);
  aParentName := StringReplace(aParentName,'''','',[rfReplaceAll]);
  aDepartName := StringReplace(aDepartName,'''','',[rfReplaceAll]);
  aEmStateName := StringReplace(aEmStateName,'''','',[rfReplaceAll]);
  aEmGroupName := StringReplace(aEmGroupName,'''','',[rfReplaceAll]);
  if aCardNo <> '' then
  begin
    aCardNo := FillCharString(aCardNo,'*',16,False);
  end;
  stParentCode := dmdBFunction.GetTB_CompanyCode_codeFromName(aCompanyName,'1',stDeepSeq);
  if stParentCode = '' then
  begin
    dmDBFunction.GetNextTB_COMPANYCODE_ChildCompanyCode('0',stParentCode,stDeepSeq,stViewSeq);
    dmDBInsert.InsertIntoTB_COMPANYCODE_All(stParentCode,aCompanyName,stDeepSeq,'1',stViewSeq);
  end;
  stChildCode := dmdBFunction.GetTB_CompanyCode_codeFromName(aJijumName,'2',stDeepSeq);
  if stChildCode = '' then
  begin
    dmDBFunction.GetNextTB_COMPANYCODE_ChildCompanyCode(stParentCode,stChildCode,stDeepSeq,stViewSeq);
    dmDBInsert.InsertIntoTB_COMPANYCODE_All(stChildCode,aJijumName,stDeepSeq,'1',stViewSeq);
  end;
  stParentCode := dmdBFunction.GetTB_CompanyCode_codeFromName(aParentName,'',stDeepSeq);
  if stParentCode <> '' then
  begin
    stChildCode := dmdBFunction.GetTB_CompanyCode_codeFromName(aDepartName,'',stTemp);
    if stChildCode = '' then
    begin
      dmDBFunction.GetNextTB_COMPANYCODE_ChildCompanyCode(stParentCode,stChildCode,stDeepSeq,stViewSeq);
      dmDBInsert.InsertIntoTB_COMPANYCODE_All(stChildCode,aDepartName,stDeepSeq,'1',stViewSeq);
    end;
  end;
  stCompanyCode := stChildCode;
  if Not isDigit(stCompanyCode) then stCompanyCode := '0';

  stEmGroupCode := dmDBFunction.GetTB_EMPLOYEEGROUPCODE_codeFromName(aEmGroupName,'',stDeepSeq);
  if stEmGroupCode = '' then
  begin
    dmDBFunction.GetNextTB_EMPLOYEEGROUPCODE_ChildEmGroupCode('0',stTemp,stDeepSeq,stViewSeq);
    dmDBInsert.InsertIntoTB_EMPLOYEEGROUPCODE_All(stTemp,aEmGroupName,stDeepSeq,'1',stViewSeq);
    stEmGroupCode := stTemp;
  end;

  stEmStateCode := dmDBFunction.GetTB_EMPLOYEESTATECODE_codeFromName(aEmStateName);
  if stEmStateCode = '' then
  begin
    stEmStateCode := dmDBFunction.GetNextTB_EMPLOYEESTATECODE_Code;
    dmDBInsert.InsertIntoTB_EMPLOYEESTATECODE_Value(stEmStateCode,aEmStateName,'1');
  end;

  if dmDBFunction.checkTB_EMPLOYEE_EMCODE_Variable(aEmCode,stEmSeq,stACType,stATType,stFDType,stEmName) = 1 then
  begin
    dmDBUpdate.UpdateTB_EMPLOYEE_Value(stEmSeq,aEmCode,aEmName,stCompanyCode,'0','1',
               '','','','','','','1','','',stEmGroupCode,'','',stEmStateCode,'1');
    dmDBInsert.InsertIntoTB_EMPLOYEEHIS_CopyEmployee(stEmSeq,con_ComWorkType_UPDATE); //사원정보 InSert 정보 남기자. 카드를 처리 하고 사원정보 입력 후에 남겨야 연동시 문제 없음
  end else
  begin
    stEmSeq := dmDBFunction.GetNextTB_EMPLOYEE_EmSeq;
    dmDBInsert.InsertIntoTB_EMPLOYEE_Value(stEmSeq,aEmCode,aEmName,stCompanyCode,'0','1','','','','',formatDateTime('yyyymmdd',now),'99991231','1','1','1',stEmGroupCode,'2','0',stEmStateCode,'1');
    dmDBInsert.InsertIntoTB_EMPLOYEEHIS_CopyEmployee(stEmSeq,con_ComWorkType_INSERT); //사원정보 InSert 정보 남기자. 카드를 처리 하고 사원정보 입력 후에 남겨야 연동시 문제 없음
    dmDBCardPermit.EmployeeGradeChange_Process(stEmSeq,stCompanyCode,stEmGroupCode,'2');
  end;
  if aCardNo = '' then Exit;
  if dmDBFunction.CheckTB_CARD_CARDNO(aCardNo,stCardType,stTemp,stEmCode,stEmName) = 1 then
  begin
    if (stEmCode <> aEmCode) or (stCardType <> '1') then
      dmDBUpdate.UpdateTB_CARD_Value(aCardNo,'1','',stEmSeq);
  end else
  begin
    stPositionNum := dmDBFunction.GetNextTB_CARD_PositionNum;
    stRelayID := dmDBFunction.GetNextTB_CARD_RelayID;
    dmDBInsert.InsertIntoTB_CARD_Value(aCardNo,'1','1',stPositionNum,stRelayID,'0',stEmSeq);
    dmDBInsert.InsertIntoTB_CARDHIS_CopyCard(aCardNo,aCardNo,con_ComWorkType_INSERT); //카드 입력 이력 남기자.
  end;
end;

end.


//---------------------------------------------------------------------------

// This software is Copyright (c) 2011 Embarcadero Technologies, Inc. 
// You may only use this software if you are an authorized licensee
// of Delphi, C++Builder or RAD Studio (Embarcadero Products).
// This software is considered a Redistributable as defined under
// the software license agreement that comes with the Embarcadero Products
// and is subject to that software license agreement.

//---------------------------------------------------------------------------
unit uCCTV;

interface

uses
  Windows, Messages, SysUtils, Classes, Graphics, Controls, Forms, Dialogs, Menus,
  ExtCtrls, StdCtrls, AppEvnts, Vcl.ComCtrls,uSubForm,AdvPageControl,
  Vcl.OleCtrls, NemoLib_TLB, Vcl.Buttons;

type
  TfmCCTV = class(TForm)
    PopupMenu1: TPopupMenu;
    mn_Close: TMenuItem;
    Panel1: TPanel;
    Panel2: TPanel;
    Panel3: TPanel;
    Media1: TMedia;
    btn_Close: TButton;
    procedure FormDockOver(Sender: TObject; Source: TDragDockObject; X, Y: Integer; State: TDragState; var Accept: Boolean);
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure FormShow(Sender: TObject);
    procedure FormStartDock(Sender: TObject; var DragObject: TDragDockObject);
    procedure FormCreate(Sender: TObject);
    procedure mn_CloseClick(Sender: TObject);
    procedure FormActivate(Sender: TObject);
    procedure btn_CloseClick(Sender: TObject);
    procedure Panel3MouseDown(Sender: TObject; Button: TMouseButton;
      Shift: TShiftState; X, Y: Integer);
    procedure Panel3MouseMove(Sender: TObject; Shift: TShiftState; X,
      Y: Integer);
    procedure Panel3MouseUp(Sender: TObject; Button: TMouseButton;
      Shift: TShiftState; X, Y: Integer);
    procedure Panel3DblClick(Sender: TObject);
  private
    FUndockedLeft: Integer;
    FUndockedTop: Integer;
    FFloatOnCloseDock: boolean;
    FfmParent: TfmASubForm;
    DragOrigin: TPoint;
    MouseDowning : Boolean;
    FCCTVIP: string;
    FCCTVName: string;
    FCCTVUserID: string;
    FCCTVUserPW: string;
    FCCTVPort: string;
    FSocketConnect: Boolean;
    function  ComputeDockingRect(var DockRect: TRect; MousePos: TPoint): TAlign;   //도킹되어 있는 상태에서 다른 폼이 도킹을 시도하는 경우 발생
    procedure CMDockClient(var Message: TCMDockClient); message CM_DOCKCLIENT;
    procedure WMNCLButtonDown(var Msg: TMessage); message WM_NCLBUTTONDOWN;
    procedure SetCCTVName(const Value: string);
    procedure SetSocketConnect(const Value: Boolean);
  public
    L_bFormActive : Boolean;
    procedure hideclosebutton(handle:integer);
  public
    property fmParent : TfmASubForm read FfmParent write FfmParent;
    property CCTVIP : string read FCCTVIP write FCCTVIP;
    property CCTVPort : string read FCCTVPort write FCCTVPort;
    property CCTVName : string read FCCTVName write SetCCTVName;
    property CCTVUserID : string read FCCTVUserID write FCCTVUserID;
    property CCTVUserPW : string read FCCTVUserPW write FCCTVUserPW;
    property UndockedLeft: Integer read FUndockedLeft;
    property UndockedTop: Integer read FUndockedTop;
    property FloatOnCloseDock: boolean read FFloatOnCloseDock write FFloatOnCloseDock;
    property SocketConnect : Boolean read FSocketConnect write SetSocketConnect;
  end;

implementation
uses
  uCommonFunction;
{$R *.dfm}

procedure TfmCCTV.FormDockOver(Sender: TObject; Source: TDragDockObject;
  X, Y: Integer; State: TDragState; var Accept: Boolean);
var
  ARect: TRect;
begin
  Accept := (Source.Control is TfmCCTV);
  //Draw dock preview depending on where the cursor is relative to our client area
  if Accept and (ComputeDockingRect(ARect, Point(X, Y)) <> alNone) then
  begin
    ComputeDockingRect(ARect, Point(X, Y));
    Source.DockRect := ARect;
  end;
end;

function TfmCCTV.ComputeDockingRect(var DockRect: TRect; MousePos: TPoint): TAlign;
var
  DockTopRect,
  DockLeftRect,
  DockBottomRect,
  DockRightRect,
  DockCenterRect: TRect;
begin
  Result := alNone;
  //divide form up into docking "Zones"
  DockLeftRect.TopLeft := Point(0, 0);
  DockLeftRect.BottomRight := Point(ClientWidth div 5, ClientHeight);

  DockTopRect.TopLeft := Point(ClientWidth div 5, 0);
  DockTopRect.BottomRight := Point(ClientWidth div 5 * 4, ClientHeight div 5);

  DockRightRect.TopLeft := Point(ClientWidth div 5 * 4, 0);
  DockRightRect.BottomRight := Point(ClientWidth, ClientHeight);

  DockBottomRect.TopLeft := Point(ClientWidth div 5, ClientHeight div 5 * 4);
  DockBottomRect.BottomRight := Point(ClientWidth div 5 * 4, ClientHeight);

  DockCenterRect.TopLeft := Point(ClientWidth div 5, ClientHeight div 5);
  DockCenterRect.BottomRight := Point(ClientWidth div 5 * 4, ClientHeight div 5 * 4);

  //Find out where the mouse cursor is, to decide where to draw dock preview.
  if PtInRect(DockLeftRect, MousePos) then
  begin
    Result := alLeft;
    DockRect := DockLeftRect;
    DockRect.Right := ClientWidth div 2;
  end
  else
  if PtInRect(DockTopRect, MousePos) then
  begin
    Result := alTop;
    DockRect := DockTopRect;
    DockRect.Left := 0;
    DockRect.Right := ClientWidth;
    DockRect.Bottom := ClientHeight div 2;
  end
  else
  if PtInRect(DockRightRect, MousePos) then
  begin
    Result := alRight;
    DockRect := DockRightRect;
    DockRect.Left := ClientWidth div 2;
  end
  else
  if PtInRect(DockBottomRect, MousePos) then
  begin
    Result := alBottom;
    DockRect := DockBottomRect;
    DockRect.Left := 0;
    DockRect.Right := ClientWidth;
    DockRect.Top := ClientHeight div 2;
 end
  else
  if PtInRect(DockCenterRect, MousePos) then
  begin
    Result := alClient;
    DockRect := DockCenterRect;
  end;
  if Result = alNone then Exit;

  //DockRect is in screen coordinates.
  DockRect.TopLeft := ClientToScreen(DockRect.TopLeft);
  DockRect.BottomRight := ClientToScreen(DockRect.BottomRight);
end;

procedure TfmCCTV.FormActivate(Sender: TObject);
begin
  if L_bFormActive then Exit;
  Media1.Initialize(1);
  Media1.ViewLayout := 0;
  L_bFormActive := True;
end;

procedure TfmCCTV.FormClose(Sender: TObject;
  var Action: TCloseAction);
begin
  //the action taken depends on how the form is docked.

(*  if (HostDockSite is TConjoinDockHost) then
  begin
    //remove the form's caption from the conjoin dock host's caption list
    TConjoinDockHost(HostDockSite).UpdateCaption(Self);

    //if we're the last visible form on a conjoined form, hide the form
    if HostDockSite.VisibleDockClientCount <= 1 then
      HostDockSite.Hide;
  end;
*)
  //if docked to a panel, tell the panel to hide itself. If there are other
  //visible dock clients on the panel, it ShowDockPanel won't allow it to
  //be hidden
  if (HostDockSite is TAdvPageControl) then
    fmParent.ShowDockPageControl(HostDockSite as TAdvPageControl, False, nil);

  Action := caHide;

  if not Floating and FloatOnCloseDock then
  begin
    // Float when close docked window
    Hide;
    ManualFloat(Rect(FUndockedLeft, FUndockedTop, FUndockedLeft + UndockWidth,
      FUndockedTop + UndockHeight));
  end;
end;

procedure TfmCCTV.FormCreate(Sender: TObject);
begin
  //BorderIcons:=[biSystemMenu];
  //hideclosebutton(handle);
  //BorderIcons:=[];
end;

procedure TfmCCTV.btn_CloseClick(Sender: TObject);
begin
  Close;
end;

procedure TfmCCTV.CMDockClient(var Message: TCMDockClient);
var
  ARect: TRect;
  DockType: TAlign;
  Host: TForm;
  Pt: TPoint;
begin
  //Overriding this message allows the dock form to create host forms
  //depending on the mouse position when docking occurs. If we don't override
  //this message, the form will use VCL's default DockManager.

  //NOTE: the only time ManualDock can be safely called during a drag
  //operation is we override processing of CM_DOCKCLIENT.
  if Message.DockSource.Control is TfmCCTV then
  begin
    //Find out how to dock (Using a TAlign as the result of ComputeDockingRect)
    Pt.X := Message.MousePos.X;
    Pt.Y := Message.MousePos.Y;
    DockType := ComputeDockingRect(ARect, Pt);

    //if we are over a dockable form docked to a panel in the
    //main window, manually dock the dragged form to the panel with
    //the correct orientation.
    if (HostDockSite is TPanel) then
    begin
      Message.DockSource.Control.ManualDock(HostDockSite, nil, DockType);
      Exit;
    end;

    //alClient => Create a TabDockHost and manually dock both forms to the PageControl
    //owned by the TabDockHost.
    if DockType = alClient then
    begin
(*      if (Message.DockSource.Control is TDockableForm) and (HostDockSite is TPageControl) then
        Host := TTabDockHost(HostDockSite.Parent)
      else
      begin
        Host := TTabDockHost.Create(Application);
        Host.BoundsRect := Self.BoundsRect;
      end;
      Self.ManualDock(TTabDockHost(Host).PageControl1, nil, alClient);
      Message.DockSource.Control.ManualDock(TTabDockHost(Host).PageControl1, nil, alClient);
      Host.Visible := True; *)
    end
    //if DockType <> alClient, create the ConjoinDockHost and manually dock both
    //forms to it. Be sure to make dockable forms non-dockable when hosted by
    // ConjoinDockForm, since it is using the VCL default DockManager.
    else
    begin
(*      Host := TConjoinDockHost.Create(Application);
      Host.BoundsRect:= Self.BoundsRect;
      Self.ManualDock(Host, nil, alNone);
      Self.DockSite := False;
      Message.DockSource.Control.ManualDock(Host, nil, DockType);
      TDockableForm(Message.DockSource.Control).DockSite := False;
      Host.Visible := True;    *)
    end;
  end;
end;

procedure TfmCCTV.FormShow(Sender: TObject);
begin
(*  if HostDockSite is TConjoinDockHost then
    TConjoinDockHost(HostDockSite).UpdateCaption(nil); *)
end;

procedure TfmCCTV.FormStartDock(Sender: TObject;
  var DragObject: TDragDockObject);
begin
  // create a customized DragDropObject
//  DragObject:= TTransparentDragDockObject.Create(Self);
end;

procedure TfmCCTV.hideclosebutton(handle: integer);
var
  hMenuHandle: Integer;
begin
  hMenuHandle := GetSystemMenu(Handle, False);
  if (hMenuHandle <> 0) then
  DeleteMenu(hMenuHandle, SC_CLOSE, MF_BYCOMMAND);
end;

procedure TfmCCTV.mn_CloseClick(Sender: TObject);
begin
  Close;
end;

procedure TfmCCTV.Panel3DblClick(Sender: TObject);
begin
  if WindowState = wsNormal then WindowState := wsMaximized
  else if WindowState = wsMaximized then WindowState := wsNormal;
end;

procedure TfmCCTV.Panel3MouseDown(Sender: TObject; Button: TMouseButton;
  Shift: TShiftState; X, Y: Integer);
begin
    if (Button = mbLeft) and (MouseDowning = False) then
    begin
        // DRAG POINT 저장
        DragOrigin := Point (X,Y);
        // MOUSE DOWN = TRUE 설정
        MouseDowning := True;
    end;
end;

procedure TfmCCTV.Panel3MouseMove(Sender: TObject; Shift: TShiftState; X,
  Y: Integer);
begin
    // MOUSE DOWN = TRUE CHECK
    if (MouseDowning = True) then
    begin
        Top := Top + Y - DragOrigin.Y;
        Left := Left + X - DragOrigin.X;
    end;
end;

procedure TfmCCTV.Panel3MouseUp(Sender: TObject; Button: TMouseButton;
  Shift: TShiftState; X, Y: Integer);
begin
    // MOUSE DOWN = FALSE 설정
  MouseDowning := False;

end;


procedure TfmCCTV.SetCCTVName(const Value: string);
begin
  FCCTVName := Value;
  Panel3.Caption := Value;

end;

procedure TfmCCTV.SetSocketConnect(const Value: Boolean);
var
  nPort : integer;
begin
  if FSocketConnect = Value then Exit;

  FSocketConnect := Value;
  if Value then
  begin
    if isDigit(CCTVPort) then nPort := strtoint(CCTVPort)
    else nPort := 80;

    Media1.Connect(0,CCTVIP + '/1/stream1',nPort,3,CCTVUserID,CCTVUserPW);
  end else
  begin
    Media1.Disconnect(0);
  end;
end;

procedure TfmCCTV.WMNCLButtonDown(var Msg: TMessage);
begin
  inherited;
  // This event happen when mouse click in caption
  // save initial window position
  FUndockedLeft:= Left;
  FUndockedTop:= Top;
end;

end.

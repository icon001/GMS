unit uSupremaFinger;

interface

uses
  System.SysUtils, System.Classes,Winapi.Windows;

const SF_TEMPLATE_SIZE = 384;
const SF_EpochDiff = 25569; // days between 30/12/1899 and 01/01/1970
const SF_SecsInDay = 86400; // number of seconds in a day
type
  UF_RET_CODE = (
    UF_RET_SUCCESS					= 0,

    // serial communication error
    UF_ERR_CANNOT_OPEN_SERIAL		= -1,
    UF_ERR_CANNOT_SETUP_SERIAL		= -2,
    UF_ERR_CANNOT_WRITE_SERIAL		= -3,
    UF_ERR_WRITE_SERIAL_TIMEOUT	= -4,
    UF_ERR_CANNOT_READ_SERIAL		= -5,
    UF_ERR_READ_SERIAL_TIMEOUT		= -6,
    UF_ERR_CHECKSUM_ERROR			= -7,
    UF_ERR_CANNOT_SET_TIMEOUT		= -8,

    // generic command error code
    UF_ERR_SCAN_FAIL				= -101,
    UF_ERR_NOT_FOUND				= -102,
    UF_ERR_NOT_MATCH				= -103,
    UF_ERR_TRY_AGAIN				= -104,
    UF_ERR_TIME_OUT					= -105,
    UF_ERR_MEM_FULL					= -106,
    UF_ERR_EXIST_ID					= -107,
    UF_ERR_FINGER_LIMIT				= -108,
    UF_ERR_UNSUPPORTED				= -109,
    UF_ERR_INVALID_ID				= -110,
    UF_ERR_TIMEOUT_MATCH			= -111,
    UF_ERR_BUSY						= -112,
    UF_ERR_CANCELED					= -113,
    UF_ERR_DATA_ERROR				= -114,
    UF_ERR_EXIST_FINGER 			= -115,
    UF_ERR_DURESS_FINGER 			= -116,
    UF_ERR_CARD_ERROR				= -117,
    UF_ERR_LOCKED					= -118,
    UF_ERR_ACCESS_NOT_GRANTED		= -119,

    UF_ERR_OUT_OF_MEMORY			= -200,
    UF_ERR_INVALID_PARAMETER		= -201,
    UF_ERR_FILE_IO					= -202,
    UF_ERR_INVALID_FILE				= -203,

    // socket error
    UF_ERR_CANNOT_START_SOCKET		= -301,
    UF_ERR_CANNOT_OPEN_SOCKET		= -302,
    UF_ERR_CANNOT_CONNECT_SOCKET	= -303,
    UF_ERR_CANNOT_READ_SOCKET		= -304,
    UF_ERR_READ_SOCKET_TIMEOUT		= -305,
    UF_ERR_CANNOT_WRITE_SOCKET		= -306,
    UF_ERR_WRITE_SOCKET_TIMEOUT		= -307,


    UF_ERR_UNKNOWN					= -9999
  );

  PARRINT64 = record
     Datas : array[0..128] of int64;
  end;

  PTemplate = record
     Datas : array[0..SF_TEMPLATE_SIZE - 1] of Longword;
  end;

  PFingerTemplate = ^FingerTemplate;
  FingerTemplate = record
     Template1 : array[0..SF_TEMPLATE_SIZE - 1] of Longword;
     Template2 : array[0..SF_TEMPLATE_SIZE - 1] of Longword;
     Template3 : array[0..SF_TEMPLATE_SIZE - 1] of Longword;
     Template4 : array[0..SF_TEMPLATE_SIZE - 1] of Longword;
  end;

  T_BS_InitSDK = function ():UF_RET_CODE; stdcall;
  T_BS_OpenSocket = function ( ipAddr :pAnsichar; port:integer; var handle :integer ):UF_RET_CODE; stdcall;
  T_BS_CloseSocket = function ( handle :integer ):UF_RET_CODE; stdcall;
  T_BS_OpenInternalUDP  = function ( var handle :integer ):UF_RET_CODE; stdcall;
  T_BS_CloseInternalUDP  = function ( handle :integer ):UF_RET_CODE; stdcall;
  T_BS_OpenSerial  = function ( port:pAnsiChar;baudrate:integer;var handle:integer ):UF_RET_CODE; stdcall;
  T_BS_CloseSerial  = function ( handle:integer ):UF_RET_CODE; stdcall;
  T_BS_OpenUSB  = function (var handle:integer ):UF_RET_CODE; stdcall;
  T_BS_GetDeviceID = function (handle:integer;var deviceID:int64;var deviceType:integer ):UF_RET_CODE; stdcall;
  T_BS_SetDeviceID = function (handle:integer;deviceID:int64;deviceType:integer ):UF_RET_CODE; stdcall;
  T_BS_SearchDevice  = function (handle:integer;var deviceIDs:PARRINT64;var deviceType:PARRINT64; var numOfDevice:integer):UF_RET_CODE; stdcall;
  T_BS_SearchDeviceInLAN  = function (handle:integer;var numOfDevice : integer;var deviceIDs:PARRINT64; var deviceTypes:PARRINT64; var deviceAddrs:PARRINT64):UF_RET_CODE; stdcall;
  T_BS_ReadCardNo = function (handle:integer;var  acardID:Longword; var acustomID:integer):UF_RET_CODE; stdcall;
  T_BS_ScanTemplate = function (handle:integer;nIndex:integer;pfnTemplate : PFingerTemplate):UF_RET_CODE; stdcall;
  T_BS_ScanTemplateADD = function (handle:integer;aFingerCount:integer;aUserID:integer;aCustomerCardID:integer;fnTemplate:FingerTemplate;aCardNo:Longword;aExpireTime:int64):UF_RET_CODE; stdcall;
  T_BS_ReadImage = function (handle:integer;imageType:integer;bitmapImage:pAnsichar;var imageLen : integer):UF_RET_CODE; stdcall;

  TdmSupremaFinger = class(TDataModule)
    procedure DataModuleCreate(Sender: TObject);
  private
    L_nLibHandle : integer;
    L_nSockethandle : integer;
  private
    FConnected: Boolean;
    FDeviceIP: string;
    FSocketOPEN: Boolean;
    FDevicePort: integer;
    procedure SetSocketOPEN(const Value: Boolean);
    { Private declarations }
  public
    function GetFingerImage(aFileName:string):UF_RET_CODE;
    function GetFingerTemplate(aIndex:integer;var aFingerTemplate:string):UF_RET_CODE;
    function GetReadCardNo(var aCardNo:string):UF_RET_CODE;
  public
    { Public declarations }
    property Connected : Boolean read FConnected write FConnected;
    property DeviceIP : string read FDeviceIP write FDeviceIP;
    property DevicePort : integer read FDevicePort write FDevicePort;
    property SocketOPEN : Boolean read FSocketOPEN write SetSocketOPEN;
  end;

var
  dmSupremaFinger: TdmSupremaFinger;

implementation

uses
  uCommonFunction;

{%CLASSGROUP 'System.Classes.TPersistent'}

{$R *.dfm}

{ TdmSupremaFinger }

procedure TdmSupremaFinger.DataModuleCreate(Sender: TObject);
var
  BS_InitSDK : T_BS_InitSDK;
  nResult : UF_RET_CODE;
begin
  L_nLibHandle := -1;
  L_nLibHandle := LoadLibrary('BioStar16.dll');
  if L_nLibHandle > 0 then
  begin
    @BS_InitSDK := GetProcAddress(L_nLibHandle,'F_BS_InitSDK');
    if Not(@BS_InitSDK = nil)  then
    begin
      nResult := BS_InitSDK();
      if nResult <> UF_RET_SUCCESS then L_nLibHandle := 0;
    end else
    begin
      L_nLibHandle := 0;
    end;
  end;
  DevicePort := 1471;
end;

function TdmSupremaFinger.GetFingerImage(aFileName: string): UF_RET_CODE;
var
  nResult : UF_RET_CODE;
  GetScanReadImage : T_BS_ReadImage;
  imageLen : integer;
  bitmapImage : pAnsichar;
  i : integer;
  FileStream      : TFileStream;
begin
  result := UF_ERR_CANNOT_OPEN_SERIAL;
  if L_nLibHandle = 0 then
  begin
    SocketOpen := False;
    Exit;
  end;
  @GetScanReadImage := GetProcAddress(L_nLibHandle,'F_BS_ReadImage');
  if Not(@GetScanReadImage = nil)  then
  begin
    bitmapImage := AllocMem(10 * 1024 * 1024 ); //충분하게 10M 까지 잡자
    nResult := GetScanReadImage(L_nSockethandle,255,bitmapImage,imageLen);   //1471
    if nResult = UF_RET_SUCCESS then
    begin
      FileStream:=Tfilestream.Create(aFileName,fmCreate ,fmShareDenyWrite );
      try
        FileStream.WriteBuffer(bitmapImage[0],imageLen);
      finally
        FileStream.Free;
      end;
    end;
    if bitmapImage <> Nil then FreeMem(bitmapImage);
  end;
  result := nResult;
end;

function TdmSupremaFinger.GetFingerTemplate(aIndex: integer;var
  aFingerTemplate: string): UF_RET_CODE;
var
  nResult : UF_RET_CODE;
  GetScanTemplate : T_BS_ScanTemplate;
  stFingerTemplate : string;
  fnTemplate : PFingerTemplate;
  i : integer;
begin
  stFingerTemplate := '';
  result := UF_ERR_CANNOT_OPEN_SERIAL;
  if L_nLibHandle = 0 then
  begin
    SocketOpen := False;
    Exit;
  end;
  @GetScanTemplate := GetProcAddress(L_nLibHandle,'F_BS_ScanTemplate');
  if Not(@GetScanTemplate = nil)  then
  begin
    Try
      New(fnTemplate);
      nResult := GetScanTemplate(L_nSockethandle,aIndex,fnTemplate);   //1471
      if nResult = UF_RET_SUCCESS then
      begin
        if aIndex = 1 then
        begin
          for i := 0 to SF_TEMPLATE_SIZE - 1 do
            stFingerTemplate := stFingerTemplate + FillZeroNumber(fnTemplate.Template1[i],10);
        end else if aIndex = 2 then
        begin
          for i := 0 to SF_TEMPLATE_SIZE - 1 do
            stFingerTemplate := stFingerTemplate + FillZeroNumber(fnTemplate.Template2[i],10);
        end else if aIndex = 3 then
        begin
          for i := 0 to SF_TEMPLATE_SIZE - 1 do
            stFingerTemplate := stFingerTemplate + FillZeroNumber(fnTemplate.Template3[i],10);
        end else if aIndex = 4 then
        begin
          for i := 0 to SF_TEMPLATE_SIZE - 1 do
            stFingerTemplate := stFingerTemplate + FillZeroNumber(fnTemplate.Template4[i],10);
        end;
      end;
    Finally
      Dispose(fnTemplate);
    End;
  end;
  aFingerTemplate := stFingerTemplate;
  result := nResult;
end;

function TdmSupremaFinger.GetReadCardNo(var aCardNo: string): UF_RET_CODE;
var
  nResult : UF_RET_CODE;
  GetReadCardNo : T_BS_ReadCardNo;
  nCardNo : Longword;
  nCustomerID : integer;
begin
  aCardNo := '';
  result := UF_ERR_CANNOT_OPEN_SERIAL;
  if L_nLibHandle = 0 then
  begin
    SocketOpen := False;
    Exit;
  end;
  @GetReadCardNo := GetProcAddress(L_nLibHandle,'F_BS_ReadCardNo');
  if Not(@GetReadCardNo = nil)  then
  begin
    nResult := GetReadCardNo(L_nSockethandle,nCardNo, nCustomerID);   //1471
    if nResult = UF_RET_SUCCESS then
    begin
      aCardNo := dec2Hex(int64(nCardNo),8);
    end;
  end;
  result := nResult;
end;

procedure TdmSupremaFinger.SetSocketOPEN(const Value: Boolean);
var
  BS_OpenSocket : T_BS_OpenSocket;
  BS_CloseSocket : T_BS_CloseSocket;
  nResult : UF_RET_CODE;
begin
  if FSocketOPEN = Value then Exit;
  FSocketOPEN := Value;

  if Value then
  begin
    if L_nLibHandle < 1 then
    begin
      SocketOPEN := False;
      Exit;
    end;
    @BS_OpenSocket := GetProcAddress(L_nLibHandle,'F_BS_OpenSocket');
    if Not(@BS_OpenSocket = nil)  then
    begin
      nResult := BS_OpenSocket(pAnsiChar(AnsiString(DeviceIP)), DevicePort, L_nSockethandle);   //1471
      if nResult = UF_RET_SUCCESS then
      begin
        Connected := True;
      end else
      begin
        SocketOPEN := False;
      end;
    end else
    begin
      SocketOPEN := False;
    end;
  end else
  begin
    Connected := False;
    @BS_CloseSocket := GetProcAddress(L_nLibHandle,'F_BS_CloseSocket');
    if Not(@BS_CloseSocket = nil)  then
    begin
      nResult := BS_CloseSocket(L_nSockethandle);   //1471
    end;
  end;
end;

end.

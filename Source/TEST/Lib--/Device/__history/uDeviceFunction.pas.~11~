unit uDeviceFunction;

interface

uses
  System.SysUtils, System.Classes;

type
  TdmDeviceFunction = class(TDataModule)
  private
    { Private declarations }
  public
    { Public declarations }
    function EncodeData(aKey:Byte; aData: String): String; export;
    function GetFixedCardNoCheck(aCardNo:string;bCardFixedUse:Boolean;
             aCardFixedFillChar:string;nCardFixedPosition,nCardFixedLength:integer):string;
    function PacketCreate(aProgramType:integer;aLen,aVer,aDeviceID,aCmd,aData,aMsgNo:string):string;
  end;

var
  dmDeviceFunction: TdmDeviceFunction;

implementation
uses
  uCommonFunction,
  uDeviceVariable;

{%CLASSGROUP 'System.Classes.TPersistent'}

{$R *.dfm}

{ TDataModule1 }


function TdmDeviceFunction.EncodeData(aKey: Byte; aData: String): String;
var
  Encodetype: Integer;
  aMakeValue: Byte;
  I: Integer;
begin
  EncodeType:= aKey SHR 6; //7,6 번 Bit가 엔코딩 타입
  aMakeValue:= aKey;
  for I:= 5 to 7 do ClearBitB(aMakeValue,I); //1,2,3,4,5 Bit가 난수번호

  case EncodeType of
    0: Result:= DataConvert1(aMakeValue,aData);
    1: Result:= DataConvert2(aMakeValue,aData);
    else Result:= aData;
  end;
end;

function TdmDeviceFunction.GetFixedCardNoCheck(aCardNo: string;
  bCardFixedUse: Boolean; aCardFixedFillChar: string; nCardFixedPosition,
  nCardFixedLength: integer): string;
var
  bFront : Boolean;
begin
  result := aCardNo;
  if Not bCardFixedUse then Exit; //고정길이 사용하지 않으면 원 카드데이터 리턴
  bFront := True;
  if nCardFixedPosition <> 0 then bFront := False;//뒤에 채움문자 채우는 경우
  result := FillCharString(aCardNo,aCardFixedFillChar[1],nCardFixedLength,bFront);

end;



function TdmDeviceFunction.PacketCreate(aProgramType: integer; aLen, aVer,
  aDeviceID, aCmd, aData, aMsgNo: string): string;
var
  stPacket : string;
  nKey : integer;
begin
  stPacket := STX + aLen + #$20 + aVer + aDeviceID + aCmd + aMsgNo + aData;
  stPacket  := stPacket + MakeCSData(stPacket + ETX,aProgramType) + ETX;
  nKey    := $20;
  result := Copy(stPacket, 1, 5) + EncodeData(nKey,
    Copy(stPacket, 6, Length(stPacket) - 6)) + ETX;
end;

end.

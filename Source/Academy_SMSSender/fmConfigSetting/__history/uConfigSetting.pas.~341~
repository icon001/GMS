unit uConfigSetting;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, W7Classes, W7Panels, AdvOfficeTabSet,
  AdvOfficeTabSetStylers, AdvSmoothPanel, Vcl.ExtCtrls, AdvSmoothLabel,
  Vcl.StdCtrls, AdvEdit, Vcl.Buttons, Vcl.Grids, AdvObj, BaseGrid, AdvGrid,
  AdvToolBtn,ADODB,ActiveX, uSubForm, CommandArray,Winapi.WinSpool,System.iniFiles,
  AdvGroupBox, FolderDialog, AdvGlassButton, AdvGlowButton, ToolPanels, AdvCombo,
  Vcl.Menus, AdvTabSet, AdvPageControl, Vcl.ComCtrls, AdvOfficeButtons,
  Vcl.Imaging.pngimage, AdvOfficePager, AdvOfficePagerStylers, AdvAppStyler,
  AdvPanel;

type
  TfmConfigSetting = class(TfmASubForm)
    AdvOfficeTabSetOfficeStyler1: TAdvOfficeTabSetOfficeStyler;
    Image1: TImage;
    BodyPanel: TW7Panel;
    menuTab: TAdvOfficeTabSet;
    Config: TAdvSmoothPanel;
    FolderDialog1: TFolderDialog;
    AdvOfficePager1: TAdvOfficePager;
    btn_minimize: TAdvGlowButton;
    btn_Close: TAdvGlowButton;
    AdvFormStyler1: TAdvFormStyler;
    AdvOfficePagerOfficeStyler1: TAdvOfficePagerOfficeStyler;
    AdvPanelStyler1: TAdvPanelStyler;
    AdvOfficePage3: TAdvOfficePage;
    AdvSmoothPanel1: TAdvSmoothPanel;
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure FormShow(Sender: TObject);
    procedure FormResize(Sender: TObject);
    procedure btn_CardRegistportSaveClick(Sender: TObject);
    procedure sg_ATPosiCodeKeyDown(Sender: TObject; var Key: Word;
      Shift: TShiftState);
    procedure btn_ATWorkTypeClick(Sender: TObject);
    procedure sg_ATWorkTypeClick(Sender: TObject);
    procedure btn_ATWorkTypeSaveClick(Sender: TObject);
    procedure sg_ATWorkTypeKeyDown(Sender: TObject; var Key: Word;
      Shift: TShiftState);
    procedure cmb_ATWorkTypeChange(Sender: TObject);
    procedure btn_ATCodeSaveClick(Sender: TObject);
    procedure cmb_FoodTypeChange(Sender: TObject);
    procedure sg_FoodCodeKeyDown(Sender: TObject; var Key: Word;
      Shift: TShiftState);
    procedure sg_FoodCodeClick(Sender: TObject);
    procedure btn_FoodCodeDeleteClick(Sender: TObject);
    procedure btn_FoodCodeAddClick(Sender: TObject);
    procedure btn_FoodTypeAddClick(Sender: TObject);
    procedure btn_CloseClick(Sender: TObject);
    procedure btn_minimizeClick(Sender: TObject);
  private
    { Private declarations }
    function LoadCustomerType:Boolean;
    Function SearchATCodeList(aCode : string) : Boolean;
    Function SearchFoodCodeList(aCode:string):Boolean;
    Function SearchATPosiCodeList(aCode:string):Boolean;
    Function SearchATWorkTypeList(aCode:string):Boolean;
    Function FormClear:Boolean;
    Function CreateComboTime:Boolean;
  private
    AttendWorkType : TStringList;
    ComPortList : TStringList;
    { Private declarations }
    function GetSerialPortList(List : TStringList; const doOpenTest : Boolean = True) : LongWord;
    function EncodeCommportName(PortNum : WORD) : String;
    function DecodeCommportName(PortName : String) : WORD;
  public
    { Public declarations }
    procedure Form_Close;
  end;

var
  fmConfigSetting: TfmConfigSetting;

implementation
uses
  uComboBoxCodeLoad,
  uCommonFunction,
  uCommonVariable,
  uDataBase,
  uDBDelete,
  uDBFingerRelay,
  uDBFunction,
  uDBInsert,
  uDBRelay,
  uDBUpdate,
  uFormVariable,
  uMain;

{$R *.dfm}


procedure TfmConfigSetting.btn_CardRegistportSaveClick(Sender: TObject);
begin
  inherited;
  self.FindSubForm('Main').FindCommand('ACTION').Params.Values['VALUE'] := 'CRADREGISTERPORTREFRESH';
  self.FindSubForm('Main').FindCommand('ACTION').Execute;
  showmessage('설정되었습니다.');
end;


procedure TfmConfigSetting.btn_CloseClick(Sender: TObject);
begin
  inherited;
  Close;
end;

procedure TfmConfigSetting.cmb_ATWorkTypeChange(Sender: TObject);
begin
  inherited;
  SearchATCodeList('');
end;

procedure TfmConfigSetting.cmb_FoodTypeChange(Sender: TObject);
begin
  inherited;
  SearchFoodCodeList('');
end;

function TfmConfigSetting.CreateComboTime: Boolean;
begin
end;

function TfmConfigSetting.DecodeCommportName(PortName: String): WORD;
var
 Pt : Integer;
begin
 PortName := UpperCase(PortName);
 if (Copy(PortName, 1, 3) = 'COM') then begin
    Delete(PortName, 1, 3);
    Pt := Pos(':', PortName);
    if Pt = 0 then Result := 0
       else Result := StrToInt(Copy(PortName, 1, Pt-1));
 end
 else if (Copy(PortName, 1, 7) = '\\.\COM') then begin
    Delete(PortName, 1, 7);
    Result := StrToInt(PortName);
 end
 else Result := 0;

end;

function TfmConfigSetting.EncodeCommportName(PortNum: WORD): String;
begin
 if PortNum < 10
    then Result := 'COM' + IntToStr(PortNum) + ':'
    else Result := '\\.\COM'+IntToStr(PortNum);

end;

function TfmConfigSetting.FormClear: Boolean;
begin
end;

procedure TfmConfigSetting.FormClose(Sender: TObject;
  var Action: TCloseAction);
begin
  self.FindSubForm('Main').FindCommand('FORMENABLE').Params.Values['NAME'] := inttostr(con_FormAFSConfig);
  self.FindSubForm('Main').FindCommand('FORMENABLE').Params.Values['VALUE'] := 'FALSE';
  self.FindSubForm('Main').FindCommand('FORMENABLE').Execute;

  AttendWorkType.Free;
  ComPortList.Free;
  Action := caFree;
end;

procedure TfmConfigSetting.FormResize(Sender: TObject);
begin
  btn_Close.Left := AdvOfficePager1.Width - btn_Close.Width - 10;
  btn_minimize.Left := btn_Close.Left - btn_minimize.Width - 2;

  if Windowstate = wsMaximized then
  begin
    btn_minimize.Visible := True;
    btn_Close.Visible := True;
  end else
  begin
    btn_minimize.Visible := False;
    btn_Close.Visible := False;
  end;

end;

procedure TfmConfigSetting.FormShow(Sender: TObject);
var
  stComPort : string;
  nIndex : integer;
begin
  top := 0;
  Left := 0;
  Width := BodyPanel.Width;

  self.FindSubForm('Main').FindCommand('FORMENABLE').Params.Values['NAME'] := inttostr(con_FormAFSConfig);
  self.FindSubForm('Main').FindCommand('FORMENABLE').Params.Values['VALUE'] := 'TRUE';
  self.FindSubForm('Main').FindCommand('FORMENABLE').Execute;

end;

procedure TfmConfigSetting.Form_Close;
begin
  Close;
end;

function TfmConfigSetting.GetSerialPortList(List: TStringList;
  const doOpenTest: Boolean): LongWord;
type
 TArrayPORT_INFO_1 = array[0..0] Of PORT_INFO_1;
 PArrayPORT_INFO_1 = ^TArrayPORT_INFO_1;
var
{$IF USE_ENUMPORTS_API}
 PL : PArrayPORT_INFO_1;
 TotalSize, ReturnCount : LongWord;
 Buf : String;
 CommNum : WORD;
{$IFEND}
 I : LongWord;
 CHandle : THandle;
begin
 List.Clear;
{$IF USE_ENUMPORTS_API}
 EnumPorts(nil, 1, nil, 0, TotalSize, ReturnCount);
 if TotalSize < 1 then begin
    Result := 0;
    Exit;
    end;
 GetMem(PL, TotalSize);
 EnumPorts(nil, 1, PL, TotalSize, TotalSize, Result);

 if Result < 1 then begin
    FreeMem(PL);
    Exit;
    end;

 for I:=0 to Result-1 do begin
    Buf := UpperCase(PL^[I].pName);
    CommNum := DecodeCommportName(PL^[I].pName);
    if CommNum = 0 then Continue;
    List.AddObject(EncodeCommportName(CommNum), Pointer(CommNum));
    end;
{$ELSE}
 for I:=1 to G_nMaxComPort do List.AddObject(EncodeCommportName(I), Pointer(I));
{$IFEND}
 // Open Test
 if List.Count > 0 then
   for I := List.Count-1 downto 0 do
   begin
      CHandle := CreateFile(PChar(List[I]), GENERIC_WRITE or GENERIC_READ,
        0, nil, OPEN_EXISTING,
        FILE_ATTRIBUTE_NORMAL,
        0);
      if CHandle = INVALID_HANDLE_VALUE then
      begin
        if doOpenTest or (GetLastError() <> ERROR_ACCESS_DENIED) then
            List.Delete(I);
        Continue;
      end;
      CloseHandle(CHandle);
   end;

 Result := List.Count;
{$IF USE_ENUMPORTS_API}
 if Assigned(PL) then FreeMem(PL);
{$IFEND}

end;

function TfmConfigSetting.LoadCustomerType: Boolean;
begin
end;

function TfmConfigSetting.SearchATCodeList(aCode: string): Boolean;
begin

end;

function TfmConfigSetting.SearchATPosiCodeList(aCode:string): Boolean;
begin


end;

function TfmConfigSetting.SearchATWorkTypeList(aCode: string): Boolean;
begin

end;

function TfmConfigSetting.SearchFoodCodeList(aCode: string): Boolean;
begin

end;

procedure TfmConfigSetting.sg_ATPosiCodeKeyDown(Sender: TObject; var Key: Word;
  Shift: TShiftState);
begin
  inherited;
  if (Key = 40) or (Key = 13) then
  begin
    if sg_ATPosiCode.Row = sg_ATPosiCode.RowCount - 1 then
    begin
      if sg_ATPosiCode.Cells[0,sg_ATPosiCode.Row] <> '' then
      begin
        sg_ATPosiCode.AddRow;
      end;
    end;
  end;

end;

procedure TfmConfigSetting.sg_ATWorkTypeClick(Sender: TObject);
begin
  inherited;
  ed_ATWorkTypeName.Text := '';
  ed_ATWorkTypeCode.Text := '';
  cmb_Saturday.ItemIndex := 0;
  cmb_absence.ItemIndex := 0;
  cmb_NotBack.ItemIndex := 0;

  with sg_ATWorkType do
  begin
    ed_ATWorkTypeName.Text := Cells[0,Row];
    ed_ATWorkTypeCode.Text := Cells[1,Row];
    if isDigit(Cells[2,Row]) then
      cmb_Saturday.ItemIndex := strtoint(Cells[2,Row]);
    if isDigit(Cells[3,Row]) then
      cmb_absence.ItemIndex := strtoint(Cells[3,Row]);
    if isDigit(Cells[4,Row]) then
      cmb_NotBack.ItemIndex := strtoint(Cells[4,Row]);
  end;

end;

procedure TfmConfigSetting.sg_ATWorkTypeKeyDown(Sender: TObject; var Key: Word;
  Shift: TShiftState);
begin
  inherited;
  if (Key = 40) or (Key = 13) then
  begin
    if sg_ATWorkType.Row = sg_ATWorkType.RowCount - 1 then
    begin
      if sg_ATWorkType.Cells[1,sg_ATWorkType.Row] <> '' then
      begin
        sg_ATWorkType.AddRow;
      end;
    end;
  end;

end;

procedure TfmConfigSetting.sg_FoodCodeClick(Sender: TObject);
begin
  inherited;
//
  with sg_FoodCode do
  begin
    ed_FoodName.Text := Cells[0,Row];
    ed_FoodStartTime.Text := Cells[1,Row];
    ed_FoodEndTime.Text := Cells[2,Row];
    ed_FoodAmt.Text := Cells[3,Row];
    ed_FoodCode.Text := Cells[4,Row];
    ed_FoodOutTime.Text := Cells[5,Row];
  end;
end;

procedure TfmConfigSetting.sg_FoodCodeKeyDown(Sender: TObject; var Key: Word;
  Shift: TShiftState);
begin
  inherited;
  Exit;
  if (Key = 40) or (Key = 13) then
  begin
    if sg_FoodCode.Row = sg_FoodCode.RowCount - 1 then
    begin
      if sg_FoodCode.Cells[1,sg_FoodCode.Row] <> '' then
      begin
        sg_FoodCode.AddRow;
      end;
    end;
  end;
end;

procedure TfmConfigSetting.btn_ATWorkTypeClick(Sender: TObject);
begin
  inherited;
  panATPosiCode.Visible := False;
  PanATWorkType.Visible := True;
  panATCode.Visible := False;
  PanATWorkType.Top := 34;
  PanATWorkType.Left := 135;
  SearchATWorkTypeList('');

end;

procedure TfmConfigSetting.btn_ATWorkTypeSaveClick(Sender: TObject);
var
  stCode : string;
begin
  inherited;
  if ed_ATWorkTypeCode.Text = '' then
  begin
    stCode := dmDBFunction.GetNextTB_ATTENDWORKTYPECode;
    dmDBInsert.InsertIntoTB_ATTENDWORKTYPE_VALUE(stCode,ed_ATWorkTypeName.Text,inttostr(cmb_NotBack.ItemIndex),inttostr(cmb_Saturday.ItemIndex),inttostr(cmb_absence.ItemIndex));
  end else
  begin
    stCode := ed_ATWorkTypeCode.Text;
    dmDBUpdate.UpdateTB_ATTENDWORKTYPE_VALUE(stCode,ed_ATWorkTypeName.Text,inttostr(cmb_NotBack.ItemIndex),inttostr(cmb_Saturday.ItemIndex),inttostr(cmb_absence.ItemIndex));;
  end;
  fmMain.LoadConfig;
  SearchATWorkTypeList(stCode);
end;

procedure TfmConfigSetting.btn_ATCodeSaveClick(Sender: TObject);
var
  stCode : string;
  stWorkTypeCode : string;
  stYesterDayTime : string;

  stWorkStartTime,stSWorkStartTime,stHWorkStartTime : string;
  stWorkEndTime,stSWorkEndTime,stHWorkEndTime : string;
  stInFromTime,stSInFromTime,stHInFromTime : string;
  stInToTime,stSInToTime,stHInToTime : string;
  stExtendTime,stSExtendTime,stHExtendTime : string;
  stNightTime,stSNightTime,stHNightTime : string;
  stExtendAdd,stSExtendAdd,stHExtendAdd : string;
  stNightAdd,stSNightAdd,stHNightAdd : string;
  stTemp : string;
begin
  inherited;

  stYesterDayTime := FillZeroStrNum(cmb_YsterdayHH.Text,2) + FillZeroStrNum(cmb_YsterdayMM.Text,2);

  stWorkStartTime := FillZeroStrNum(cmb_WorkStartHH.Text,2) + FillZeroStrNum(cmb_WorkStartMM.Text,2);
  stWorkEndTime := FillZeroStrNum(cmb_WorkEndHH.Text,2) + FillZeroStrNum(cmb_WorkEndMM.Text,2);
  stInFromTime := FillZeroStrNum(cmb_WorkINFROMHH.Text,2) + FillZeroStrNum(cmb_WorkINFROMMM.Text,2);
  stInToTime := FillZeroStrNum(cmb_WorkINToHH.Text,2) + FillZeroStrNum(cmb_WorkINToMM.Text,2);
  stExtendTime := FillZeroStrNum(cmb_WorkEXTENDHH.Text,2) + FillZeroStrNum(cmb_WorkEXTENDMM.Text,2);
  stNightTime := FillZeroStrNum(cmb_WorkNIGHTHH.Text,2) + FillZeroStrNum(cmb_WorkNIGHTMM.Text,2);
  if isDigit(ed_ExtendAdd.Text) then stExtendAdd := ed_ExtendAdd.Text
  else stExtendAdd := '0';
  if isDigit(ed_NightAdd.Text) then stNightAdd := ed_NightAdd.Text
  else stNightAdd := '0';

  stSWorkStartTime := FillZeroStrNum(cmb_SWorkStartHH.Text,2) + FillZeroStrNum(cmb_SWorkStartMM.Text,2);
  stSWorkEndTime := FillZeroStrNum(cmb_SWorkEndHH.Text,2) + FillZeroStrNum(cmb_SWorkEndMM.Text,2);
  stSInFromTime := FillZeroStrNum(cmb_SWorkINFROMHH.Text,2) + FillZeroStrNum(cmb_SWorkINFROMMM.Text,2);
  stSInToTime := FillZeroStrNum(cmb_SWorkINToHH.Text,2) + FillZeroStrNum(cmb_SWorkINToMM.Text,2);
  stSExtendTime := FillZeroStrNum(cmb_SWorkEXTENDHH.Text,2) + FillZeroStrNum(cmb_SWorkEXTENDMM.Text,2);
  stSNightTime := FillZeroStrNum(cmb_SWorkNIGHTHH.Text,2) + FillZeroStrNum(cmb_SWorkNIGHTMM.Text,2);
  if isDigit(ed_SExtendAdd.Text) then stSExtendAdd := ed_SExtendAdd.Text
  else stSExtendAdd := '0';
  if isDigit(ed_SNightAdd.Text) then stSNightAdd := ed_SNightAdd.Text
  else stSNightAdd := '0';

  stHWorkStartTime := FillZeroStrNum(cmb_HWorkStartHH.Text,2) + FillZeroStrNum(cmb_HWorkStartMM.Text,2);
  stHWorkEndTime := FillZeroStrNum(cmb_HWorkEndHH.Text,2) + FillZeroStrNum(cmb_HWorkEndMM.Text,2);
  stHInFromTime := FillZeroStrNum(cmb_HWorkINFROMHH.Text,2) + FillZeroStrNum(cmb_HWorkINFROMMM.Text,2);
  stHInToTime := FillZeroStrNum(cmb_HWorkINToHH.Text,2) + FillZeroStrNum(cmb_HWorkINToMM.Text,2);
  stHExtendTime := FillZeroStrNum(cmb_HWorkEXTENDHH.Text,2) + FillZeroStrNum(cmb_HWorkEXTENDMM.Text,2);
  stHNightTime := FillZeroStrNum(cmb_HWorkNIGHTHH.Text,2) + FillZeroStrNum(cmb_HWorkNIGHTMM.Text,2);
  if isDigit(ed_HExtendAdd.Text) then stHExtendAdd := ed_HExtendAdd.Text
  else stHExtendAdd := '0';
  if isDigit(ed_HNightAdd.Text) then stHNightAdd := ed_HNightAdd.Text
  else stHNightAdd := '0';


  if ed_ATCode.Text = '' then
  begin
    if cmb_ATWorkType.ItemIndex < 0 then
    begin
      showmessage('근무자타입선택이 잘못 되었습니다.');
      Exit;
    end;
    stWorkTypeCode := AttendWorkType.Strings[cmb_ATWorkType.ItemIndex];
    stCode := dmDBFunction.GetNextTB_ATTENDCODEValue(stWorkTypeCode);

    if dmDBFunction.CheckTB_ATTENDCODE_WorkStartTime(stWorkTypeCode,stCode,'1',stInFromTime,stInToTime,stTemp) = 1 then
    begin
      showmessage(stTemp + ' 와 출근 가능시간이 중복되었습니다.');
      Exit;
    end;

    (*aAWCode, aCode, aName,aYesterDayTime, aWorkStartTime,
  aWorkEndTime, aInFromTime, aInToTime, aExtendTime, aNightTime, aNormalAdd,
  aEarlyAdd, aJigakAdd, aJotaeAdd, aExtendAdd, aNightAdd, aSWorkStartTime,
  aSWorkEndTime, aSInFromTime, aSInToTime, aSExtendTime, aSNightTime,
  aSNormalAdd, aSEarlyAdd, aSJigakAdd, aSJotaeAdd, aSExtendAdd, aSNightAdd,
  aHWorkStartTime, aHWorkEndTime, aHInFromTime, aHInToTime, aHExtendTime,
  aHNightTime, aHNormalAdd, aHEarlyAdd, aHJigakAdd, aHJotaeAdd, aHExtendAdd,
  aHNightAdd, aOutRange, aSoutRange, aHoutRange*)

    dmDBInsert.InsertIntoTB_ATTENDCODE_VALUE(stWorkTypeCode,stCode,ed_ATCodeName.Text,stYesterDayTime,stWorkStartTime,stWorkEndTime,
               stInFromTime,stInToTime,stExtendTime,stNightTime,'0','0','0','0',stExtendAdd,stNightAdd,stSWorkStartTime,stSWorkEndTime,
               stSInFromTime,stSInToTime,stSExtendTime,stSNightTime,'0','0','0','0',stSExtendAdd,stSNightAdd,stHWorkStartTime,stHWorkEndTime,
               stHInFromTime,stHInToTime,stHExtendTime,stHNightTime,'0','0','0','0',stHExtendAdd,stHNightAdd,'0','0','0');
  end else
  begin
    stCode := ed_ATCode.Text;
    stWorkTypeCode := ed_ATCodeAWCode.Text;
    if dmDBFunction.CheckTB_ATTENDCODE_WorkStartTime(stWorkTypeCode,stCode,'1',stInFromTime,stInToTime,stTemp) = 1 then
    begin
      showmessage(stTemp + ' 와 출근 가능시간이 중복되었습니다.');
      Exit;
    end;
    dmDBUpdate.UpdateTB_ATTENDCODE_VALUE(stWorkTypeCode,stCode,ed_ATCodeName.Text,stYesterDayTime,stWorkStartTime,stWorkEndTime,
               stInFromTime,stInToTime,stExtendTime,stNightTime,'0','0','0','0',stExtendAdd,stNightAdd,stSWorkStartTime,stSWorkEndTime,
               stSInFromTime,stSInToTime,stSExtendTime,stSNightTime,'0','0','0','0',stSExtendAdd,stSNightAdd,stHWorkStartTime,stHWorkEndTime,
               stHInFromTime,stHInToTime,stHExtendTime,stHNightTime,'0','0','0','0',stHExtendAdd,stHNightAdd,'0','0','0');
  end;
  fmMain.LoadConfig;
  SearchATCodeList(stWorkTypeCode + stCode);
end;

procedure TfmConfigSetting.btn_FoodCodeAddClick(Sender: TObject);
var
  stFoodType : string;
  stFoodCode : string;
  stFoodUse : string;
  stFoodOutTime : string;
begin
  inherited;
  stFoodUse := inttostr(cmb_FoodUse.ItemIndex);
  dmDBUpdate.UpdateTB_CONFIG_Field_StringValue('FOOD','USE','CO_CONFIGVALUE',stFoodUse);
  G_bFoodDupEvent := chk_DupFoodEvent.Checked;
  if G_bFoodDupEvent then
     dmDBUpdate.UpdateTB_CONFIG_Field_StringValue('FOOD','DUPEVENT','CO_CONFIGVALUE','1')
  else dmDBUpdate.UpdateTB_CONFIG_Field_StringValue('FOOD','DUPEVENT','CO_CONFIGVALUE','0');
  G_bFoodDedicateDoorUse := chk_FoodAutoGrade.Checked;
  if G_bFoodDedicateDoorUse then
     dmDBUpdate.UpdateTB_CONFIG_Field_StringValue('COMMON','FDAUTO','CO_CONFIGVALUE','1')
  else dmDBUpdate.UpdateTB_CONFIG_Field_StringValue('COMMON','FDAUTO','CO_CONFIGVALUE','0');
  if G_bFoodDedicateDoorUse then
  begin
    // --- 여기서 식수타입 도어 Company 권한 삭제
      dmDBDelete.DeleteTB_CARDPERMITCOMPANYGROUP_FDType;
    //--- 그룹 권한 삭제
      dmDBDelete.DeleteTB_CARDPERMITEMPLOYEEGROUP_FDType;
      // --- 식수권한 재작업
      dmDBUpdate.UpdateTB_CARDPERMITEMPLOYEECODE_FDTypeAdd;
      dmDBUpdate.UpdateTB_CARDPERMITEMPLOYEECODE_FDNotTypeDelete;
      dmDBInsert.InsertIntoTB_CARDPERMITEMPLOYEECODE_FDTypeAdd;
  end;

  stFoodType := copy(cmb_FoodType.Text,1,1);
  stFoodCode := ed_FoodCode.Text;
  if cmb_FoodType.ItemIndex < 0 then
  begin
    showmessage('식수타입선택이 잘못 되었습니다.');
    Exit;
  end;
  stFoodOutTime := ed_FoodEndTime.Text;
  if ed_FoodOutTime.Text <> '' then stFoodOutTime := FillZeroStrNum(ed_FoodOutTime.Text,4);

  if Not isDigit(stFoodCode) then
  begin
    stFoodCode := dmDBFunction.GetNextTB_FOODCODEValue(stFoodType);
    if Not IsDigit(ed_FoodStartTime.Text) then ed_FoodStartTime.Text := '0000';
    if Not IsDigit(ed_FoodEndTime.Text) then ed_FoodEndTime.Text := '0000';
    dmDBInsert.InsertIntoTB_FOODCODE_VALUE(stFoodType,stFoodCode,ed_FoodName.Text,ed_FoodStartTime.Text,ed_FoodEndTime.Text,ed_FoodAmt.Text,stFoodOutTime);
  end else
  begin
    dmDBUpdate.UpdateTB_FOODCODE_VALUE(stFoodType,stFoodCode,ed_FoodName.Text,ed_FoodStartTime.Text,ed_FoodEndTime.Text,ed_FoodAmt.Text,stFoodOutTime);
  end;
  fmMain.LoadConfig;
  SearchFoodCodeList(stFoodCode);
end;

procedure TfmConfigSetting.btn_FoodCodeDeleteClick(Sender: TObject);
begin
  inherited;
  if Not isDigit(ed_FoodCode.Text) then
  begin
    SearchFoodCodeList('');
    Exit;
  end;
  dmDBDelete.DeleteTB_FoodCode_Value(copy(cmb_FoodType.Text,1,1),ed_FoodCode.Text);
  fmMain.LoadConfig;
  SearchFoodCodeList('');
end;

procedure TfmConfigSetting.btn_FoodTypeAddClick(Sender: TObject);
var
  nIndex : integer;
begin
  inherited;
  fmFoodType := TfmFoodType.Create(nil);
  fmFoodType.ShowModal;
  fmFoodType.Free;
  nIndex := cmb_FoodType.ItemIndex;
  LoadFoodTypeCode(TComboBox(cmb_FoodType),False);
  if cmb_FoodType.Items.Count > nIndex  then cmb_FoodType.ItemIndex := nIndex;

end;

procedure TfmConfigSetting.btn_minimizeClick(Sender: TObject);
begin
  inherited;
  windowState := wsNormal;

end;

initialization
  RegisterClass(TfmConfigSetting);
Finalization
  UnRegisterClass(TfmConfigSetting);

end.

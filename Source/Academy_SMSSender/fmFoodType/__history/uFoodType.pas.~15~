unit uFoodType;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, AdvOfficeTabSet, Vcl.StdCtrls, AdvEdit,
  AdvGlassButton, Vcl.Grids, AdvObj, BaseGrid, AdvGrid, AdvSmoothLabel,
  AdvSmoothPanel,ADODB,ActiveX,uSubForm, CommandArray;

type
  TfmFoodType = class(TfmASubForm)
    List: TAdvSmoothPanel;
    AdvSmoothLabel1: TAdvSmoothLabel;
    sg_List: TAdvStringGrid;
    btn_Add: TAdvGlassButton;
    btn_Delete: TAdvGlassButton;
    ed_FoodTypeName: TAdvEdit;
    ed_Code: TAdvEdit;
    menuTab: TAdvOfficeTabSet;
    procedure menuTabChange(Sender: TObject);
    procedure btn_AddClick(Sender: TObject);
    procedure sg_ListClick(Sender: TObject);
    procedure btn_DeleteClick(Sender: TObject);
    procedure FormShow(Sender: TObject);
    procedure sg_ListKeyDown(Sender: TObject; var Key: Word;
      Shift: TShiftState);
  private
    { Private declarations }
    function SearchFoodType(aCode:string):Boolean;
  public
    { Public declarations }
  end;

var
  fmFoodType: TfmFoodType;

implementation

uses
  uCommonFunction,
  uCommonVariable,
  uDataBase,
  uDBDelete,
  uDBInsert,
  uDBUpdate,
  uDBSelect,
  uDBFunction;

{$R *.dfm}

procedure TfmFoodType.btn_AddClick(Sender: TObject);
var
  stFoodType : string;
begin
  inherited;
  stFoodType := ed_Code.Text;
  if Not isDigit(ed_Code.Text) then
  begin
    stFoodType := dmDBFunction.GetNextTB_FOODTYPE_ID;
    dmDBInsert.InsertIntoTB_FOODTYPE_Value(stFoodType,ed_FoodTypeName.text);
  end else
  begin
    dmDBUpdate.UpdateTB_FOODTYPE_Field_StringValue(stFoodType,'RE_FDTYPENAME',ed_FoodTypeName.text);
  end;
  SearchFoodType(stFoodType);
end;

procedure TfmFoodType.btn_DeleteClick(Sender: TObject);
begin
  inherited;
  if Not isDigit(ed_Code.Text) then
  begin
    SearchFoodType('');
    Exit;
  end;
  dmDBDelete.DeleteTB_FOODTYPE_Value(ed_Code.Text);
  dmDBDelete.DeleteTB_FoodCode_FDType(ed_Code.Text);
  SearchFoodType('');

end;

procedure TfmFoodType.FormShow(Sender: TObject);
begin
  inherited;
  menuTab.ActiveTabIndex := 1;
  menuTabChange(self);
  SearchFoodType('');
end;

procedure TfmFoodType.menuTabChange(Sender: TObject);
begin
  if menuTab.ActiveTabIndex = 0 then //Ȩ
  begin
    if menuTab.AdvOfficeTabs.Items[0].Caption = '닫기' then Close
    else
    begin
      menuTab.ActiveTabIndex := 1;
      menuTabChange(self);
    end;
  end else if menuTab.ActiveTabIndex = 1 then
  begin
    menuTab.AdvOfficeTabs.Items[0].Caption := '닫기';
    List.Visible := True;
    List.Align := alClient;
  end;

end;

function TfmFoodType.SearchFoodType(aCode: string): Boolean;
var
  stSql : string;
  TempAdoQuery : TADOQuery;
  nRow : integer;
begin
  GridInit(sg_List,1,2);

  stSql := dmDBSelect.SelectTB_FOODTYPE_Name('');

  Try
    CoInitialize(nil);
    TempAdoQuery := TADOQuery.Create(nil);
    TempAdoQuery.Connection := dmDataBase.ADOConnection;
    TempAdoQuery.DisableControls;
    with TempAdoQuery  do
    begin
      Close;
      SQL.Text := stSql;

      Try
        Open;
      Except
        Exit;
      End;
      if recordCount < 1 then
      begin
        Exit;
      end;

      sg_List.RowCount := recordCount + 1;
      nRow := 1;

      While Not Eof do
      begin
        if G_bApplicationTerminate then Exit;
        with sg_List do
        begin
          Cells[0,nRow] := FindField('RE_FDTYPENAME').AsString;
          Cells[1,nRow] := FindField('RE_FDTYPE').AsString;

          if FindField('RE_FDTYPE').AsString  = aCode then
          begin
            SelectRows(nRow,1);
          end;

        end;
        Application.ProcessMessages;
        inc(nRow);
        Next;
      end;
      sg_ListClick(self);
    end;
  Finally
    TempAdoQuery.EnableControls;
    TempAdoQuery.Free;
    CoUninitialize;
  End;
end;

procedure TfmFoodType.sg_ListClick(Sender: TObject);
begin
  inherited;
  with sg_List do
  begin
    ed_FoodTypeName.Text := cells[0,Row];
    ed_Code.Text := cells[1,Row];
  end;

end;

procedure TfmFoodType.sg_ListKeyDown(Sender: TObject; var Key: Word;
  Shift: TShiftState);
begin
  if (Key = 40) or (Key = 13) then
  begin
    if sg_List.Row = sg_List.RowCount - 1 then
    begin
      if sg_List.Cells[1,sg_List.Row] <> '' then
      begin
        sg_List.AddRow;
      end;
    end;
  end;

end;

end.


